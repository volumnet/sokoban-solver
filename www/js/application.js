(()=>{"use strict";var e={"./dev/src/_header.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/App.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=n("./dev/src/model/Level.ts"),l=n("./dev/src/components/Levels.tsx"),i=n("./dev/src/components/LevelComponent.tsx"),s=n("./dev/src/components/useLevels.ts");function u(){const[e,t]=(0,o.useState)(null),{levels:n,saveLevel:u,deleteLevel:c}=(0,s.default)();let d;if(null!==e){let o;o=-1==e?new a.default:n[e],d=(0,r.jsx)(i.default,{level:o,selectedLevelIndex:e,onClose:()=>t(null),onSave:n=>{const r=u(n,e);-1==e&&t(r-1)},onDelete:()=>{c(e),t(null)}},e)}else d=(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h3",{children:"Выберите уровень:"}),(0,r.jsx)(l.default,{levels:n,onSelect:e=>t(e)})]});return(0,r.jsxs)("div",{className:"body__background-holder",children:[(0,r.jsx)("h1",{className:"body__logo logo",children:"SOKOBAN solver"}),d]})}u.displayName="App";const c=u},"./dev/src/components/BlockComponent.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/react/jsx-runtime.js"),o=(n("./dev/src/components/block.scss"),n("./dev/src/model/BlockType.ts"));function a({className:e="",blockType:t,onClick:n,onContextMenu:a,onMouseDown:l,onMouseMove:i}){let s=e+" block";switch(t){case o.default.Wall:s+=" block_wall";break;case o.default.Player:s+=" block_player";break;case o.default.Box:s+=" block_box";break;case o.default.Place:s+=" block_place"}return(0,r.jsx)("div",{className:s,onClick:n,onContextMenu:a,onMouseMove:i,onMouseDown:l})}a.displayName="BlockComponent";const l=a},"./dev/src/components/LevelComponent.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=(n("./dev/src/components/level.scss"),n("./dev/src/model/BlockType.ts")),l=n("./dev/src/model/Solver.ts"),i=n("./dev/src/components/LevelLegend.tsx"),s=n("./dev/src/components/LevelField.tsx"),u=n("./dev/src/components/LevelLoader.tsx");function c({level:e,selectedLevelIndex:t,onClose:n,onSave:c,onDelete:d}){const[f,p]=(0,o.useState)(-1===t),[h,m]=(0,o.useState)(a.default.Wall),[g,y]=(0,o.useState)(0),[b,v]=(0,o.useState)(0),[k,w]=(0,o.useState)(e.name),[S,x]=(0,o.useState)(e.clone()),T=(0,o.useRef)(null);function E(){const t=e.dataToSave.data,n=new Blob([t],{type:"text/plain"}),r=URL.createObjectURL(n),o=document.createElement("a");o.href=r,o.download=(e.name||"Уровень")+".soko.txt",o.click(),URL.revokeObjectURL(r)}return(0,r.jsxs)("form",{className:"level",ref:T,children:[(0,r.jsx)("main",{className:"level__main",children:f?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("input",{type:"text",className:"form-control",placeholder:"Введите название уровня",required:!0,value:k,onChange:e=>w(e.target.value)}),(0,r.jsx)(s.default,{className:"level__field",level:S,onClick:(e,t)=>{const n=S.setBlockImmutable(e,t,h);x(n)},onRightClick:(e,t)=>{const n=S.setBlockImmutable(e,t,a.default.Empty);x(n)}})]}):(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h3",{children:e.name}),(0,r.jsx)(s.default,{className:"level__field",level:S})]})}),(0,r.jsxs)("aside",{className:"level__aside",children:[f&&(0,r.jsx)(i.default,{className:"level__legend",selectedBlockType:h,onClick:m}),(0,r.jsx)("div",{className:"level__controls",children:f?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("button",{type:"button",className:"btn btn-primary",onClick:function(){if(T.current&&T.current.reportValidity()){const e=S.clone();e.name=k,c(e),p(!1)}},children:"Сохранить"}),(0,r.jsx)(u.default,{onFileLoad:({name:t,text:n})=>{const r=e.clone();r.name=t,r.parse(n),w(t),x(r)}}),(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:E,children:"Сохранить в файл"}),-1!=t?(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:()=>{x(e),p(!1)},children:"Отмена"}):(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:n,children:"« Назад"})]}):(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("button",{type:"button",className:"btn btn-primary",onClick:()=>{p(!0),w(S.name)},children:"Редактировать"}),(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:E,children:"Сохранить в файл"}),(0,r.jsx)("button",{type:"button",className:"btn btn-success",onClick:()=>function(e){try{y(0),v(0);const t=new l.default(e),n=t.solve((()=>{y(t.depth),v(Object.keys(t.states).length)}));console.log(n)}catch(e){alert(e)}}(S),children:"Решить"}),(0,r.jsx)("button",{type:"button",className:"btn btn-danger",onClick:()=>confirm("Вы действительно хотите удалить этот уровень?")&&d(),children:"Удалить"}),(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:n,children:"« Назад"}),g?(0,r.jsxs)("div",{className:"level__stat",children:[g," / ",b]}):""]})})]})]})}c.displayName="LevelComponent";const d=c},"./dev/src/components/LevelField.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=(n("./dev/src/components/level-field.scss"),n("./dev/src/components/BlockComponent.tsx")),l=n("./dev/src/model/config.ts");function i({className:e="",level:t,onClick:n,onRightClick:i}){const s=[],[u,c]=(0,o.useState)(0),d=!!n;for(let e=0;e<l.default.size;e++)for(let o=0;o<l.default.size;o++)s.push((0,r.jsx)(a.default,{className:"level-field__item",blockType:t.blocks[e][o],onMouseMove:t=>{u>0?n&&n(e,o):u<0&&i&&i(e,o)},onMouseDown:t=>{console.log(t),0==t.button?n&&n(e,o):2==t.button&&i&&i(e,o)}},e*l.default.size+o));return(0,r.jsx)("div",{className:"level-field"+(d?" level-field_editor":""),onMouseDown:e=>{0==e.button?c(1):2==e.button&&c(-1)},onMouseUp:e=>{c(0)},onContextMenu:e=>{e.preventDefault(),e.stopPropagation()},children:s})}i.displayName="LevelField";const s=i},"./dev/src/components/LevelLegend.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/react/jsx-runtime.js"),o=(n("./dev/src/components/level-legend.scss"),n("./dev/src/components/level-legend-list.scss"),n("./dev/src/model/BlockType.ts")),a=n("./dev/src/components/BlockComponent.tsx");function l({className:e="",selectedBlockType:t,onClick:n}){const l=Object.values(o.default).map((e=>{let o="level-legend-list__item";return e==t&&(o+=" level-legend-list__item_active"),(0,r.jsx)(a.default,{className:o,blockType:e,onClick:()=>n&&n(e)},e)}));return(0,r.jsx)("nav",{className:e+" level-legend level-legend-list",children:l})}l.displayName="LevelLegend";const i=l},"./dev/src/components/LevelLoader.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js");n("./dev/src/components/level-loader.scss");function a({className:e="",onFileLoad:t}){const[n,a]=(0,o.useState)(!1);let l=(0,o.useRef)(null);async function i(e){if(!/\.soko\.txt$/gi.test(e.name))return alert("Файл должен быть с расширением .soko.txt"),void(l.current&&(l.current.value=""));const n=e.name.replace(/\.soko\.txt$/gi,""),r=await function(e){return new Promise(((t,n)=>{var r=new FileReader;r.onload=()=>{t(r.result)},r.onerror=n,r.readAsText(e)}))}(e);l.current&&(l.current.value=""),t&&t({name:n,text:r})}return(0,r.jsxs)("label",{className:e+" level-loader btn btn-default"+(n?" level-loader_drag":""),onDragOver:()=>a(!0),onDragLeave:()=>a(!1),onDrop:e=>{e.preventDefault(),function(e){if(!e?.dataTransfer?.files?.length)return void(l.current&&(l.current.value=""));i(Array.from(e.dataTransfer.files)[0])}(e),a(!1)},children:[(0,r.jsx)("input",{type:"file",accept:".txt",ref:l,onChange:e=>function(e){if(!e?.target?.files?.length)return void(l.current&&(l.current.value=""));i(Array.from(e.target.files)[0])}(e)}),"Загрузить файл"]})}a.displayName="LevelLoader";const l=a},"./dev/src/components/Levels.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/react/jsx-runtime.js");n("./dev/src/components/levels.scss");function o({levels:e,onSelect:t}){const n=e.map(((e,n)=>(0,r.jsx)("li",{className:"levels__item",children:(0,r.jsx)("button",{className:"levels__link",onClick:()=>t(n),children:e.name})},n)));return(0,r.jsx)("nav",{className:"levels",children:(0,r.jsxs)("ul",{className:"levels__list",children:[n,(0,r.jsx)("li",{className:"levels__item",children:(0,r.jsx)("button",{className:"levels__link levels__link_new",onClick:()=>t(-1),children:"Новый"})})]})})}o.displayName="Levels";const a=o},"./dev/src/components/block.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-field.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-legend-list.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-legend.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-loader.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/levels.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/useLevels.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/react/index.js"),o=n("./dev/src/model/Level.ts");function a(){const[e,t]=(0,r.useState)(function(){const e=window.localStorage.levels||"[]";return JSON.parse(e).map((e=>{const t=new o.default(e.name);return t.parse(e.data),t}))}());function n(e){t(e),function(e){const t=e.map((e=>e.dataToSave)),n=JSON.stringify(t);window.localStorage.levels=n}(e)}return{levels:e,saveLevel:function(t,r=-1){const o=[...e];return-1==r?o.push(t):o[r]=t,n(o),o.length},deleteLevel:function(t){const r=[...e];return r.splice(t,1),n(r),r.length}}}},"./dev/src/model/BlockMovement.ts":(e,t,n)=>{var r;n.r(t),n.d(t,{BlockMovement:()=>r,default:()=>o}),function(e){e.None="",e.Up="u",e.Right="r",e.Down="d",e.Left="l"}(r||(r={}));const o=r},"./dev/src/model/BlockType.ts":(e,t,n)=>{var r;n.r(t),n.d(t,{BlockType:()=>r,default:()=>o}),function(e){e.Empty=" ",e.Wall="#",e.Player="@",e.Box="B",e.Place="."}(r||(r={}));const o=r},"./dev/src/model/GameState.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./dev/src/model/Point.ts"),o=n("./dev/src/model/BlockMovement.ts");class a{room;boxes;winState;player;constructor(e,t,n,r){this.room=e,this.boxes=t,this.winState=n,this.player=r}get isWin(){for(let e in this.winState.points)if(void 0===this.boxes.points[e])return!1;return!0}get canReachTo(){const e={};e[this.player.toString()]="";let t={...e};for(;Object.keys(t).length;){const n={};for(let a in t){const l=r.default.fromString(a);for(let r of[o.default.Up,o.default.Right,o.default.Down,o.default.Left]){const o=l.stepTo(r);if(o){const l=o.toString();void 0!==e[l]||this.isEngaged(o)||(n[l]=e[l]=t[a]+r)}}}t=n}return e}get nextStates(){const e={},t=this.canReachTo;for(let n of Object.values(this.boxes.points))for(let r of[o.default.Up,o.default.Right,o.default.Down,o.default.Left]){let l,i=o.default.None;switch(r){case o.default.Up:i=o.default.Down;break;case o.default.Right:i=o.default.Left;break;case o.default.Down:i=o.default.Up;break;case o.default.Left:i=o.default.Right}if(i==o.default.None)continue;if(l=n.stepTo(i),!l)continue;const s=t[l.toString()];if(void 0===s)continue;if(!this.blockMovementAvailable(n,r))continue;const u=s+r,c=this.boxes.movePoint(n,r);if(c){const t=new a(this.room,c,this.winState,n);e[u]=t}}return e}blockMovementAvailable(e,t){const n=e.stepTo(t);if(!n)return!1;if(this.isEngaged(n))return!1;if(this.room.corners.hasPoint(n))return!1;const r=n.up,a=!r||!!this.isEngaged(r),l=n.down,i=!l||!!this.isEngaged(l),s=n.left,u=!s||!!this.isEngaged(s),c=n.right,d=!c||!!this.isEngaged(c),f=r?.left,p=!f||!!this.isEngaged(f),h=r?.right,m=!h||!!this.isEngaged(h),g=l?.left,y=!g||!!this.isEngaged(g),b=l?.right,v=!b||!!this.isEngaged(b);switch(t){case o.default.Up:if(a&&(u&&p||d&&m))return!1;break;case o.default.Down:if(i&&(u&&y||d&&v))return!1;break;case o.default.Left:if(u&&(a&&p||i&&y))return!1;break;case o.default.Right:if(d&&(a&&m||i&&v))return!1}return!0}isEngaged(e){return!!this.room.hasPoint(e)||!!this.boxes.hasPoint(e)}}},"./dev/src/model/Level.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var r=n("./dev/src/model/BlockType.ts"),o=n("./dev/src/model/Point.ts"),a=n("./dev/src/model/PointSet.ts"),l=n("./dev/src/model/Room.ts"),i=n("./dev/src/model/GameState.ts"),s=n("./dev/src/model/config.ts");class u{name;_blocks=[];constructor(e="",t=[]){this.name=e,this.blocks=t}set blocks(e){this._blocks=Array.from({length:s.default.size},(()=>Array.from({length:s.default.size},(()=>r.default.Empty))));for(let t=0;t<s.default.size;t++)if(e[t])for(let n=0;n<s.default.size;n++)e[t][n]&&this.setBlock(t,n,e[t][n])}get blocks(){return this._blocks}get player(){for(let e=0;e<s.default.size;e++)for(let t=0;t<s.default.size;t++)if(this._blocks[e][t]==r.default.Player)return new o.default(t,e);return null}get dataToSave(){const e=this._blocks.map((e=>e.join(""))).join("\n");return{name:this.name,data:e}}get gameState(){const e=[],t=[],n=[];for(let a=0;a<s.default.size;a++)for(let l=0;l<s.default.size;l++)switch(this._blocks[a][l]){case r.default.Wall:e.push(new o.default(l,a));break;case r.default.Box:t.push(new o.default(l,a));break;case r.default.Place:n.push(new o.default(l,a))}if(!t.length)throw"Нужен хотя бы один ящик";if(n.length>t.length)throw"Не хватает ящиков (еще "+(n.length-t.length)+")";if(!this.player)throw"Не указано положение игрока";return new i.default(new l.default(e),new a.default(t),new a.default(n),this.player)}parse(e){this._blocks=[];const t=e.split("\n").map((e=>Array.from(e).map((e=>Object.values(r.default).includes(e)?e:r.default.Empty))));this.blocks=t}clone(){return new u(this.name,this.blocks)}setBlock(e,t,n){n!=r.default.Player||!this.player||t==this.player.x&&e==this.player.y||(this._blocks[this.player.y][this.player.x]=r.default.Empty),this._blocks[e][t]=n}setBlockImmutable(e,t,n){const r=this.clone();return r.setBlock(e,t,n),r}}},"./dev/src/model/Point.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./dev/src/model/BlockMovement.ts"),o=n("./dev/src/model/config.ts");class a extends Array{constructor(e,t){if(super(e,t),2!==this.length)throw new Error("Point должен содержать ровно 2 числа")}get x(){return this[0]}get y(){return this[1]}get up(){return this.stepTo(r.default.Up)}get down(){return this.stepTo(r.default.Down)}get left(){return this.stepTo(r.default.Left)}get right(){return this.stepTo(r.default.Right)}push(...e){throw new Error("Запрет изменения элементов в Point")}unshift(...e){throw new Error("Запрет изменения элементов в Point")}toString(){return this[0].toString(36)+this[1].toString(36)}static fromString(e){const t=parseInt(e[0]||"0",36),n=parseInt(e[1]||"0",36);return new a(t,n)}stepTo(e){switch(e){case r.default.None:return this;case r.default.Left:if(this[0]>0)return new a(this[0]-1,this[1]);break;case r.default.Right:if(this[0]<o.default.size-1)return new a(this[0]+1,this[1]);break;case r.default.Up:if(this[1]>0)return new a(this[0],this[1]-1);break;case r.default.Down:if(this[1]<o.default.size-1)return new a(this[0],this[1]+1)}return null}}},"./dev/src/model/PointSet.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./dev/src/model/BlockMovement.ts"),o=n("./dev/src/model/config.ts");class a{_points=[];get points(){return this._points}constructor(e=[]){this._points=new Array(o.default.size).fill(!1,0,o.default.size).map((e=>new Array(o.default.size).fill(!1,0,o.default.size)));const t=[...e];for(let e of t)this._points[e.y][e.x]=!0}clone(){let e=new a;return e._points=this._points.map(((e,t)=>[...e])),e}hasPoint(e){return this._points[e.y][e.x]}addPoint(e){const t=this.clone();return t._points[e.y][e.x]=!0,t}deletePoint(e){const t=this.clone();return t._points[e.y][e.x]=!1,t}replacePoint(e,t){const n=this.clone();return n._points[e.y][e.x]=!1,n._points[t.y][t.x]=!0,n}movePoint(e,t){if(!this._points[e.y][e.x]||t==r.default.None)return!1;const n=e.stepTo(t);if(!n||this._points[n.y][n.x])return!1;const o=this.clone();return o.replacePoint(e,n),o}toString(){return this._points.map(((e,t)=>{const n=t.toString(36);return e.map(((e,t)=>e?t.toString(36)+n:"")).join("")})).join("")}}},"./dev/src/model/Room.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var r=n("./dev/src/model/Point.ts"),o=n("./dev/src/model/PointSet.ts"),a=n("./dev/src/model/config.ts");class l extends o.default{corners;constructor(e){super(e),this.corners=new o.default;for(let e=0;e<a.default.size;e++)for(let t=0;t<a.default.size;t++){if(this.points[e][t])continue;const n=new r.default(t,e),o=n.up,a=!o||!!this.hasPoint(o),l=n.down,i=!l||!!this.hasPoint(l),s=n.left,u=!s||!!this.hasPoint(s),c=n.right,d=!c||!!this.hasPoint(c);(a||i)&&(u||d)&&this.corners.addPoint(n)}}}},"./dev/src/model/Solver.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});class r{level;states={};_depth=0;constructor(e){this.level=e}get depth(){return this._depth}async solve(e){let t={};const n=this.level.gameState;for(t[""]=n;Object.keys(t).length&&this._depth<8;){const e=performance.now();let n={};for(let e in t){const r=t[e],o=this.processState(e,r);if("string"==typeof o)return o;n={...n,...o}}t=n,this._depth++,console.log("Вложенность: "+this._depth,"Состояний: ",Object.keys(t).length,"Всего состояний: ",Object.keys(this.states).length,"Время: "+(performance.now()-e))}return null}processState(e,t){const n=t.nextStates,r={};for(let t in n){const o=n[t],a=o.player.toString()+o.boxes.toString(),l=e+t;if(o.isWin)return l;this.states[a]||(r[l]=o,this.states[a]=l)}return r}}},"./dev/src/model/config.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r={size:32}},"./node_modules/react-dom/cjs/react-dom-client.development.js":(e,t,n)=>{!function(){function e(e,t){for(e=e.memoizedState;null!==e&&0<t;)e=e.next,t--;return e}function r(e,t,n,o){if(n>=t.length)return o;var a=t[n],l=Kc(e)?e.slice():xc({},e);return l[a]=r(e[a],t,n+1,o),l}function o(e,t,n){if(t.length===n.length){for(var r=0;r<n.length-1;r++)if(t[r]!==n[r])return void console.warn("copyWithRename() expects paths to be the same except for the deepest key");return a(e,t,n,0)}console.warn("copyWithRename() expects paths of the same length")}function a(e,t,n,r){var o=t[r],l=Kc(e)?e.slice():xc({},e);return r+1===t.length?(l[n[r]]=l[o],Kc(l)?l.splice(o,1):delete l[o]):l[o]=a(e[o],t,n,r+1),l}function l(e,t,n){var r=t[n],o=Kc(e)?e.slice():xc({},e);return n+1===t.length?(Kc(o)?o.splice(r,1):delete o[r],o):(o[r]=l(e[r],t,n+1),o)}function i(){return!1}function s(){return null}function u(){}function c(){console.error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks")}function d(){console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")}function f(){}function p(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")}function h(e,t,n,r){return new Sn(e,t,n,r)}function m(e,t){e.context===dh&&(Gu(e.current,2,t,e,null,null),Ri())}function g(e,t){if(null!==fh){var n=t.staleFamilies;t=t.updatedFamilies,Gi(),wn(e.current,t,n),Ri()}}function y(e){fh=e}function b(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function v(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function k(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function w(e){if(v(e)!==e)throw Error("Unable to find node on an unmounted component.")}function S(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=S(e)))return t;e=e.sibling}return null}function x(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Qc&&e[Qc]||e["@@iterator"])?e:null}function T(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===Yc?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Cc:return"Fragment";case Pc:return"Profiler";case Rc:return"StrictMode";case Nc:return"Suspense";case zc:return"SuspenseList";case Mc:return"Activity"}if("object"==typeof e)switch("number"==typeof e.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),e.$$typeof){case _c:return"Portal";case Dc:return(e.displayName||"Context")+".Provider";case Lc:return(e._context.displayName||"Context")+".Consumer";case Ic:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case Ac:return null!==(t=e.displayName||null)?t:T(e.type)||"Memo";case Fc:t=e._payload,e=e._init;try{return T(e(t))}catch(e){}}return null}function E(e){return"number"==typeof e.tag?_(e):"string"==typeof e.name?e.name:null}function _(e){var t=e.type;switch(e.tag){case 31:return"Activity";case 24:return"Cache";case 9:return(t._context.displayName||"Context")+".Consumer";case 10:return(t.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 26:case 27:case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return T(t);case 8:return t===Rc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;break;case 29:if(null!=(t=e._debugInfo))for(var n=t.length-1;0<=n;n--)if("string"==typeof t[n].name)return t[n].name;if(null!==e.return)return _(e.return)}return null}function C(e){return{current:e}}function R(e,t){0>td?console.error("Unexpected pop."):(t!==ed[td]&&console.error("Unexpected Fiber popped."),e.current=Zc[td],Zc[td]=null,ed[td]=null,td--)}function P(e,t,n){td++,Zc[td]=e.current,ed[td]=n,e.current=t}function O(e){return null===e&&console.error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."),e}function L(e,t){P(od,t,e),P(rd,e,e),P(nd,null,e);var n=t.nodeType;switch(n){case 9:case 11:n=9===n?"#document":"#fragment",t=(t=t.documentElement)&&(t=t.namespaceURI)?Zs(t):Uv;break;default:if(n=t.tagName,t=t.namespaceURI)t=eu(t=Zs(t),n);else switch(n){case"svg":t=Hv;break;case"math":t=Wv;break;default:t=Uv}}n={context:t,ancestorInfo:n=gt(null,n=n.toLowerCase())},R(nd,e),P(nd,n,e)}function D(e){R(nd,e),R(rd,e),R(od,e)}function I(){return O(nd.current)}function N(e){null!==e.memoizedState&&P(ad,e,e);var t=O(nd.current),n=e.type,r=eu(t.context,n);t!==(r={context:r,ancestorInfo:n=gt(t.ancestorInfo,n)})&&(P(rd,e,e),P(nd,r,e))}function z(e){rd.current===e&&(R(nd,e),R(rd,e)),ad.current===e&&(R(ad,e),Sk._currentValue=wk)}function A(e){return"function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object"}function F(e){try{return M(e),!1}catch(e){return!0}}function M(e){return""+e}function j(e,t){if(F(e))return console.error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",t,A(e)),M(e)}function U(e,t){if(F(e))return console.error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",t,A(e)),M(e)}function H(e){if(F(e))return console.error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",A(e)),M(e)}function W(e){if("function"==typeof bd&&vd(e),wd&&"function"==typeof wd.setStrictMode)try{wd.setStrictMode(kd,e)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}}function B(e){Sd=e}function V(){null!==Sd&&"function"==typeof Sd.markCommitStopped&&Sd.markCommitStopped()}function q(e){null!==Sd&&"function"==typeof Sd.markComponentRenderStarted&&Sd.markComponentRenderStarted(e)}function $(){null!==Sd&&"function"==typeof Sd.markComponentRenderStopped&&Sd.markComponentRenderStopped()}function Q(e){null!==Sd&&"function"==typeof Sd.markRenderStarted&&Sd.markRenderStarted(e)}function Y(){null!==Sd&&"function"==typeof Sd.markRenderStopped&&Sd.markRenderStopped()}function K(e,t){null!==Sd&&"function"==typeof Sd.markStateUpdateScheduled&&Sd.markStateUpdateScheduled(e,t)}function G(e){return 1&e?"SyncHydrationLane":2&e?"Sync":4&e?"InputContinuousHydration":8&e?"InputContinuous":16&e?"DefaultHydration":32&e?"Default":128&e?"TransitionHydration":4194048&e?"Transition":62914560&e?"Retry":67108864&e?"SelectiveHydration":134217728&e?"IdleHydration":268435456&e?"Idle":536870912&e?"Offscreen":1073741824&e?"Deferred":void 0}function X(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return console.error("Should have found matching lanes. This is a bug in React."),e}}function J(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var o=0,a=e.suspendedLanes,l=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!==(r=i&~a)?o=X(r):0!==(l&=i)?o=X(l):n||0!==(n=i&~e)&&(o=X(n)):0!==(i=r&~a)?o=X(i):0!==l?o=X(l):n||0!==(n=r&~e)&&(o=X(n)),0===o?0:0!==t&&t!==o&&!(t&a)&&((a=o&-o)>=(n=t&-t)||32===a&&4194048&n)?t:o}function Z(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ee(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return console.error("Should have found matching lanes. This is a bug in React."),-1}}function te(){var e=Rd;return!(4194048&(Rd<<=1))&&(Rd=256),e}function ne(){var e=Pd;return!(62914560&(Pd<<=1))&&(Pd=4194304),e}function re(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function oe(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function ae(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-Ed(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function le(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Ed(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function ie(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function se(e,t,n){if(Td)for(e=e.pendingUpdatersLaneMap;0<n;){var r=31-Ed(n),o=1<<r;e[r].add(t),n&=~o}}function ue(e,t){if(Td)for(var n=e.pendingUpdatersLaneMap,r=e.memoizedUpdaters;0<t;){var o=31-Ed(t);e=1<<o,0<(o=n[o]).size&&(o.forEach((function(e){var t=e.alternate;null!==t&&r.has(t)||r.add(e)})),o.clear()),t&=~e}}function ce(e){return e&=-e,0!==Od&&Od<e?0!==Ld&&Ld<e?134217727&e?Dd:Id:Ld:Od}function de(){var e=Xc.p;return 0!==e?e:void 0===(e=window.event)?Dd:ic(e.type)}function fe(e){delete e[zd],delete e[Ad],delete e[Md],delete e[jd],delete e[Ud]}function pe(e){var t=e[zd];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Fd]||n[zd]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=wu(e);null!==e;){if(n=e[zd])return n;e=wu(e)}return t}n=(e=n).parentNode}return null}function he(e){if(e=e[zd]||e[Fd]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function me(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error("getNodeFromInstance: Invalid argument.")}function ge(e){var t=e[Hd];return t||(t=e[Hd]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function ye(e){e[Wd]=!0}function be(e,t){ve(e,t),ve(e+"Capture",t)}function ve(e,t){Vd[e]&&console.error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",e),Vd[e]=t;var n=e.toLowerCase();for(qd[n]=e,"onDoubleClick"===e&&(qd.ondblclick=e),e=0;e<t.length;e++)Bd.add(t[e])}function ke(e,t){$d[t.type]||t.onChange||t.onInput||t.readOnly||t.disabled||null==t.value||("select"===e?console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."):console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")),t.onChange||t.readOnly||t.disabled||null==t.checked||console.error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}function we(e){return!!ld.call(Kd,e)||!ld.call(Yd,e)&&(Qd.test(e)?Kd[e]=!0:(Yd[e]=!0,console.error("Invalid attribute name: `%s`",e),!1))}function Se(e,t,n){if(we(t)){if(!e.hasAttribute(t)){switch(typeof n){case"symbol":case"object":case"function":return n;case"boolean":if(!1===n)return n}return void 0===n?void 0:null}return""===(e=e.getAttribute(t))&&!0===n||(j(n,t),e===""+n?n:e)}}function xe(e,t,n){if(we(t))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}j(n,t),e.setAttribute(t,""+n)}}function Te(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}j(n,t),e.setAttribute(t,""+n)}}function Ee(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}j(r,n),e.setAttributeNS(t,n,""+r)}}function _e(){}function Ce(e){if(void 0===Xd)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Xd=t&&t[1]||"",Jd=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xd+e+Jd}function Re(e,t){if(!e||Zd)return"";var n=ef.get(e);if(void 0!==n)return n;Zd=!0,n=Error.prepareStackTrace,Error.prepareStackTrace=void 0;var r;r=Gc.H,Gc.H=null,function(){if(0===Gd){Uc=console.log,Hc=console.info,Wc=console.warn,Bc=console.error,Vc=console.group,qc=console.groupCollapsed,$c=console.groupEnd;var e={configurable:!0,enumerable:!0,value:_e,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Gd++}();try{var o={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};o.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(o.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(o.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=o.DetermineComponentFrameRoot(),i=l[0],s=l[1];if(i&&s){var u=i.split("\n"),c=s.split("\n");for(l=a=0;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;for(;l<c.length&&!c[l].includes("DetermineComponentFrameRoot");)l++;if(a===u.length||l===c.length)for(a=u.length-1,l=c.length-1;1<=a&&0<=l&&u[a]!==c[l];)l--;for(;1<=a&&0<=l;a--,l--)if(u[a]!==c[l]){if(1!==a||1!==l)do{if(a--,0>--l||u[a]!==c[l]){var d="\n"+u[a].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),"function"==typeof e&&ef.set(e,d),d}}while(1<=a&&0<=l);break}}}finally{Zd=!1,Gc.H=r,function(){if(0==--Gd){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:xc({},e,{value:Uc}),info:xc({},e,{value:Hc}),warn:xc({},e,{value:Wc}),error:xc({},e,{value:Bc}),group:xc({},e,{value:Vc}),groupCollapsed:xc({},e,{value:qc}),groupEnd:xc({},e,{value:$c})})}0>Gd&&console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=n}return u=(u=e?e.displayName||e.name:"")?Ce(u):"","function"==typeof e&&ef.set(e,u),u}function Pe(e){var t=Error.prepareStackTrace;return Error.prepareStackTrace=void 0,e=e.stack,Error.prepareStackTrace=t,e.startsWith("Error: react-stack-top-frame\n")&&(e=e.slice(29)),-1!==(t=e.indexOf("\n"))&&(e=e.slice(t+1)),-1!==(t=e.indexOf("react-stack-bottom-frame"))&&(t=e.lastIndexOf("\n",t)),-1===t?"":e=e.slice(0,t)}function Oe(e){switch(e.tag){case 26:case 27:case 5:return Ce(e.type);case 16:return Ce("Lazy");case 13:return Ce("Suspense");case 19:return Ce("SuspenseList");case 0:case 15:return Re(e.type,!1);case 11:return Re(e.type.render,!1);case 1:return Re(e.type,!0);case 31:return Ce("Activity");default:return""}}function Le(e){try{var t="";do{t+=Oe(e);var n=e._debugInfo;if(n)for(var r=n.length-1;0<=r;r--){var o=n[r];if("string"==typeof o.name){var a=t,l=o.env;t=a+Ce(o.name+(l?" ["+l+"]":""))}}e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function De(e){return(e=e?e.displayName||e.name:"")?Ce(e):""}function Ie(){if(null===tf)return null;var e=tf._debugOwner;return null!=e?E(e):null}function Ne(){if(null===tf)return"";var e=tf;try{var t="";switch(6===e.tag&&(e=e.return),e.tag){case 26:case 27:case 5:t+=Ce(e.type);break;case 13:t+=Ce("Suspense");break;case 19:t+=Ce("SuspenseList");break;case 31:t+=Ce("Activity");break;case 30:case 0:case 15:case 1:e._debugOwner||""!==t||(t+=De(e.type));break;case 11:e._debugOwner||""!==t||(t+=De(e.type.render))}for(;e;)if("number"==typeof e.tag){var n=e;e=n._debugOwner;var r=n._debugStack;e&&r&&("string"!=typeof r&&(n._debugStack=r=Pe(r)),""!==r&&(t+="\n"+r))}else{if(null==e.debugStack)break;var o=e.debugStack;(e=e.owner)&&o&&(t+="\n"+Pe(o))}var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return a}function ze(e,t,n,r,o,a,l){var i=tf;Ae(e);try{return null!==e&&e._debugTask?e._debugTask.run(t.bind(null,n,r,o,a,l)):t(n,r,o,a,l)}finally{Ae(i)}throw Error("runWithFiberInDEV should never be called in production. This is a bug in React.")}function Ae(e){Gc.getCurrentStack=null===e?null:Ne,nf=!1,tf=e}function Fe(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":return e;case"object":return H(e),e;default:return""}}function Me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function je(e){e._valueTracker||(e._valueTracker=function(e){var t=Me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t);H(e[t]);var r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){H(e),r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){H(e),r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ue(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function He(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function We(e){return e.replace(rf,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function Be(e,t){void 0===t.checked||void 0===t.defaultChecked||af||(console.error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",Ie()||"A component",t.type),af=!0),void 0===t.value||void 0===t.defaultValue||of||(console.error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",Ie()||"A component",t.type),of=!0)}function Ve(e,t,n,r,o,a,l,i){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?(j(l,"type"),e.type=l):e.removeAttribute("type"),null!=t?"number"===l?(0===t&&""===e.value||e.value!=t)&&(e.value=""+Fe(t)):e.value!==""+Fe(t)&&(e.value=""+Fe(t)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=t?$e(e,l,Fe(t)):null!=n?$e(e,l,Fe(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?(j(i,"name"),e.name=""+Fe(i)):e.removeAttribute("name")}function qe(e,t,n,r,o,a,l,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(j(a,"type"),e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+Fe(n):"",t=null!=t?""+Fe(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(j(l,"name"),e.name=l)}function $e(e,t,n){"number"===t&&He(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function Qe(e,t){null==t.value&&("object"==typeof t.children&&null!==t.children?wc.Children.forEach(t.children,(function(e){null==e||"string"==typeof e||"number"==typeof e||"bigint"==typeof e||sf||(sf=!0,console.error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."))})):null==t.dangerouslySetInnerHTML||uf||(uf=!0,console.error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))),null==t.selected||lf||(console.error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),lf=!0)}function Ye(){var e=Ie();return e?"\n\nCheck the render method of `"+e+"`.":""}function Ke(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Fe(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ge(e,t){for(e=0;e<df.length;e++){var n=df[e];if(null!=t[n]){var r=Kc(t[n]);t.multiple&&!r?console.error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,Ye()):!t.multiple&&r&&console.error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,Ye())}}void 0===t.value||void 0===t.defaultValue||cf||(console.error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"),cf=!0)}function Xe(e,t){void 0===t.value||void 0===t.defaultValue||ff||(console.error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",Ie()||"A component"),ff=!0),null!=t.children&&null==t.value&&console.error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.")}function Je(e,t,n){null==t||((t=""+Fe(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+Fe(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function Ze(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(Kc(r)){if(1<r.length)throw Error("<textarea> can only have at most one child.");r=r[0]}n=r}null==n&&(n=""),t=n}n=Fe(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function et(e,t){return void 0===e.serverProps&&0===e.serverTail.length&&1===e.children.length&&3<e.distanceFromLeaf&&e.distanceFromLeaf>15-t?et(e.children[0],t):e}function tt(e){return"  "+"  ".repeat(e)}function nt(e){return"+ "+"  ".repeat(e)}function rt(e){return"- "+"  ".repeat(e)}function ot(e){switch(e.tag){case 26:case 27:case 5:return e.type;case 16:return"Lazy";case 13:return"Suspense";case 19:return"SuspenseList";case 0:case 15:case 1:return(e=e.type).displayName||e.name||null;case 11:return(e=e.type.render).displayName||e.name||null;default:return null}}function at(e,t){return pf.test(e)?(e=JSON.stringify(e)).length>t-2?8>t?'{"..."}':"{"+e.slice(0,t-7)+'..."}':"{"+e+"}":e.length>t?5>t?'{"..."}':e.slice(0,t-3)+"...":e}function lt(e,t,n){var r=120-2*n;if(null===t)return nt(n)+at(e,r)+"\n";if("string"==typeof t){for(var o=0;o<t.length&&o<e.length&&t.charCodeAt(o)===e.charCodeAt(o);o++);return o>r-8&&10<o&&(e="..."+e.slice(o-8),t="..."+t.slice(o-8)),nt(n)+at(e,r)+"\n"+rt(n)+at(t,r)+"\n"}return tt(n)+at(e,r)+"\n"}function it(e){return Object.prototype.toString.call(e).replace(/^\[object (.*)\]$/,(function(e,t){return t}))}function st(e,t){switch(typeof e){case"string":return(e=JSON.stringify(e)).length>t?5>t?'"..."':e.slice(0,t-4)+'..."':e;case"object":if(null===e)return"null";if(Kc(e))return"[...]";if(e.$$typeof===Ec)return(t=T(e.type))?"<"+t+">":"<...>";var n=it(e);if("Object"===n){for(var r in n="",t-=2,e)if(e.hasOwnProperty(r)){var o=JSON.stringify(r);if(o!=='"'+r+'"'&&(r=o),t-=r.length-2,0>(t-=(o=st(e[r],15>t?t:15)).length)){n+=""===n?"...":", ...";break}n+=(""===n?"":",")+r+":"+o}return"{"+n+"}"}return n;case"function":return(t=e.displayName||e.name)?"function "+t:"function";default:return String(e)}}function ut(e,t){return"string"!=typeof e||pf.test(e)?"{"+st(e,t-2)+"}":e.length>t-2?5>t?'"..."':'"'+e.slice(0,t-5)+'..."':'"'+e+'"'}function ct(e,t,n){var r,o=120-n.length-e.length,a=[];for(r in t)if(t.hasOwnProperty(r)&&"children"!==r){var l=ut(t[r],120-n.length-r.length-1);o-=r.length+l.length+2,a.push(r+"="+l)}return 0===a.length?n+"<"+e+">\n":0<o?n+"<"+e+" "+a.join(" ")+">\n":n+"<"+e+"\n"+n+"  "+a.join("\n"+n+"  ")+"\n"+n+">\n"}function dt(e,t,n){var r,o="",a=xc({},t);for(r in e)if(e.hasOwnProperty(r)){delete a[r];var l=120-2*n-r.length-2,i=st(e[r],l);t.hasOwnProperty(r)?(l=st(t[r],l),o+=nt(n)+r+": "+i+"\n",o+=rt(n)+r+": "+l+"\n"):o+=nt(n)+r+": "+i+"\n"}for(var s in a)a.hasOwnProperty(s)&&(e=st(a[s],120-2*n-s.length-2),o+=rt(n)+s+": "+e+"\n");return o}function ft(e,t){var n=ot(e);if(null===n){for(n="",e=e.child;e;)n+=ft(e,t),e=e.sibling;return n}return tt(t)+"<"+n+">\n"}function pt(e,t){var n=et(e,t);if(n!==e&&(1!==e.children.length||e.children[0]!==n))return tt(t)+"...\n"+pt(n,t+1);n="";var r=e.fiber._debugInfo;if(r)for(var o=0;o<r.length;o++){var a=r[o].name;"string"==typeof a&&(n+=tt(t)+"<"+a+">\n",t++)}if(r="",o=e.fiber.pendingProps,6===e.fiber.tag)r=lt(o,e.serverProps,t),t++;else if(null!==(a=ot(e.fiber)))if(void 0===e.serverProps){var l=120-2*(r=t)-a.length-2,i="";for(u in o)if(o.hasOwnProperty(u)&&"children"!==u){var s=ut(o[u],15);if(0>(l-=u.length+s.length+2)){i+=" ...";break}i+=" "+u+"="+s}r=tt(r)+"<"+a+i+">\n",t++}else null===e.serverProps?(r=ct(a,o,nt(t)),t++):"string"==typeof e.serverProps?console.error("Should not have matched a non HostText fiber to a Text node. This is a bug in React."):(r=function(e,t,n,r){var o="",a=new Map;for(u in n)n.hasOwnProperty(u)&&a.set(u.toLowerCase(),u);if(1===a.size&&a.has("children"))o+=ct(e,t,tt(r));else{for(var l in t)if(t.hasOwnProperty(l)&&"children"!==l){var i=120-2*(r+1)-l.length-1,s=a.get(l.toLowerCase());if(void 0!==s){a.delete(l.toLowerCase());var u=t[l];s=n[s];var c=ut(u,i);i=ut(s,i),"object"==typeof u&&null!==u&&"object"==typeof s&&null!==s&&"Object"===it(u)&&"Object"===it(s)&&(2<Object.keys(u).length||2<Object.keys(s).length||-1<c.indexOf("...")||-1<i.indexOf("..."))?o+=tt(r+1)+l+"={{\n"+dt(u,s,r+2)+tt(r+1)+"}}\n":(o+=nt(r+1)+l+"="+c+"\n",o+=rt(r+1)+l+"="+i+"\n")}else o+=tt(r+1)+l+"="+ut(t[l],i)+"\n"}a.forEach((function(e){if("children"!==e){var t=120-2*(r+1)-e.length-1;o+=rt(r+1)+e+"="+ut(n[e],t)+"\n"}})),o=""===o?tt(r)+"<"+e+">\n":tt(r)+"<"+e+"\n"+o+tt(r)+">\n"}return e=n.children,t=t.children,"string"==typeof e||"number"==typeof e||"bigint"==typeof e?(a="","string"!=typeof t&&"number"!=typeof t&&"bigint"!=typeof t||(a=""+t),o+=lt(a,""+e,r+1)):"string"!=typeof t&&"number"!=typeof t&&"bigint"!=typeof t||(o=null==e?o+lt(""+t,null,r+1):o+lt(""+t,void 0,r+1)),o}(a,o,e.serverProps,t),t++);var u="";for(o=e.fiber.child,a=0;o&&a<e.children.length;)(l=e.children[a]).fiber===o?(u+=pt(l,t),a++):u+=ft(o,t),o=o.sibling;for(o&&0<e.children.length&&(u+=tt(t)+"...\n"),o=e.serverTail,null===e.serverProps&&t--,e=0;e<o.length;e++)u="string"==typeof(a=o[e])?u+(rt(t)+at(a,120-2*t)+"\n"):u+ct(a.type,a.props,rt(t));return n+r+u}function ht(e){try{return"\n\n"+pt(e,0)}catch(e){return""}}function mt(e,t,n){for(var r=t,o=null,a=0;r;)r===e&&(a=0),o={fiber:r,children:null!==o?[o]:[],serverProps:r===t?n:r===e?null:void 0,serverTail:[],distanceFromLeaf:a},a++,r=r.return;return null!==o?ht(o).replaceAll(/^[+-]/gm,">"):""}function gt(e,t){var n=xc({},e||bf),r={tag:t};return-1!==mf.indexOf(t)&&(n.aTagInScope=null,n.buttonTagInScope=null,n.nobrTagInScope=null),-1!==gf.indexOf(t)&&(n.pTagInButtonScope=null),-1!==hf.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(n.listItemTagAutoclosing=null,n.dlItemTagAutoclosing=null),n.current=r,"form"===t&&(n.formTag=r),"a"===t&&(n.aTagInScope=r),"button"===t&&(n.buttonTagInScope=r),"nobr"===t&&(n.nobrTagInScope=r),"p"===t&&(n.pTagInButtonScope=r),"li"===t&&(n.listItemTagAutoclosing=r),"dd"!==t&&"dt"!==t||(n.dlItemTagAutoclosing=r),"#document"===t||"html"===t?n.containerTagInScope=null:n.containerTagInScope||(n.containerTagInScope=r),null!==e||"#document"!==t&&"html"!==t&&"body"!==t?!0===n.implicitRootScope&&(n.implicitRootScope=!1):n.implicitRootScope=!0,n}function yt(e,t,n){switch(t){case"select":return"hr"===e||"option"===e||"optgroup"===e||"script"===e||"template"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":if(n)break;return"head"===e||"body"===e||"frameset"===e;case"frameset":return"frame"===e;case"#document":if(!n)return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===yf.indexOf(t);case"caption":case"col":case"colgroup":case"frameset":case"frame":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t;case"head":return n||null===t;case"html":return n&&"#document"===t||null===t;case"body":return n&&("#document"===t||"html"===t)||null===t}return!0}function bt(e,t){for(;e;){switch(e.tag){case 5:case 26:case 27:if(e.type===t)return e}e=e.return}return null}function vt(e,t){var n=(t=t||bf).current;if(t=(n=yt(e,n&&n.tag,t.implicitRootScope)?null:n)?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,t),!(t=n||t))return!0;var r=t.tag;if(t=String(!!n)+"|"+e+"|"+r,vf[t])return!1;vf[t]=!0;var o=(t=tf)?bt(t.return,r):null,a=null!==t&&null!==o?mt(o,t,null):"",l="<"+e+">";return n?(n="","table"===r&&"tr"===e&&(n+=" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),console.error("In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",l,r,n,a)):console.error("In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",l,r,a),t&&(e=t.return,null===o||null===e||o===e&&e._debugOwner===t._debugOwner||ze(o,(function(){console.error("<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",r,l)}))),!1}function kt(e,t,n){if(n||yt("#text",t,!1))return!0;if(vf[n="#text|"+t])return!1;vf[n]=!0;var r=(n=tf)?bt(n,t):null;return n=null!==n&&null!==r?mt(r,n,6!==n.tag?{children:null}:null):"",/\S/.test(e)?console.error("In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",t,n):console.error("In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",t,n),!1}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function St(e,t,n){var r=0===t.indexOf("--");r||(-1<t.indexOf("-")?Cf.hasOwnProperty(t)&&Cf[t]||(Cf[t]=!0,console.error("Unsupported style property %s. Did you mean %s?",t,t.replace(Tf,"ms-").replace(Ef,(function(e,t){return t.toUpperCase()})))):xf.test(t)?Cf.hasOwnProperty(t)&&Cf[t]||(Cf[t]=!0,console.error("Unsupported vendor-prefixed style property %s. Did you mean %s?",t,t.charAt(0).toUpperCase()+t.slice(1))):!_f.test(n)||Rf.hasOwnProperty(n)&&Rf[n]||(Rf[n]=!0,console.error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',t,n.replace(_f,""))),"number"==typeof n&&(isNaN(n)?Pf||(Pf=!0,console.error("`NaN` is an invalid value for the `%s` css style property.",t)):isFinite(n)||Of||(Of=!0,console.error("`Infinity` is an invalid value for the `%s` css style property.",t)))),null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Lf.has(t)?"float"===t?e.cssFloat=n:(U(n,t),e[t]=(""+n).trim()):e[t]=n+"px"}function xt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");if(t&&Object.freeze(t),e=e.style,null!=n){if(t){var r={};if(n)for(var o in n)if(n.hasOwnProperty(o)&&!t.hasOwnProperty(o))for(var a=kf[o]||[o],l=0;l<a.length;l++)r[a[l]]=o;for(var i in t)if(t.hasOwnProperty(i)&&(!n||n[i]!==t[i]))for(o=kf[i]||[i],a=0;a<o.length;a++)r[o[a]]=i;for(var s in i={},t)for(o=kf[s]||[s],a=0;a<o.length;a++)i[o[a]]=s;for(var u in s={},r)if(o=r[u],(a=i[u])&&o!==a&&!s[l=o+","+a]){s[l]=!0,l=console;var c=t[o];l.error.call(l,"%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",null==c||"boolean"==typeof c||""===c?"Removing":"Updating",o,a)}}for(var d in n)!n.hasOwnProperty(d)||null!=t&&t.hasOwnProperty(d)||(0===d.indexOf("--")?e.setProperty(d,""):"float"===d?e.cssFloat="":e[d]="");for(var f in t)u=t[f],t.hasOwnProperty(f)&&n[f]!==u&&St(e,f,u)}else for(r in t)t.hasOwnProperty(r)&&St(e,r,t[r])}function Tt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Et(e){return Nf.get(e)||e}function _t(e,t){if(ld.call(Ff,t)&&Ff[t])return!0;if(jf.test(t)){if(e="aria-"+t.slice(4).toLowerCase(),null==(e=Af.hasOwnProperty(e)?e:null))return console.error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",t),Ff[t]=!0;if(t!==e)return console.error("Invalid ARIA attribute `%s`. Did you mean `%s`?",t,e),Ff[t]=!0}if(Mf.test(t)){if(e=t.toLowerCase(),null==(e=Af.hasOwnProperty(e)?e:null))return Ff[t]=!0,!1;t!==e&&(console.error("Unknown ARIA attribute `%s`. Did you mean `%s`?",t,e),Ff[t]=!0)}return!0}function Ct(e,t,n,r){if(ld.call(Hf,t)&&Hf[t])return!0;var o=t.toLowerCase();if("onfocusin"===o||"onfocusout"===o)return console.error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),Hf[t]=!0;if("function"==typeof n&&("form"===e&&"action"===t||"input"===e&&"formAction"===t||"button"===e&&"formAction"===t))return!0;if(null!=r){if(e=r.possibleRegistrationNames,r.registrationNameDependencies.hasOwnProperty(t))return!0;if(null!=(r=e.hasOwnProperty(o)?e[o]:null))return console.error("Invalid event handler property `%s`. Did you mean `%s`?",t,r),Hf[t]=!0;if(Wf.test(t))return console.error("Unknown event handler property `%s`. It will be ignored.",t),Hf[t]=!0}else if(Wf.test(t))return Bf.test(t)&&console.error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",t),Hf[t]=!0;if(Vf.test(t)||qf.test(t))return!0;if("innerhtml"===o)return console.error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),Hf[t]=!0;if("aria"===o)return console.error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),Hf[t]=!0;if("is"===o&&null!=n&&"string"!=typeof n)return console.error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",typeof n),Hf[t]=!0;if("number"==typeof n&&isNaN(n))return console.error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",t),Hf[t]=!0;if(zf.hasOwnProperty(o)){if((o=zf[o])!==t)return console.error("Invalid DOM property `%s`. Did you mean `%s`?",t,o),Hf[t]=!0}else if(t!==o)return console.error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",t,o),Hf[t]=!0;switch(t){case"dangerouslySetInnerHTML":case"children":case"style":case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"innerText":case"textContent":return!0}switch(typeof n){case"boolean":switch(t){case"autoFocus":case"checked":case"multiple":case"muted":case"selected":case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":case"capture":case"download":case"inert":return!0;default:return"data-"===(o=t.toLowerCase().slice(0,5))||"aria-"===o||(n?console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',n,t,t,n,t):console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',n,t,t,n,t,t,t),Hf[t]=!0)}case"function":case"symbol":return Hf[t]=!0,!1;case"string":if("false"===n||"true"===n){switch(t){case"checked":case"selected":case"multiple":case"muted":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":case"inert":break;default:return!0}console.error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",n,t,"false"===n?"The browser will interpret it as a truthy value.":'Although this works, it will not work as expected if you pass the string "false".',t,n),Hf[t]=!0}}return!0}function Rt(e){return $f.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}function Pt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ot(e){var t=he(e);if(t&&(e=t.stateNode)){var n=e[Ad]||null;e:switch(e=t.stateNode,t.type){case"input":if(Ve(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(j(t,"name"),n=n.querySelectorAll('input[name="'+We(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[Ad]||null;if(!o)throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");Ve(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&Ue(r)}break e;case"textarea":Je(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&Ke(e,!!n.multiple,t,!1)}}}function Lt(e,t,n){if(Gf)return e(t,n);Gf=!0;try{return e(t)}finally{if(Gf=!1,(null!==Yf||null!==Kf)&&(Ri(),Yf&&(t=Yf,e=Kf,Kf=Yf=null,Ot(t),e)))for(t=0;t<e.length;t++)Ot(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Ad]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error("Expected `"+t+"` listener to be a function, instead got a value of `"+typeof n+"` type.");return n}function It(){if(ap)return ap;var e,t,n=op,r=n.length,o="value"in rp?rp.value:rp.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===o[a-t];t++);return ap=o.slice(e,1<t?1-t:void 0)}function Nt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function zt(){return!0}function At(){return!1}function Ft(e){function t(t,n,r,o,a){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(o):o[l]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?zt:At,this.isPropagationStopped=At,this}return xc(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=zt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=zt)},persist:function(){},isPersistent:zt}),t}function Mt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kp[e])&&!!t[e]}function jt(){return Mt}function Ut(e,t){switch(e){case"keyup":return-1!==Cp.indexOf(t.keyCode);case"keydown":return t.keyCode!==Rp;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ht(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}function Wt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fp[e.type]:"textarea"===t}function Bt(e,t,n,r){Yf?Kf?Kf.push(r):Kf=[r]:Yf=r,0<(t=Os(t,"onChange")).length&&(n=new ip("onChange","change",null,n,r),e.push({event:n,listeners:t}))}function Vt(e){xs(e,0)}function qt(e){if(Ue(me(e)))return e}function $t(e,t){if("change"===e)return t}function Qt(){Mp&&(Mp.detachEvent("onpropertychange",Yt),jp=Mp=null)}function Yt(e){if("value"===e.propertyName&&qt(jp)){var t=[];Bt(t,jp,e,Pt(e)),Lt(Vt,t)}}function Kt(e,t,n){"focusin"===e?(Qt(),jp=n,(Mp=t).attachEvent("onpropertychange",Yt)):"focusout"===e&&Qt()}function Gt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qt(jp)}function Xt(e,t){if("click"===e)return qt(t)}function Jt(e,t){if("input"===e||"change"===e)return qt(t)}function Zt(e,t){if(Hp(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!ld.call(t,o)||!Hp(e[o],t[o]))return!1}return!0}function en(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function tn(e,t){var n,r=en(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=en(r)}}function nn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?nn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function rn(e){for(var t=He((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=He((e=t.contentWindow).document)}return t}function on(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function an(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;$p||null==Bp||Bp!==He(r)||("selectionStart"in(r=Bp)&&on(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},qp&&Zt(qp,r)||(qp=r,0<(r=Os(Vp,"onSelect")).length&&(t=new ip("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Bp)))}function ln(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}function sn(e){if(Yp[e])return Yp[e];if(!Qp[e])return e;var t,n=Qp[e];for(t in n)if(n.hasOwnProperty(t)&&t in Kp)return Yp[e]=n[t];return e}function un(e,t){rh.set(e,t),be(t,[e])}function cn(e,t){if("object"==typeof e&&null!==e){var n=ah.get(e);return void 0!==n?n:(t={value:e,source:t,stack:Le(t)},ah.set(e,t),t)}return{value:e,source:t,stack:Le(t)}}function dn(){for(var e=uh,t=ch=uh=0;t<e;){var n=sh[t];sh[t++]=null;var r=sh[t];sh[t++]=null;var o=sh[t];sh[t++]=null;var a=sh[t];if(sh[t++]=null,null!==r&&null!==o){var l=r.pending;null===l?o.next=o:(o.next=l.next,l.next=o),r.pending=o}0!==a&&mn(n,o,a)}}function fn(e,t,n,r){sh[uh++]=e,sh[uh++]=t,sh[uh++]=n,sh[uh++]=r,ch|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function pn(e,t,n,r){return fn(e,t,n,r),gn(e)}function hn(e,t){return fn(e,null,null,t),gn(e)}function mn(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||e._visibility&lh||(o=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,o&&null!==t&&(o=31-Ed(n),null===(r=(e=a.hiddenUpdates)[o])?e[o]=[t]:r.push(t),t.lane=536870912|n),a):null}function gn(e){if(Qb>$b)throw Jb=Qb=0,Zb=Yb=null,Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");Jb>Xb&&(Jb=0,Zb=null,console.error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.")),null===e.alternate&&4098&e.flags&&ss(e);for(var t=e,n=t.return;null!==n;)null===t.alternate&&!!(4098&t.flags)&&ss(e),n=(t=n).return;return 3===t.tag?t.stateNode:null}function yn(e){if(null===fh)return e;var t=fh(e);return void 0===t?e:t.current}function bn(e){if(null===fh)return e;var t=fh(e);return void 0===t?null!=e&&"function"==typeof e.render&&(t=yn(e.render),e.render!==t)?(t={$$typeof:Ic,render:t},void 0!==e.displayName&&(t.displayName=e.displayName),t):e:t.current}function vn(e,t){if(null===fh)return!1;var n=e.elementType,r=!1,o="object"==typeof(t=t.type)&&null!==t?t.$$typeof:null;switch(e.tag){case 1:"function"==typeof t&&(r=!0);break;case 0:("function"==typeof t||o===Fc)&&(r=!0);break;case 11:(o===Ic||o===Fc)&&(r=!0);break;case 14:case 15:(o===Ac||o===Fc)&&(r=!0);break;default:return!1}return!(!r||(e=fh(n),void 0===e||e!==fh(t)))}function kn(e){null!==fh&&"function"==typeof WeakSet&&(null===ph&&(ph=new WeakSet),ph.add(e))}function wn(e,t,n){var r=e.alternate,o=e.child,a=e.sibling,l=e.tag,i=e.type,s=null;switch(l){case 0:case 15:case 1:s=i;break;case 11:s=i.render}if(null===fh)throw Error("Expected resolveFamily to be set during hot reload.");var u=!1;i=!1,null!==s&&(void 0!==(s=fh(s))&&(n.has(s)?i=!0:t.has(s)&&(1===l?i=!0:u=!0))),null!==ph&&(ph.has(e)||null!==r&&ph.has(r))&&(i=!0),i&&(e._debugNeedsRemount=!0),(i||u)&&(null!==(r=hn(e,2))&&xi(r,e,2)),null===o||i||wn(o,t,n),null!==a&&wn(a,t,n)}function Sn(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null,this.actualDuration=-0,this.actualStartTime=-1.1,this.treeBaseDuration=this.selfBaseDuration=-0,this._debugTask=this._debugStack=this._debugOwner=this._debugInfo=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,kh||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}function xn(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tn(e,t){var n=e.alternate;switch(null===n?((n=h(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugOwner=e._debugOwner,n._debugStack=e._debugStack,n._debugTask=e._debugTask,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null,n.actualDuration=-0,n.actualStartTime=-1.1),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext,_debugThenableState:t._debugThenableState},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugInfo=e._debugInfo,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case 0:case 15:case 1:n.type=yn(e.type);break;case 11:n.type=bn(e.type)}return n}function En(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext,_debugThenableState:t._debugThenableState},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration),e}function _n(e,t,n,r,o,a){var l=0,i=e;if("function"==typeof e)xn(e)&&(l=1),i=yn(i);else if("string"==typeof e)l=function(e,t,n){var r=!n.ancestorInfo.containerTagInScope;if(n.context===Hv||null!=t.itemProp)return!r||null==t.itemProp||"meta"!==e&&"title"!==e&&"style"!==e&&"link"!==e&&"script"!==e||console.error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",e,e),!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href){r&&console.error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.');break}return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError){if("stylesheet"===t.rel&&"string"==typeof t.precedence){e=t.href;var o=t.onError,a=t.disabled;n=[],t.onLoad&&n.push("`onLoad`"),o&&n.push("`onError`"),null!=a&&n.push("`disabled`"),o=function(e,t){switch(e.length){case 0:return"";case 1:return e[0];case 2:return e[0]+" "+t+" "+e[1];default:return e.slice(0,-1).join(", ")+", "+t+" "+e[e.length-1]}}(n,"and"),o+=1===n.length?" prop":" props",a=1===n.length?"an "+o:"the "+o,n.length&&console.error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',e,a,o)}r&&("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href?console.error("Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"):(t.onError||t.onLoad)&&console.error("Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."));break}return"stylesheet"!==t.rel||(e=t.precedence,t=t.disabled,"string"!=typeof e&&r&&console.error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'),"string"==typeof e&&null==t);case"script":if(!(e=t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async)||t.onLoad||t.onError||!t.src||"string"!=typeof t.src){r&&(e?t.onLoad||t.onError?console.error("Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."):console.error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."):console.error('Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'));break}return!0;case"noscript":case"template":r&&console.error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",e)}return!1}(e,n,l=I())?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case Mc:return(t=h(31,n,t,o)).elementType=Mc,t.lanes=a,t;case Cc:return Rn(n.children,o,a,t);case Rc:l=8,o|=yh,o|=bh;break;case Pc:return r=o,"string"!=typeof(e=n).id&&console.error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',typeof e.id),(t=h(12,e,t,r|gh)).elementType=Pc,t.lanes=a,t.stateNode={effectDuration:0,passiveEffectDuration:0},t;case Nc:return(t=h(13,n,t,o)).elementType=Nc,t.lanes=a,t;case zc:return(t=h(19,n,t,o)).elementType=zc,t.lanes=a,t;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Oc:case Dc:l=10;break e;case Lc:l=9;break e;case Ic:l=11,i=bn(i);break e;case Ac:l=14;break e;case Fc:l=16,i=null;break e}i="",(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(i+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."),null===e?n="null":Kc(e)?n="array":void 0!==e&&e.$$typeof===Ec?(n="<"+(T(e.type)||"Unknown")+" />",i=" Did you accidentally export a JSX literal instead of a component?"):n=typeof e,(l=r?E(r):null)&&(i+="\n\nCheck the render method of `"+l+"`."),l=29,n=Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+n+"."+i),i=null}return(t=h(l,n,t,o)).elementType=e,t.type=i,t.lanes=a,t._debugOwner=r,t}function Cn(e,t,n){return(t=_n(e.type,e.key,e.props,e._owner,t,n))._debugOwner=e._owner,t._debugStack=e._debugStack,t._debugTask=e._debugTask,t}function Rn(e,t,n,r){return(e=h(7,e,r,t)).lanes=n,e}function Pn(e,t,n){return(e=h(6,e,null,t)).lanes=n,e}function On(e,t,n){return(t=h(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ln(e,t){zn(),Sh[xh++]=Eh,Sh[xh++]=Th,Th=e,Eh=t}function Dn(e,t,n){zn(),_h[Ch++]=Ph,_h[Ch++]=Oh,_h[Ch++]=Rh,Rh=e;var r=Ph;e=Oh;var o=32-Ed(r)-1;r&=~(1<<o),n+=1;var a=32-Ed(t)+o;if(30<a){var l=o-o%5;a=(r&(1<<l)-1).toString(32),r>>=l,o-=l,Ph=1<<32-Ed(t)+o|n<<o|r,Oh=a+e}else Ph=1<<a|n<<o|r,Oh=e}function In(e){zn(),null!==e.return&&(Ln(e,1),Dn(e,1,0))}function Nn(e){for(;e===Th;)Th=Sh[--xh],Sh[xh]=null,Eh=Sh[--xh],Sh[xh]=null;for(;e===Rh;)Rh=_h[--Ch],_h[Ch]=null,Oh=_h[--Ch],_h[Ch]=null,Ph=_h[--Ch],_h[Ch]=null}function zn(){Ih||console.error("Expected to be hydrating. This is a bug in React. Please file an issue.")}function An(e,t){if(null===e.return){if(null===zh)zh={fiber:e,children:[],serverProps:void 0,serverTail:[],distanceFromLeaf:t};else{if(zh.fiber!==e)throw Error("Saw multiple hydration diff roots in a pass. This is a bug in React.");zh.distanceFromLeaf>t&&(zh.distanceFromLeaf=t)}return zh}var n=An(e.return,t+1).children;return 0<n.length&&n[n.length-1].fiber===e?((n=n[n.length-1]).distanceFromLeaf>t&&(n.distanceFromLeaf=t),n):(t={fiber:e,children:[],serverProps:void 0,serverTail:[],distanceFromLeaf:t},n.push(t),t)}function Fn(e,t){Nh||((e=An(e,0)).serverProps=null,null!==t&&(t=bu(t),e.serverTail.push(t)))}function Mn(e){var t="",n=zh;throw null!==n&&(zh=null,t=ht(n)),Vn(cn(Error("Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch"+t),e)),Mh}function jn(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[zd]=e,t[Ad]=r,Is(n,r),n){case"dialog":Ts("cancel",t),Ts("close",t);break;case"iframe":case"object":case"embed":Ts("load",t);break;case"video":case"audio":for(n=0;n<fv.length;n++)Ts(fv[n],t);break;case"source":Ts("error",t);break;case"img":case"image":case"link":Ts("error",t),Ts("load",t);break;case"details":Ts("toggle",t);break;case"input":ke("input",r),Ts("invalid",t),Be(0,r),qe(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),je(t);break;case"option":Qe(0,r);break;case"select":ke("select",r),Ts("invalid",t),Ge(t,r);break;case"textarea":ke("textarea",r),Ts("invalid",t),Xe(0,r),Ze(t,r.value,r.defaultValue,r.children),je(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Ms(t.textContent,n)?(null!=r.popover&&(Ts("beforetoggle",t),Ts("toggle",t)),null!=r.onScroll&&Ts("scroll",t),null!=r.onScrollEnd&&Ts("scrollend",t),null!=r.onClick&&(t.onclick=js),t=!0):t=!1,t||Mn(e)}function Un(e){for(Lh=e.return;Lh;)switch(Lh.tag){case 5:case 13:return void(Fh=!1);case 27:case 3:return void(Fh=!0);default:Lh=Lh.return}}function Hn(e){if(e!==Lh)return!1;if(!Ih)return Un(e),Ih=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||tu(e.type,e.memoizedProps)),t=!t),t&&Dh){for(t=Dh;t;){var r=An(e,0),o=bu(t);r.serverTail.push(o),t="Suspense"===o.type?ku(t):yu(t.nextSibling)}Mn(e)}if(Un(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");Dh=ku(e)}else 27===n?(n=Dh,iu(e.type)?(e=Jv,Jv=null,Dh=e):Dh=n):Dh=Lh?yu(e.stateNode.nextSibling):null;return!0}function Wn(){Dh=Lh=null,Nh=Ih=!1}function Bn(){var e=Ah;return null!==e&&(null===Sb?Sb=e:Sb.push.apply(Sb,e),Ah=null),e}function Vn(e){null===Ah?Ah=[e]:Ah.push(e)}function qn(){var e=zh;if(null!==e){zh=null;for(var t=ht(e);0<e.children.length;)e=e.children[0];ze(e.fiber,(function(){console.error("A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s","https://react.dev/link/hydration-mismatch",t)}))}}function $n(){Qh=$h=null,Yh=!1}function Qn(e,t,n){P(Bh,t._currentValue,e),t._currentValue=n,P(Vh,t._currentRenderer,e),void 0!==t._currentRenderer&&null!==t._currentRenderer&&t._currentRenderer!==qh&&console.error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),t._currentRenderer=qh}function Yn(e,t){e._currentValue=Bh.current;var n=Vh.current;R(Vh,t),e._currentRenderer=n,R(Bh,t)}function Kn(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}e!==n&&console.error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.")}function Gn(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var l=o.child;a=a.firstContext;e:for(;null!==a;){var i=a;a=o;for(var s=0;s<t.length;s++)if(i.context===t[s]){a.lanes|=n,null!==(i=a.alternate)&&(i.lanes|=n),Kn(a.return,n,e),r||(l=null);break e}a=i.next}}else if(18===o.tag){if(null===(l=o.return))throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");l.lanes|=n,null!==(a=l.alternate)&&(a.lanes|=n),Kn(l,n,e),l=null}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===e){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}}function Xn(e,t,n,r){e=null;for(var o=t,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var l=o.alternate;if(null===l)throw Error("Should have a current fiber. This is a bug in React.");if(null!==(l=l.memoizedProps)){var i=o.type;Hp(o.pendingProps.value,l.value)||(null!==e?e.push(i):e=[i])}}else if(o===ad.current){if(null===(l=o.alternate))throw Error("Should have a current fiber. This is a bug in React.");l.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Sk):e=[Sk])}o=o.return}null!==e&&Gn(t,e,n,r),t.flags|=262144}function Jn(e){for(e=e.firstContext;null!==e;){if(!Hp(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Zn(e){$h=e,Qh=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function er(e){return Yh&&console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."),nr($h,e)}function tr(e,t){return null===$h&&Zn(e),nr(e,t)}function nr(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===Qh){if(null===e)throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");Qh=t,e.dependencies={lanes:0,firstContext:t,_debugThenableState:null},e.flags|=524288}else Qh=Qh.next=t;return n}function rr(){return{controller:new Kh,data:new Map,refCount:0}}function or(e){e.controller.signal.aborted&&console.warn("A cache instance was retained after it was already freed. This likely indicates a bug in React."),e.refCount++}function ar(e){e.refCount--,0>e.refCount&&console.warn("A cache instance was released after it was already freed. This likely indicates a bug in React."),0===e.refCount&&Gh(Xh,(function(){e.controller.abort()}))}function lr(){var e=rm;return rm=0,e}function ir(e){var t=rm;return rm=e,t}function sr(e){var t=rm;return rm+=e,t}function ur(e){nm=Zh(),0>e.actualStartTime&&(e.actualStartTime=nm)}function cr(e){if(0<=nm){var t=Zh()-nm;e.actualDuration+=t,e.selfBaseDuration=t,nm=-1}}function dr(e){if(0<=nm){var t=Zh()-nm;e.actualDuration+=t,nm=-1}}function fr(){if(0<=nm){var e=Zh()-nm;nm=-1,rm+=e}}function pr(){nm=Zh()}function hr(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}function mr(){if(0==--im&&null!==lm){null!==um&&(um.status="fulfilled");var e=lm;lm=null,sm=0,um=null;for(var t=0;t<e.length;t++)(0,e[t])()}}function gr(){var e=dm.current;return null!==e?e:Gy.pooledCache}function yr(e,t){P(dm,null===t?dm.current:t.pool,e)}function br(){var e=gr();return null===e?null:{parent:Jh._currentValue,pool:e}}function vr(e){return"fulfilled"===(e=e.status)||"rejected"===e}function kr(){}function wr(e,t,n){null!==Gc.actQueue&&(Gc.didUsePromise=!0);var r=e.thenables;switch(void 0===(n=r[n])?r.push(t):n!==t&&(e.didWarnAboutUncachedPromise||(e.didWarnAboutUncachedPromise=!0,console.error("A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.")),t.then(kr,kr),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw xr(e=t.reason),e;default:if("string"==typeof t.status)t.then(kr,kr);else{if(null!==(e=Gy)&&100<e.shellSuspendCounter)throw Error("An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw xr(e=t.reason),e}throw Cm=t,Rm=!0,xm}}function Sr(){if(null===Cm)throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");var e=Cm;return Cm=null,Rm=!1,e}function xr(e){if(e===xm||e===Em)throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.")}function Tr(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Er(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function _r(e){return{lane:e,tag:Nm,payload:null,callback:null,next:null}}function Cr(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,Um===r&&!jm){var o=_(e);console.error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",o),jm=!0}return(Ky&Uy)!==jy?(null===(o=r.pending)?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=gn(e),mn(e,null,n),t):(fn(e,r,t,n),gn(e))}function Rr(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,le(e,n)}}function Pr(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var l={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?o=a=l:a=a.next=l,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Or(){if(Hm){if(null!==um)throw um}}function Lr(e,t,n,r){Hm=!1;var o=e.updateQueue;Mm=!1,Um=o.shared;var a=o.firstBaseUpdate,l=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var s=i,u=s.next;s.next=null,null===l?a=u:l.next=u,l=s;var c=e.alternate;null!==c&&((i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=u:i.next=u,c.lastBaseUpdate=s))}if(null!==a){var d=o.baseState;for(l=0,c=u=s=null,i=a;;){var f=-536870913&i.lane,p=f!==i.lane;if(p?(Jy&f)===f:(r&f)===f){0!==f&&f===sm&&(Hm=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{f=e;var h=i,m=t,g=n;switch(h.tag){case zm:if("function"==typeof(h=h.payload)){Yh=!0;var y=h.call(g,d,m);if(f.mode&yh){W(!0);try{h.call(g,d,m)}finally{W(!1)}}Yh=!1,d=y;break e}d=h;break e;case Fm:f.flags=-65537&f.flags|128;case Nm:if("function"==typeof(y=h.payload)){if(Yh=!0,h=y.call(g,d,m),f.mode&yh){W(!0);try{y.call(g,d,m)}finally{W(!1)}}Yh=!1}else h=y;if(null==h)break e;d=xc({},d,h);break e;case Am:Mm=!0}}null!==(f=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[f]:p.push(f))}else p={lane:f,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,l|=f;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(p=i).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),gb|=l,e.lanes=l,e.memoizedState=d}Um=null}function Dr(e,t){if("function"!=typeof e)throw Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function Ir(e,t){var n=e.shared.hiddenCallbacks;if(null!==n)for(e.shared.hiddenCallbacks=null,e=0;e<n.length;e++)Dr(n[e],t)}function Nr(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Dr(n[e],t)}function zr(e,t){var n=hb;P(Bm,n,e),P(Wm,t,e),hb=n|t.baseLanes}function Ar(e){P(Bm,hb,e),P(Wm,Wm.current,e)}function Fr(e){hb=Bm.current,R(Wm,e),R(Bm,e)}function Mr(){var e=lg;null===ig?ig=[e]:ig.push(e)}function jr(){var e=lg;if(null!==ig&&(sg++,ig[sg]!==e)){var t=_(Km);if(!Vm.has(t)&&(Vm.add(t),null!==ig)){for(var n="",r=0;r<=sg;r++){var o=ig[r],a=r===sg?e:o;for(o=r+1+". "+o;30>o.length;)o+=" ";n+=o+=a+"\n"}console.error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,n)}}}function Ur(e){null==e||Kc(e)||console.error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",lg,typeof e)}function Hr(){var e=_(Km);Qm.has(e)||(Qm.add(e),console.error("ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",e))}function Wr(){throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.")}function Br(e,t){if(ug)return!1;if(null===t)return console.error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",lg),!1;e.length!==t.length&&console.error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",lg,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var n=0;n<t.length&&n<e.length;n++)if(!Hp(e[n],t[n]))return!1;return!0}function Vr(e,t,n,r,o,a){Ym=a,Km=t,ig=null!==e?e._debugHookTypes:null,sg=-1,ug=null!==e&&e.type!==t.type,"[object AsyncFunction]"!==Object.prototype.toString.call(n)&&"[object AsyncGeneratorFunction]"!==Object.prototype.toString.call(n)||(a=_(Km),$m.has(a)||($m.add(a),console.error("%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",null===a?"An unknown Component":"<"+a+">"))),t.memoizedState=null,t.updateQueue=null,t.lanes=0,Gc.H=null!==e&&null!==e.memoizedState?pg:null!==ig?fg:dg,eg=a=(t.mode&yh)!==hh;var l=kg(n,r,o);if(eg=!1,Zm&&(l=$r(t,n,r,o)),a){W(!0);try{l=$r(t,n,r,o)}finally{W(!1)}}return qr(e,t),l}function qr(e,t){t._debugHookTypes=ig,null===t.dependencies?null!==rg&&(t.dependencies={lanes:0,firstContext:null,_debugThenableState:rg}):t.dependencies._debugThenableState=rg,Gc.H=cg;var n=null!==Gm&&null!==Gm.next;if(Ym=0,ig=lg=Xm=Gm=Km=null,sg=-1,null!==e&&(65011712&e.flags)!=(65011712&t.flags)&&console.error("Internal React error: Expected static flag was missing. Please notify the React team."),Jm=!1,ng=0,rg=null,n)throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");null===e||py||null!==(e=e.dependencies)&&Jn(e)&&(py=!0),Rm?(Rm=!1,e=!0):e=!1,e&&(t=_(t)||"Unknown",qm.has(t)||$m.has(t)||(qm.add(t),console.error("`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.")))}function $r(e,t,n,r){Km=e;var o=0;do{if(Zm&&(rg=null),ng=0,Zm=!1,o>=ag)throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");if(o+=1,ug=!1,Xm=Gm=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}sg=-1,Gc.H=hg,a=kg(t,n,r)}while(Zm);return a}function Qr(){var e=Gc.H,t=e.useState()[0];return t="function"==typeof t.then?Zr(t):t,e=e.useState()[0],(null!==Gm?Gm.memoizedState:null)!==e&&(Km.flags|=1024),t}function Yr(){var e=0!==tg;return tg=0,e}function Kr(e,t,n){t.updateQueue=e.updateQueue,t.flags=(t.mode&bh)!==hh?-402655237&t.flags:-2053&t.flags,e.lanes&=~n}function Gr(e){if(Jm){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}Jm=!1}Ym=0,ig=Xm=Gm=Km=null,sg=-1,lg=null,Zm=!1,ng=tg=0,rg=null}function Xr(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xm?Km.memoizedState=Xm=e:Xm=Xm.next=e,Xm}function Jr(){if(null===Gm){var e=Km.alternate;e=null!==e?e.memoizedState:null}else e=Gm.next;var t=null===Xm?Km.memoizedState:Xm.next;if(null!==t)Xm=t,Gm=e;else{if(null===e){if(null===Km.alternate)throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");throw Error("Rendered more hooks than during the previous render.")}e={memoizedState:(Gm=e).memoizedState,baseState:Gm.baseState,baseQueue:Gm.baseQueue,queue:Gm.queue,next:null},null===Xm?Km.memoizedState=Xm=e:Xm=Xm.next=e}return Xm}function Zr(e){var t=ng;return ng+=1,null===rg&&(rg={didWarnAboutUncachedPromise:!1,thenables:[]}),e=wr(rg,e,t),t=Km,null===(null===Xm?t.memoizedState:Xm.next)&&(t=t.alternate,Gc.H=null!==t&&null!==t.memoizedState?pg:dg),e}function eo(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Zr(e);if(e.$$typeof===Dc)return er(e)}throw Error("An unsupported type was passed to use(): "+String(e))}function to(e){var t=null,n=Km.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Km.alternate;null!==r&&(null!==(r=r.updateQueue)&&(null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})))}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Km.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index])||ug)for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=jc;else n.length!==e&&console.error("Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",n.length,e);return t.index++,n}function no(e,t){return"function"==typeof t?t(e):t}function ro(e,t,n){var r=Xr();if(void 0!==n){var o=n(t);if(eg){W(!0);try{n(t)}finally{W(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=sa.bind(null,Km,e),[r.memoizedState,e]}function oo(e){return ao(Jr(),Gm,e)}function ao(e,t,n){var r=e.queue;if(null===r)throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");r.lastRenderedReducer=n;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}t.baseQueue!==o&&console.error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."),t.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var i=l=null,s=null,u=t=o.next,c=!1;do{var d=-536870913&u.lane;if(d!==u.lane?(Jy&d)===d:(Ym&d)===d){var f=u.revertLane;if(0===f)null!==s&&(s=s.next={lane:0,revertLane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),d===sm&&(c=!0);else{if((Ym&f)===f){u=u.next,f===sm&&(c=!0);continue}d={lane:0,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===s?(i=s=d,l=a):s=s.next=d,Km.lanes|=f,gb|=f}d=u.action,eg&&n(a,d),a=u.hasEagerState?u.eagerState:n(a,d)}else f={lane:d,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===s?(i=s=f,l=a):s=s.next=f,Km.lanes|=d,gb|=d;u=u.next}while(null!==u&&u!==t);if(null===s?l=a:s.next=i,!Hp(a,e.memoizedState)&&(py=!0,c&&null!==(n=um)))throw n;e.memoizedState=a,e.baseState=l,e.baseQueue=s,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function lo(e){var t=Jr(),n=t.queue;if(null===n)throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Hp(a,t.memoizedState)||(py=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function io(e,t,n){var r=Km,o=Xr();if(Ih){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");var a=n();Sm||a===n()||(console.error("The result of getServerSnapshot should be cached to avoid an infinite loop"),Sm=!0)}else{if(a=t(),Sm||(n=t(),Hp(a,n)||(console.error("The result of getSnapshot should be cached to avoid an infinite loop"),Sm=!0)),null===Gy)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");124&Jy||uo(r,t,a)}return o.memoizedState=a,n={value:a,getSnapshot:t},o.queue=n,Fo(fo.bind(null,r,n,e),[e]),r.flags|=2048,Io(Om|Im,{destroy:void 0,resource:void 0},co.bind(null,r,n,a,t),null),a}function so(e,t,n){var r=Km,o=Jr(),a=Ih;if(a){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");n=n()}else if(n=t(),!Sm){var l=t();Hp(n,l)||(console.error("The result of getSnapshot should be cached to avoid an infinite loop"),Sm=!0)}(l=!Hp((Gm||o).memoizedState,n))&&(o.memoizedState=n,py=!0),o=o.queue;var i=fo.bind(null,r,o,e);if(Ao(2048,Im,i,[e]),o.getSnapshot!==t||l||null!==Xm&&Xm.memoizedState.tag&Om){if(r.flags|=2048,Io(Om|Im,{destroy:void 0,resource:void 0},co.bind(null,r,o,n,t),null),null===Gy)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");a||124&Ym||uo(r,t,n)}return n}function uo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Km.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Km.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function co(e,t,n,r){t.value=n,t.getSnapshot=r,po(t)&&ho(e)}function fo(e,t,n){return n((function(){po(t)&&ho(e)}))}function po(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Hp(e,n)}catch(e){return!0}}function ho(e){var t=hn(e,2);null!==t&&xi(t,e,2)}function mo(e){var t=Xr();if("function"==typeof e){var n=e;if(e=n(),eg){W(!0);try{n()}finally{W(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:no,lastRenderedState:e},t}function go(e){var t=(e=mo(e)).queue,n=ua.bind(null,Km,t);return t.dispatch=n,[e.memoizedState,n]}function yo(e){var t=Xr();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=da.bind(null,Km,!0,n),n.dispatch=t,[e,t]}function bo(e,t){return vo(Jr(),Gm,e,t)}function vo(e,t,n,r){return e.baseState=n,ao(e,Gm,"function"==typeof r?r:no)}function ko(e,t){var n=Jr();return null!==Gm?vo(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])}function wo(e,t,n,r,o){if(fa(e))throw Error("Cannot update form state while rendering.");if(null!==(e=t.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==Gc.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,So(t,a)):(a.next=n.next,t.pending=n.next=a)}}function So(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var a=Gc.T,l={};Gc.T=l,Gc.T._updatedFibers=new Set;try{var i=n(o,r),s=Gc.S;null!==s&&s(l,i),xo(e,t,i)}catch(n){Eo(e,t,n)}finally{Gc.T=a,null===a&&l._updatedFibers&&(e=l._updatedFibers.size,l._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."))}}else try{xo(e,t,l=n(o,r))}catch(n){Eo(e,t,n)}}function xo(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?(n.then((function(n){To(e,t,n)}),(function(n){return Eo(e,t,n)})),t.isTransition||console.error("An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop.")):To(e,t,n)}function To(e,t,n){t.status="fulfilled",t.value=n,_o(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,So(e,n)))}function Eo(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,_o(t),t=t.next}while(t!==r)}e.action=null}function _o(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Co(e,t){return t}function Ro(e,t){if(Ih){var n=Gy.formState;if(null!==n){e:{var r=Km;if(Ih){if(Dh){t:{for(var o=Dh,a=Fh;8!==o.nodeType;){if(!a){o=null;break t}if(null===(o=yu(o.nextSibling))){o=null;break t}}o=(a=o.data)===Av||a===Fv?o:null}if(o){Dh=yu(o.nextSibling),r=o.data===Av;break e}}Mn(r)}r=!1}r&&(t=n[0])}}return(n=Xr()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Co,lastRenderedState:t},n.queue=r,n=ua.bind(null,Km,r),r.dispatch=n,r=mo(!1),a=da.bind(null,Km,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=Xr()).queue=o,n=wo.bind(null,Km,o,a,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function Po(e){return Oo(Jr(),Gm,e)}function Oo(e,t,n){if(t=ao(e,t,Co)[0],e=oo(no)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Zr(t)}catch(e){if(e===xm)throw Em;throw e}else r=t;var o=(t=Jr()).queue,a=o.dispatch;return n!==t.memoizedState&&(Km.flags|=2048,Io(Om|Im,{destroy:void 0,resource:void 0},Lo.bind(null,o,n),null)),[r,a,e]}function Lo(e,t){e.action=t}function Do(e){var t=Jr(),n=Gm;if(null!==n)return Oo(t,n,e);Jr(),t=t.memoizedState;var r=(n=Jr()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Io(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=Km.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Km.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function No(e){return e={current:e},Xr().memoizedState=e}function zo(e,t,n,r){var o=Xr();r=void 0===r?null:r,Km.flags|=e,o.memoizedState=Io(Om|t,{destroy:void 0,resource:void 0},n,r)}function Ao(e,t,n,r){var o=Jr();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==Gm&&null!==r&&Br(r,Gm.memoizedState.deps)?o.memoizedState=Io(t,a,n,r):(Km.flags|=e,o.memoizedState=Io(Om|t,a,n,r))}function Fo(e,t){(Km.mode&bh)!==hh&&(Km.mode&vh)===hh?zo(276826112,Im,e,t):zo(8390656,Im,e,t)}function Mo(e,t){var n=4194308;return(Km.mode&bh)!==hh&&(n|=134217728),zo(n,Dm,e,t)}function jo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return t.hasOwnProperty("current")||console.error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(t).join(", ")+"}"),e=e(),t.current=e,function(){t.current=null}}function Uo(e,t,n){"function"!=typeof t&&console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null"),n=null!=n?n.concat([e]):null;var r=4194308;(Km.mode&bh)!==hh&&(r|=134217728),zo(r,Dm,jo.bind(null,t,e),n)}function Ho(e,t,n){"function"!=typeof t&&console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null"),n=null!=n?n.concat([e]):null,Ao(4,Dm,jo.bind(null,t,e),n)}function Wo(e,t){return Xr().memoizedState=[e,void 0===t?null:t],e}function Bo(e,t){var n=Jr();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Br(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Vo(e,t){var n=Xr();t=void 0===t?null:t;var r=e();if(eg){W(!0);try{e()}finally{W(!1)}}return n.memoizedState=[r,t],r}function qo(e,t){var n=Jr();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Br(t,r[1]))return r[0];if(r=e(),eg){W(!0);try{e()}finally{W(!1)}}return n.memoizedState=[r,t],r}function $o(e,t){return Ko(Xr(),e,t)}function Qo(e,t){return Go(Jr(),Gm.memoizedState,e,t)}function Yo(e,t){var n=Jr();return null===Gm?Ko(n,e,t):Go(n,Gm.memoizedState,e,t)}function Ko(e,t,n){return void 0===n||1073741824&Ym?e.memoizedState=t:(e.memoizedState=n,e=Si(),Km.lanes|=e,gb|=e,n)}function Go(e,t,n,r){return Hp(n,t)?n:null!==Wm.current?(e=Ko(e,n,r),Hp(e,t)||(py=!0),e):42&Ym?(e=Si(),Km.lanes|=e,gb|=e,t):(py=!0,e.memoizedState=n)}function Xo(e,t,n,r,o){var a=Xc.p;Xc.p=0!==a&&a<Ld?a:Ld;var l,i,s,u=Gc.T,c={};Gc.T=c,da(e,!1,t,n),c._updatedFibers=new Set;try{var d=o(),f=Gc.S;if(null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then)ca(e,t,(l=r,i=[],s={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},d.then((function(){s.status="fulfilled",s.value=l;for(var e=0;e<i.length;e++)(0,i[e])(l)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),s),wi(e));else ca(e,t,r,wi(e))}catch(n){ca(e,t,{then:function(){},status:"rejected",reason:n},wi(e))}finally{Xc.p=a,Gc.T=u,null===u&&c._updatedFibers&&(e=c._updatedFibers.size,c._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."))}}function Jo(e,t,n,r){if(5!==e.tag)throw Error("Expected the form instance to be a HostComponent. This is a bug in React.");var o=Zo(e).queue;Xo(e,o,t,wk,null===n?f:function(){return ea(e),n(r)})}function Zo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:wk,baseState:wk,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:no,lastRenderedState:wk},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:no,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function ea(e){null===Gc.T&&console.error("requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."),ca(e,Zo(e).next.queue,{},wi(e))}function ta(){var e=mo(!1);return e=Xo.bind(null,Km,e.queue,!0,!1),Xr().memoizedState=e,[!1,e]}function na(){var e=oo(no)[0],t=Jr().memoizedState;return["boolean"==typeof e?e:Zr(e),t]}function ra(){var e=lo(no)[0],t=Jr().memoizedState;return["boolean"==typeof e?e:Zr(e),t]}function oa(){return er(Sk)}function aa(){var e=Xr(),t=Gy.identifierPrefix;if(Ih){var n=Oh;t="«"+t+"R"+(n=(Ph&~(1<<32-Ed(Ph)-1)).toString(32)+n),0<(n=tg++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=og++).toString(32)+"»";return e.memoizedState=t}function la(){return Xr().memoizedState=ia.bind(null,Km)}function ia(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var r=wi(n),o=Cr(n,e=_r(r),r);return null!==o&&(xi(o,n,r),Rr(o,n,r)),n=rr(),null!=t&&null!==o&&console.error("The seed argument is not enabled outside experimental channels."),void(e.payload={cache:n})}n=n.return}}function sa(e,t,n){var r=arguments;"function"==typeof r[3]&&console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var o={lane:r=wi(e),revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};fa(e)?pa(t,o):null!==(o=pn(e,t,o,r))&&(xi(o,e,r),ha(o,t,r)),K(e,r)}function ua(e,t,n){var r=arguments;"function"==typeof r[3]&&console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."),ca(e,t,n,r=wi(e)),K(e,r)}function ca(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(fa(e))pa(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer)){var l=Gc.H;Gc.H=gg;try{var i=t.lastRenderedState,s=a(i,n);if(o.hasEagerState=!0,o.eagerState=s,Hp(s,i))return fn(e,t,o,0),null===Gy&&dn(),!1}catch(e){}finally{Gc.H=l}}if(null!==(n=pn(e,t,o,r)))return xi(n,e,r),ha(n,t,r),!0}return!1}function da(e,t,n,r){if(null===Gc.T&&0===sm&&console.error("An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."),r={lane:2,revertLane:vs(),action:r,hasEagerState:!1,eagerState:null,next:null},fa(e)){if(t)throw Error("Cannot update optimistic state while rendering.");console.error("Cannot call startTransition while rendering.")}else null!==(t=pn(e,n,r,2))&&xi(t,e,2);K(e,2)}function fa(e){var t=e.alternate;return e===Km||null!==t&&t===Km}function pa(e,t){Zm=Jm=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ha(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,le(e,n)}}function ma(e){var t=jg;return null!=e&&(jg=null===t?e:t.concat(e)),t}function ga(e,t,n){for(var r=Object.keys(e.props),o=0;o<r.length;o++){var a=r[o];if("children"!==a&&"key"!==a){null===t&&((t=Cn(e,n.mode,0))._debugInfo=jg,t.return=n),ze(t,(function(e){console.error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",e)}),a);break}}}function ya(e){var t=Mg;return Mg+=1,null===Fg&&(Fg={didWarnAboutUncachedPromise:!1,thenables:[]}),wr(Fg,e,t)}function ba(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function va(e,t){if(t.$$typeof===Tc)throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');throw e=Object.prototype.toString.call(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.")}function ka(e,t){var n=_(e)||"Component";Wg[n]||(Wg[n]=!0,t=t.displayName||t.name||"Component",3===e.tag?console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",t,t,t):console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",t,t,n,t,n))}function wa(e,t){var n=_(e)||"Component";Bg[n]||(Bg[n]=!0,t=String(t),3===e.tag?console.error("Symbols are not valid as a React child.\n  root.render(%s)",t):console.error("Symbols are not valid as a React child.\n  <%s>%s</%s>",n,t,n))}function Sa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=Tn(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function i(e,t,n,r){return null===t||6!==t.tag?((t=Pn(n,e.mode,r)).return=e,t._debugOwner=e,t._debugTask=e._debugTask,t._debugInfo=jg,t):((t=o(t,n)).return=e,t._debugInfo=jg,t)}function s(e,t,n,r){var a=n.type;return a===Cc?(ga(n,t=d(e,t,n.props.children,r,n.key),e),t):null!==t&&(t.elementType===a||vn(t,n)||"object"==typeof a&&null!==a&&a.$$typeof===Fc&&Ag(a)===t.type)?(ba(t=o(t,n.props),n),t.return=e,t._debugOwner=n._owner,t._debugInfo=jg,t):(ba(t=Cn(n,e.mode,r),n),t.return=e,t._debugInfo=jg,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=On(n,e.mode,r)).return=e,t._debugInfo=jg,t):((t=o(t,n.children||[])).return=e,t._debugInfo=jg,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Rn(n,e.mode,r,a)).return=e,t._debugOwner=e,t._debugTask=e._debugTask,t._debugInfo=jg,t):((t=o(t,n)).return=e,t._debugInfo=jg,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Pn(""+t,e.mode,n)).return=e,t._debugOwner=e,t._debugTask=e._debugTask,t._debugInfo=jg,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ec:return ba(n=Cn(t,e.mode,n),t),n.return=e,e=ma(t._debugInfo),n._debugInfo=jg,jg=e,n;case _c:return(t=On(t,e.mode,n)).return=e,t._debugInfo=jg,t;case Fc:var r=ma(t._debugInfo);return e=f(e,t=Ag(t),n),jg=r,e}if(Kc(t)||x(t))return(n=Rn(t,e.mode,n,null)).return=e,n._debugOwner=e,n._debugTask=e._debugTask,e=ma(t._debugInfo),n._debugInfo=jg,jg=e,n;if("function"==typeof t.then)return r=ma(t._debugInfo),e=f(e,ya(t),n),jg=r,e;if(t.$$typeof===Dc)return f(e,tr(e,t),n);va(e,t)}return"function"==typeof t&&ka(e,t),"symbol"==typeof t&&wa(e,t),null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:i(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ec:return n.key===o?(o=ma(n._debugInfo),e=s(e,t,n,r),jg=o,e):null;case _c:return n.key===o?c(e,t,n,r):null;case Fc:return o=ma(n._debugInfo),e=p(e,t,n=Ag(n),r),jg=o,e}if(Kc(n)||x(n))return null!==o?null:(o=ma(n._debugInfo),e=d(e,t,n,r,null),jg=o,e);if("function"==typeof n.then)return o=ma(n._debugInfo),e=p(e,t,ya(n),r),jg=o,e;if(n.$$typeof===Dc)return p(e,t,tr(e,n),r);va(e,n)}return"function"==typeof n&&ka(e,n),"symbol"==typeof n&&wa(e,n),null}function m(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return i(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ec:return n=e.get(null===r.key?n:r.key)||null,e=ma(r._debugInfo),t=s(t,n,r,o),jg=e,t;case _c:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case Fc:var a=ma(r._debugInfo);return t=m(e,t,n,r=Ag(r),o),jg=a,t}if(Kc(r)||x(r))return n=e.get(n)||null,e=ma(r._debugInfo),t=d(t,n,r,o,null),jg=e,t;if("function"==typeof r.then)return a=ma(r._debugInfo),t=m(e,t,n,ya(r),o),jg=a,t;if(r.$$typeof===Dc)return m(e,t,n,tr(t,r),o);va(t,r)}return"function"==typeof r&&ka(t,r),"symbol"==typeof r&&wa(t,r),null}function g(e,t,n,r){if("object"!=typeof n||null===n)return r;switch(n.$$typeof){case Ec:case _c:u(e,t,n);var o=n.key;if("string"!=typeof o)break;if(null===r){(r=new Set).add(o);break}if(!r.has(o)){r.add(o);break}ze(t,(function(){console.error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",o)}));break;case Fc:g(e,t,n=Ag(n),r)}return r}function y(i,s,u,c){if("object"==typeof u&&null!==u&&u.type===Cc&&null===u.key&&(ga(u,null,i),u=u.props.children),"object"==typeof u&&null!==u){switch(u.$$typeof){case Ec:var d=ma(u._debugInfo);e:{for(var h=u.key;null!==s;){if(s.key===h){if((h=u.type)===Cc){if(7===s.tag){n(i,s.sibling),(c=o(s,u.props.children)).return=i,c._debugOwner=u._owner,c._debugInfo=jg,ga(u,c,i),i=c;break e}}else if(s.elementType===h||vn(s,u)||"object"==typeof h&&null!==h&&h.$$typeof===Fc&&Ag(h)===s.type){n(i,s.sibling),ba(c=o(s,u.props),u),c.return=i,c._debugOwner=u._owner,c._debugInfo=jg,i=c;break e}n(i,s);break}t(i,s),s=s.sibling}u.type===Cc?((c=Rn(u.props.children,i.mode,c,u.key)).return=i,c._debugOwner=i,c._debugTask=i._debugTask,c._debugInfo=jg,ga(u,c,i),i=c):(ba(c=Cn(u,i.mode,c),u),c.return=i,c._debugInfo=jg,i=c)}return i=l(i),jg=d,i;case _c:e:{for(u=(d=u).key;null!==s;){if(s.key===u){if(4===s.tag&&s.stateNode.containerInfo===d.containerInfo&&s.stateNode.implementation===d.implementation){n(i,s.sibling),(c=o(s,d.children||[])).return=i,i=c;break e}n(i,s);break}t(i,s),s=s.sibling}(c=On(d,i.mode,c)).return=i,i=c}return l(i);case Fc:return d=ma(u._debugInfo),i=y(i,s,u=Ag(u),c),jg=d,i}if(Kc(u))return d=ma(u._debugInfo),i=function(o,l,i,s){for(var u=null,c=null,d=null,h=l,y=l=0,b=null;null!==h&&y<i.length;y++){h.index>y?(b=h,h=null):b=h.sibling;var v=p(o,h,i[y],s);if(null===v){null===h&&(h=b);break}u=g(o,v,i[y],u),e&&h&&null===v.alternate&&t(o,h),l=a(v,l,y),null===d?c=v:d.sibling=v,d=v,h=b}if(y===i.length)return n(o,h),Ih&&Ln(o,y),c;if(null===h){for(;y<i.length;y++)null!==(h=f(o,i[y],s))&&(u=g(o,h,i[y],u),l=a(h,l,y),null===d?c=h:d.sibling=h,d=h);return Ih&&Ln(o,y),c}for(h=r(h);y<i.length;y++)null!==(b=m(h,o,y,i[y],s))&&(u=g(o,b,i[y],u),e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),l=a(b,l,y),null===d?c=b:d.sibling=b,d=b);return e&&h.forEach((function(e){return t(o,e)})),Ih&&Ln(o,y),c}(i,s,u,c),jg=d,i;if(x(u)){if(d=ma(u._debugInfo),"function"!=typeof(h=x(u)))throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");var b=h.call(u);return b===u?0===i.tag&&"[object GeneratorFunction]"===Object.prototype.toString.call(i.type)&&"[object Generator]"===Object.prototype.toString.call(b)||(Ug||console.error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."),Ug=!0):u.entries!==h||bg||(console.error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),bg=!0),i=function(o,l,i,s){if(null==i)throw Error("An iterable object provided no iterator.");for(var u=null,c=null,d=l,h=l=0,y=null,b=null,v=i.next();null!==d&&!v.done;h++,v=i.next()){d.index>h?(y=d,d=null):y=d.sibling;var k=p(o,d,v.value,s);if(null===k){null===d&&(d=y);break}b=g(o,k,v.value,b),e&&d&&null===k.alternate&&t(o,d),l=a(k,l,h),null===c?u=k:c.sibling=k,c=k,d=y}if(v.done)return n(o,d),Ih&&Ln(o,h),u;if(null===d){for(;!v.done;h++,v=i.next())null!==(d=f(o,v.value,s))&&(b=g(o,d,v.value,b),l=a(d,l,h),null===c?u=d:c.sibling=d,c=d);return Ih&&Ln(o,h),u}for(d=r(d);!v.done;h++,v=i.next())null!==(y=m(d,o,h,v.value,s))&&(b=g(o,y,v.value,b),e&&null!==y.alternate&&d.delete(null===y.key?h:y.key),l=a(y,l,h),null===c?u=y:c.sibling=y,c=y);return e&&d.forEach((function(e){return t(o,e)})),Ih&&Ln(o,h),u}(i,s,b,c),jg=d,i}if("function"==typeof u.then)return d=ma(u._debugInfo),i=y(i,s,ya(u),c),jg=d,i;if(u.$$typeof===Dc)return y(i,s,tr(i,u),c);va(i,u)}return"string"==typeof u&&""!==u||"number"==typeof u||"bigint"==typeof u?(d=""+u,null!==s&&6===s.tag?(n(i,s.sibling),(c=o(s,d)).return=i,i=c):(n(i,s),(c=Pn(d,i.mode,c)).return=i,c._debugOwner=i,c._debugTask=i._debugTask,c._debugInfo=jg,i=c),l(i)):("function"==typeof u&&ka(i,u),"symbol"==typeof u&&wa(i,u),n(i,s))}return function(e,t,n,r){var o=jg;jg=null;try{Mg=0;var a=y(e,t,n,r);return Fg=null,a}catch(t){if(t===xm||t===Em)throw t;var l=h(29,t,null,e.mode);l.lanes=r,l.return=e;var i=l._debugInfo=jg;if(l._debugOwner=e._debugOwner,l._debugTask=e._debugTask,null!=i)for(var s=i.length-1;0<=s;s--)if("string"==typeof i[s].stack){l._debugOwner=i[s],l._debugTask=i[s].debugTask;break}return l}finally{jg=o}}}function xa(e){var t=e.alternate;P(Gg,Gg.current&Yg,e),P($g,e,e),null===Qg&&(null===t||null!==Wm.current||null!==t.memoizedState)&&(Qg=e)}function Ta(e){if(22===e.tag){if(P(Gg,Gg.current,e),P($g,e,e),null===Qg){var t=e.alternate;null!==t&&null!==t.memoizedState&&(Qg=e)}}else Ea(e)}function Ea(e){P(Gg,Gg.current,e),P($g,$g.current,e)}function _a(e){R($g,e),Qg===e&&(Qg=null),R(Gg,e)}function Ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Lv||gu(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ra(e){if(null!==e&&"function"!=typeof e){var t=String(e);iy.has(t)||(iy.add(t),console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.",e))}}function Pa(e,t,n,r){var o=e.memoizedState,a=n(r,o);if(e.mode&yh){W(!0);try{a=n(r,o)}finally{W(!1)}}void 0===a&&(t=T(t)||"Component",ry.has(t)||(ry.add(t),console.error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",t))),o=null==a?o:xc({},o,a),e.memoizedState=o,0===e.lanes&&(e.updateQueue.baseState=o)}function Oa(e,t,n,r,o,a,l){var i=e.stateNode;if("function"==typeof i.shouldComponentUpdate){if(n=i.shouldComponentUpdate(r,a,l),e.mode&yh){W(!0);try{n=i.shouldComponentUpdate(r,a,l)}finally{W(!1)}}return void 0===n&&console.error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",T(t)||"Component"),n}return!t.prototype||!t.prototype.isPureReactComponent||(!Zt(n,r)||!Zt(o,a))}function La(e,t,n,r){var o=t.state;"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==o&&(e=_(e)||"Component",Jg.has(e)||(Jg.add(e),console.error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",e)),sy.enqueueReplaceState(t,t.state,null))}function Da(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=xc({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}function Ia(e){uy(e),console.warn("%s\n\n%s\n",cy?"An error occurred in the <"+cy+"> component.":"An error occurred in one of your React components.","Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries.")}function Na(e){var t=cy?"The above error occurred in the <"+cy+"> component.":"The above error occurred in one of your React components.",n="React will try to recreate this component tree from scratch using the error boundary you provided, "+(dy||"Anonymous")+".";if("object"==typeof e&&null!==e&&"string"==typeof e.environmentName){var r=e.environmentName;"string"==typeof(e=["%o\n\n%s\n\n%s\n",e,t,n].slice(0))[0]?e.splice(0,1,xk+e[0],Tk,_k+r+_k,Ek):e.splice(0,0,xk,Tk,_k+r+_k,Ek),e.unshift(console),(r=Ck.apply(console.error,e))()}else console.error("%o\n\n%s\n\n%s\n",e,t,n)}function za(e){uy(e)}function Aa(e,t){try{cy=t.source?_(t.source):null,dy=null;var n=t.value;if(null!==Gc.actQueue)Gc.thrownErrors.push(n);else(0,e.onUncaughtError)(n,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Fa(e,t,n){try{cy=n.source?_(n.source):null,dy=_(t),(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Ma(e,t,n){return(n=_r(n)).tag=Fm,n.payload={element:null},n.callback=function(){ze(t.source,Aa,e,t)},n}function ja(e){return(e=_r(e)).tag=Fm,e}function Ua(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){kn(n),ze(r.source,Fa,t,n,r)}}var l=n.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){kn(n),ze(r.source,Fa,t,n,r),"function"!=typeof o&&(null===Pb?Pb=new Set([this]):Pb.add(this)),Rg(this,r),"function"==typeof o||!(2&n.lanes)&&console.error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",_(n)||"Unknown")})}function Ha(e,t,n,r){t.child=null===e?qg(t,null,n,r):Vg(t,e.child,n,r)}function Wa(e,t,n,r,o){n=n.render;var a=t.ref;if("ref"in r){var l={};for(var i in r)"ref"!==i&&(l[i]=r[i])}else l=r;return Zn(t),q(t),r=Vr(e,t,n,l,a,o),i=Yr(),$(),null===e||py?(Ih&&i&&In(t),t.flags|=1,Ha(e,t,r,o),t.child):(Kr(e,t,o),ul(e,t,o))}function Ba(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||xn(a)||void 0!==a.defaultProps||null!==n.compare?((e=_n(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(n=yn(a),t.tag=15,t.type=n,Ja(t,a),Va(e,t,n,r,o))}if(a=e.child,!cl(e,o)){var l=a.memoizedProps;if((n=null!==(n=n.compare)?n:Zt)(l,r)&&e.ref===t.ref)return ul(e,t,o)}return t.flags|=1,(e=Tn(a,r)).ref=t.ref,e.return=t,t.child=e}function Va(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(Zt(a,r)&&e.ref===t.ref&&t.type===e.type){if(py=!1,t.pendingProps=r=a,!cl(e,o))return t.lanes=e.lanes,ul(e,t,o);131072&e.flags&&(py=!0)}}return Ya(e,t,n,r,o)}function qa(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(o=t.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return $a(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,$a(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&yr(t,null!==a?a.cachePool:null),null!==a?zr(t,a):Ar(t),Ta(t)}else null!==a?(yr(t,a.cachePool),zr(t,a),Ea(t),t.memoizedState=null):(null!==e&&yr(t,null),Ar(t),Ea(t));return Ha(e,t,o,n),t.child}function $a(e,t,n,r){var o=gr();return o=null===o?null:{parent:Jh._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&yr(t,null),Ar(t),Ta(t),null!==e&&Xn(e,t,r,!0),null}function Qa(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");null!==e&&e.ref===n||(t.flags|=4194816)}}function Ya(e,t,n,r,o){if(n.prototype&&"function"==typeof n.prototype.render){var a=T(n)||"Unknown";hy[a]||(console.error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",a,a),hy[a]=!0)}return t.mode&yh&&fm.recordLegacyContextWarning(t,null),null===e&&(Ja(t,t.type),n.contextTypes&&(a=T(n)||"Unknown",gy[a]||(gy[a]=!0,console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",a)))),Zn(t),q(t),n=Vr(e,t,n,r,void 0,o),r=Yr(),$(),null===e||py?(Ih&&r&&In(t),t.flags|=1,Ha(e,t,n,o),t.child):(Kr(e,t,o),ul(e,t,o))}function Ka(e,t,n,r,o,a){return Zn(t),q(t),sg=-1,ug=null!==e&&e.type!==t.type,t.updateQueue=null,n=$r(t,r,n,o),qr(e,t),r=Yr(),$(),null===e||py?(Ih&&r&&In(t),t.flags|=1,Ha(e,t,n,a),t.child):(Kr(e,t,a),ul(e,t,a))}function Ga(e,t,n,r,o){switch(s(t)){case!1:var a=t.stateNode,l=new t.type(t.memoizedProps,a.context).state;a.updater.enqueueSetState(a,l,null);break;case!0:t.flags|=128,t.flags|=65536,a=Error("Simulated error coming from DevTools");var i=o&-o;if(t.lanes|=i,null===(l=Gy))throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");Ua(i=ja(i),l,t,cn(a,t)),Pr(t,i)}if(Zn(t),null===t.stateNode){if(l=dh,a=n.contextType,"contextType"in n&&null!==a&&(void 0===a||a.$$typeof!==Dc)&&!ly.has(n)&&(ly.add(n),i=void 0===a?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof a?" However, it is set to a "+typeof a+".":a.$$typeof===Lc?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(a).join(", ")+"}.",console.error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",T(n)||"Component",i)),"object"==typeof a&&null!==a&&(l=er(a)),a=new n(r,l),t.mode&yh){W(!0);try{a=new n(r,l)}finally{W(!1)}}if(l=t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=sy,t.stateNode=a,a._reactInternals=t,a._reactInternalInstance=Xg,"function"==typeof n.getDerivedStateFromProps&&null===l&&(l=T(n)||"Component",Zg.has(l)||(Zg.add(l),console.error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",l,null===a.state?"null":"undefined",l))),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate){var u=i=l=null;if("function"==typeof a.componentWillMount&&!0!==a.componentWillMount.__suppressDeprecationWarning?l="componentWillMount":"function"==typeof a.UNSAFE_componentWillMount&&(l="UNSAFE_componentWillMount"),"function"==typeof a.componentWillReceiveProps&&!0!==a.componentWillReceiveProps.__suppressDeprecationWarning?i="componentWillReceiveProps":"function"==typeof a.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof a.componentWillUpdate&&!0!==a.componentWillUpdate.__suppressDeprecationWarning?u="componentWillUpdate":"function"==typeof a.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==l||null!==i||null!==u){a=T(n)||"Component";var c="function"==typeof n.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";ty.has(a)||(ty.add(a),console.error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",a,c,null!==l?"\n  "+l:"",null!==i?"\n  "+i:"",null!==u?"\n  "+u:""))}}a=t.stateNode,l=T(n)||"Component",a.render||(n.prototype&&"function"==typeof n.prototype.render?console.error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?",l):console.error("No `render` method found on the %s instance: you may have forgotten to define `render`.",l)),!a.getInitialState||a.getInitialState.isReactClassApproved||a.state||console.error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",l),a.getDefaultProps&&!a.getDefaultProps.isReactClassApproved&&console.error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",l),a.contextType&&console.error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",l),n.childContextTypes&&!ay.has(n)&&(ay.add(n),console.error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",l)),n.contextTypes&&!oy.has(n)&&(oy.add(n),console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",l)),"function"==typeof a.componentShouldUpdate&&console.error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",l),n.prototype&&n.prototype.isPureReactComponent&&void 0!==a.shouldComponentUpdate&&console.error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",T(n)||"A pure component"),"function"==typeof a.componentDidUnmount&&console.error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",l),"function"==typeof a.componentDidReceiveProps&&console.error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",l),"function"==typeof a.componentWillRecieveProps&&console.error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",l),"function"==typeof a.UNSAFE_componentWillRecieveProps&&console.error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",l),i=a.props!==r,void 0!==a.props&&i&&console.error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",l),a.defaultProps&&console.error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",l,l),"function"!=typeof a.getSnapshotBeforeUpdate||"function"==typeof a.componentDidUpdate||ey.has(n)||(ey.add(n),console.error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",T(n))),"function"==typeof a.getDerivedStateFromProps&&console.error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",l),"function"==typeof a.getDerivedStateFromError&&console.error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",l),"function"==typeof n.getSnapshotBeforeUpdate&&console.error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",l),(i=a.state)&&("object"!=typeof i||Kc(i))&&console.error("%s.state: must be set to an object or null",l),"function"==typeof a.getChildContext&&"object"!=typeof n.childContextTypes&&console.error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",l),(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},Tr(t),l=n.contextType,a.context="object"==typeof l&&null!==l?er(l):dh,a.state===r&&(l=T(n)||"Component",ny.has(l)||(ny.add(l),console.error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",l))),t.mode&yh&&fm.recordLegacyContextWarning(t,a),fm.recordUnsafeLifecycleWarnings(t,a),a.state=t.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(Pa(t,n,l,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(l=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),l!==a.state&&(console.error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",_(t)||"Component"),sy.enqueueReplaceState(a,a.state,null)),Lr(t,r,a,o),Or(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728),a=!0}else if(null===e){a=t.stateNode;var d=t.memoizedProps;i=Da(n,d),a.props=i;var f=a.context;u=n.contextType,l=dh,"object"==typeof u&&null!==u&&(l=er(u)),u="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate,d=t.pendingProps!==d,u||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(d||f!==l)&&La(t,a,r,l),Mm=!1;var p=t.memoizedState;a.state=p,Lr(t,r,a,o),Or(),f=t.memoizedState,d||p!==f||Mm?("function"==typeof c&&(Pa(t,n,c,r),f=t.memoizedState),(i=Mm||Oa(t,n,i,r,p,f,l))?(u||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=l,a=i):("function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728),a=!1)}else{a=t.stateNode,Er(e,t),u=Da(n,l=t.memoizedProps),a.props=u,c=t.pendingProps,p=a.context,f=n.contextType,i=dh,"object"==typeof f&&null!==f&&(i=er(f)),(f="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==c||p!==i)&&La(t,a,r,i),Mm=!1,p=t.memoizedState,a.state=p,Lr(t,r,a,o),Or();var h=t.memoizedState;l!==c||p!==h||Mm||null!==e&&null!==e.dependencies&&Jn(e.dependencies)?("function"==typeof d&&(Pa(t,n,d,r),h=t.memoizedState),(u=Mm||Oa(t,n,u,r,p,h,i)||null!==e&&null!==e.dependencies&&Jn(e.dependencies))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,i),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,i)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=i,a=u):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),a=!1)}if(i=a,Qa(e,t),l=!!(128&t.flags),i||l){if(i=t.stateNode,Ae(t),l&&"function"!=typeof n.getDerivedStateFromError)n=null,nm=-1;else{if(q(t),n=Sg(i),t.mode&yh){W(!0);try{Sg(i)}finally{W(!1)}}$()}t.flags|=1,null!==e&&l?(t.child=Vg(t,e.child,null,o),t.child=Vg(t,null,n,o)):Ha(e,t,n,o),t.memoizedState=i.state,e=t.child}else e=ul(e,t,o);return o=t.stateNode,a&&o.props!==r&&(by||console.error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",_(t)||"a component"),by=!0),e}function Xa(e,t,n,r){return Wn(),t.flags|=256,Ha(e,t,n,r),t.child}function Ja(e,t){t&&t.childContextTypes&&console.error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",t.displayName||t.name||"Component"),"function"==typeof t.getDerivedStateFromProps&&(e=T(t)||"Unknown",yy[e]||(console.error("%s: Function components do not support getDerivedStateFromProps.",e),yy[e]=!0)),"object"==typeof t.contextType&&null!==t.contextType&&(t=T(t)||"Unknown",my[t]||(console.error("%s: Function components do not support contextType.",t),my[t]=!0))}function Za(e){return{baseLanes:e,cachePool:br()}}function el(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=vb),e}function tl(e,t,n){var r,o=t.pendingProps;i(t)&&(t.flags|=128);var a=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(Gg.current&Kg)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Ih){if(a?xa(t):Ea(t),Ih){var s,u=Dh;if(!(s=!u)){e:{var c=u;for(s=Fh;8!==c.nodeType;){if(!s){s=null;break e}if(null===(c=yu(c.nextSibling))){s=null;break e}}s=c}null!==s?(zn(),t.memoizedState={dehydrated:s,treeContext:null!==Rh?{id:Ph,overflow:Oh}:null,retryLane:536870912,hydrationErrors:null},(c=h(18,null,null,hh)).stateNode=s,c.return=t,t.child=c,Lh=t,Dh=null,s=!0):s=!1,s=!s}s&&(Fn(t,u),Mn(t))}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return gu(u)?t.lanes=32:t.lanes=536870912,null;_a(t)}return u=o.children,o=o.fallback,a?(Ea(t),u=rl({mode:"hidden",children:u},a=t.mode),o=Rn(o,a,n,null),u.return=t,o.return=t,u.sibling=o,t.child=u,(a=t.child).memoizedState=Za(n),a.childLanes=el(e,r,n),t.memoizedState=wy,o):(xa(t),nl(t,u))}var d=e.memoizedState;if(null!==d&&null!==(u=d.dehydrated)){if(l)256&t.flags?(xa(t),t.flags&=-257,t=ol(e,t,n)):null!==t.memoizedState?(Ea(t),t.child=e.child,t.flags|=128,t=null):(Ea(t),a=o.fallback,u=t.mode,o=rl({mode:"visible",children:o.children},u),(a=Rn(a,u,n,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,Vg(t,e.child,null,n),(o=t.child).memoizedState=Za(n),o.childLanes=el(e,r,n),t.memoizedState=wy,t=a);else if(xa(t),Ih&&console.error("We should not be hydrating here. This is a bug in React. Please file a bug."),gu(u)){if(r=u.nextSibling&&u.nextSibling.dataset){s=r.dgst;var f=r.msg;c=r.stck;var p=r.cstck}r=s,o=c,s=a=p,(a=(u=f)?Error(u):Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.")).stack=o||"",a.digest=r,o={value:a,source:null,stack:r=void 0===s?null:s},"string"==typeof r&&ah.set(a,o),Vn(o),t=ol(e,t,n)}else if(py||Xn(e,t,n,!1),r=!!(n&e.childLanes),py||r){if(null!==(r=Gy)&&(0!==(o=(o=42&(o=n&-n)?1:ie(o))&(r.suspendedLanes|n)?0:o)&&o!==d.retryLane))throw d.retryLane=o,hn(e,o),xi(r,e,o),fy;u.data===Lv||Ni(),t=ol(e,t,n)}else u.data===Lv?(t.flags|=192,t.child=e.child,t=null):(e=d.treeContext,Dh=yu(u.nextSibling),Lh=t,Ih=!0,Ah=null,Nh=!1,zh=null,Fh=!1,null!==e&&(zn(),_h[Ch++]=Ph,_h[Ch++]=Oh,_h[Ch++]=Rh,Ph=e.id,Oh=e.overflow,Rh=t),(t=nl(t,o.children)).flags|=4096);return t}return a?(Ea(t),a=o.fallback,u=t.mode,c=(s=e.child).sibling,(o=Tn(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?a=Tn(c,a):(a=Rn(a,u,n,null)).flags|=2,a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,null===(u=e.child.memoizedState)?u=Za(n):(null!==(s=u.cachePool)?(c=Jh._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=br(),u={baseLanes:u.baseLanes|n,cachePool:s}),a.memoizedState=u,a.childLanes=el(e,r,n),t.memoizedState=wy,o):(xa(t),e=(n=e.child).sibling,(n=Tn(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function nl(e,t){return(t=rl({mode:"visible",children:t},e.mode)).return=e,e.child=t}function rl(e,t){return(e=h(22,e,null,t)).lanes=0,e.stateNode={_visibility:lh,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function ol(e,t,n){return Vg(t,e.child,null,n),(e=nl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function al(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Kn(e.return,t,n)}function ll(e,t){var n=Kc(e);return e=!n&&"function"==typeof x(e),!n&&!e||(n=n?"array":"iterable",console.error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",n,t,n),!1)}function il(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function sl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(r=r.children,void 0!==o&&"forwards"!==o&&"backwards"!==o&&"together"!==o&&!vy[o])if(vy[o]=!0,"string"==typeof o)switch(o.toLowerCase()){case"together":case"forwards":case"backwards":console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',o,o.toLowerCase());break;case"forward":case"backward":console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',o,o.toLowerCase());break;default:console.error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',o)}else console.error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',o);void 0===a||ky[a]||("collapsed"!==a&&"hidden"!==a?(ky[a]=!0,console.error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',a)):"forwards"!==o&&"backwards"!==o&&(ky[a]=!0,console.error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',a)));e:if(("forwards"===o||"backwards"===o)&&null!=r&&!1!==r)if(Kc(r)){for(var l=0;l<r.length;l++)if(!ll(r[l],l))break e}else if(l=x(r),"function"==typeof l){if(l=l.call(r))for(var i=l.next(),s=0;!i.done;i=l.next()){if(!ll(i.value,s))break e;s++}}else console.error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',o);if(Ha(e,t,r,n),(r=Gg.current)&Kg)r=r&Yg|Kg,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&al(e,n,t);else if(19===e.tag)al(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=Yg}switch(P(Gg,r,t),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ca(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),il(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ca(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}il(t,!0,n,null,a);break;case"together":il(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ul(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),nm=-1,gb|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Xn(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error("Resuming work not yet implemented.");if(null!==t.child){for(n=Tn(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tn(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function cl(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Jn(e))}function dl(e,t,n){if(t._debugNeedsRemount&&null!==e){(n=_n(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes))._debugStack=t._debugStack,n._debugTask=t._debugTask;var r=t.return;if(null===r)throw Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,n._debugInfo=t._debugInfo,t===r.child)r.child=n;else{var o=r.child;if(null===o)throw Error("Expected parent to have a child.");for(;o.sibling!==t;)if(null===(o=o.sibling))throw Error("Expected to find the previous sibling.");o.sibling=n}return null===(t=r.deletions)?(r.deletions=[e],r.flags|=16):t.push(e),n.flags|=2,n}if(null!==e)if(e.memoizedProps!==t.pendingProps||t.type!==e.type)py=!0;else{if(!(cl(e,n)||128&t.flags))return py=!1,function(e,t,n){switch(t.tag){case 3:L(t,t.stateNode.containerInfo),Qn(t,Jh,e.memoizedState.cache),Wn();break;case 27:case 5:N(t);break;case 4:L(t,t.stateNode.containerInfo);break;case 10:Qn(t,t.type,t.memoizedProps.value);break;case 12:n&t.childLanes&&(t.flags|=4),t.flags|=2048;var r=t.stateNode;r.effectDuration=-0,r.passiveEffectDuration=-0;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(t),t.flags|=128,null):n&t.child.childLanes?tl(e,t,n):(xa(t),null!==(e=ul(e,t,n))?e.sibling:null);xa(t);break;case 19:var o=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Xn(e,t,n,!1),r=!!(n&t.childLanes)),o){if(r)return sl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),P(Gg,Gg.current,t),r)break;return null;case 22:case 23:return t.lanes=0,qa(e,t,n);case 24:Qn(t,Jh,e.memoizedState.cache)}return ul(e,t,n)}(e,t,n);py=!!(131072&e.flags)}else py=!1,(r=Ih)&&(zn(),r=!!(1048576&t.flags)),r&&(r=t.index,zn(),Dn(t,Eh,r));switch(t.lanes=0,t.tag){case 16:e:{if(r=t.pendingProps,e=Ag(t.elementType),t.type=e,"function"!=typeof e){if(null!=e){if((o=e.$$typeof)===Ic){t.tag=11,t.type=e=bn(e),t=Wa(null,t,e,r,n);break e}if(o===Ac){t.tag=14,t=Ba(null,t,e,r,n);break e}}throw t="",null!==e&&"object"==typeof e&&e.$$typeof===Fc&&(t=" Did you wrap a component in React.lazy() more than once?"),e=T(e)||e,Error("Element type is invalid. Received a promise that resolves to: "+e+". Lazy element type must resolve to a class or function."+t)}xn(e)?(r=Da(e,r),t.tag=1,t.type=e=yn(e),t=Ga(null,t,e,r,n)):(t.tag=0,Ja(t,e),t.type=e=yn(e),t=Ya(null,t,e,r,n))}return t;case 0:return Ya(e,t,t.type,t.pendingProps,n);case 1:return Ga(e,t,r=t.type,o=Da(r,t.pendingProps),n);case 3:e:{if(L(t,t.stateNode.containerInfo),null===e)throw Error("Should have a current fiber. This is a bug in React.");r=t.pendingProps;var a=t.memoizedState;o=a.element,Er(e,t),Lr(t,r,null,n);var l=t.memoizedState;if(r=l.cache,Qn(t,Jh,r),r!==a.cache&&Gn(t,[Jh],n,!0),Or(),r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Xa(e,t,r,n);break e}if(r!==o){Vn(o=cn(Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."),t)),t=Xa(e,t,r,n);break e}if(9===(e=t.stateNode.containerInfo).nodeType)e=e.body;else e="HTML"===e.nodeName?e.ownerDocument.body:e;for(Dh=yu(e.firstChild),Lh=t,Ih=!0,Ah=null,Nh=!1,zh=null,Fh=!0,e=qg(t,null,r,n),t.child=e;e;)e.flags=-3&e.flags|4096,e=e.sibling}else{if(Wn(),r===o){t=ul(e,t,n);break e}Ha(e,t,r,n)}t=t.child}return t;case 26:return Qa(e,t),null===e?(e=Pu(t.type,null,t.pendingProps,null))?t.memoizedState=e:Ih||(e=t.type,n=t.pendingProps,(r=Js(r=O(od.current)).createElement(e))[zd]=t,r[Ad]=n,Ws(r,e,n),ye(r),t.stateNode=r):t.memoizedState=Pu(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return N(t),null===e&&Ih&&(r=O(od.current),o=I(),r=t.stateNode=Tu(t.type,t.pendingProps,r,o,!1),Nh||null!==(o=Xs(r,t.type,t.pendingProps,o))&&(An(t,0).serverProps=o),Lh=t,Fh=!0,o=Dh,iu(t.type)?(Jv=o,Dh=yu(r.firstChild)):Dh=o),Ha(e,t,t.pendingProps.children,n),Qa(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&Ih&&(a=I(),r=vt(t.type,a.ancestorInfo),(l=!(o=Dh))||(null!==(l=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Wd])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;j(o.name,"name");var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=yu(e.nextSibling)))break}return null}(o,t.type,t.pendingProps,Fh))?(t.stateNode=l,Nh||null!==(a=Xs(l,t.type,t.pendingProps,a))&&(An(t,0).serverProps=a),Lh=t,Dh=yu(l.firstChild),Fh=!1,a=!0):a=!1,l=!a),l&&(r&&Fn(t,o),Mn(t))),N(t),o=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,r=a.children,tu(o,a)?r=null:null!==l&&tu(o,l)&&(t.flags|=32),null!==t.memoizedState&&(o=Vr(e,t,Qr,null,null,n),Sk._currentValue=o),Qa(e,t),Ha(e,t,r,n),t.child;case 6:return null===e&&Ih&&(e=t.pendingProps,e=null==(r=(n=I()).ancestorInfo.current)||kt(e,r.tag,n.ancestorInfo.implicitRootScope),(r=!(n=Dh))||(null!==(r=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yu(e.nextSibling)))return null}return e}(n,t.pendingProps,Fh))?(t.stateNode=r,Lh=t,Dh=null,r=!0):r=!1,r=!r),r&&(e&&Fn(t,n),Mn(t))),null;case 13:return tl(e,t,n);case 4:return L(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Vg(t,null,r,n):Ha(e,t,r,n),t.child;case 11:return Wa(e,t,t.type,t.pendingProps,n);case 7:return Ha(e,t,t.pendingProps,n),t.child;case 8:return Ha(e,t,t.pendingProps.children,n),t.child;case 12:return t.flags|=4,t.flags|=2048,(r=t.stateNode).effectDuration=-0,r.passiveEffectDuration=-0,Ha(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.type,a=(o=t.pendingProps).value,"value"in o||Sy||(Sy=!0,console.error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?")),Qn(t,r,a),Ha(e,t,o.children,n),t.child;case 9:return o=t.type._context,"function"!=typeof(r=t.pendingProps.children)&&console.error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),Zn(t),o=er(o),q(t),r=kg(r,o,void 0),$(),t.flags|=1,Ha(e,t,r,n),t.child;case 14:return Ba(e,t,t.type,t.pendingProps,n);case 15:return Va(e,t,t.type,t.pendingProps,n);case 19:return sl(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((e=rl(r,n)).ref=t.ref,t.child=e,e.return=t,t=e):((e=Tn(e.child,r)).ref=t.ref,t.child=e,e.return=t,t=e),t;case 22:return qa(e,t,n);case 24:return Zn(t),r=er(Jh),null===e?(null===(o=gr())&&(o=Gy,a=rr(),o.pooledCache=a,or(a),null!==a&&(o.pooledCacheLanes|=n),o=a),t.memoizedState={parent:r,cache:o},Tr(t),Qn(t,Jh,o)):(!!(e.lanes&n)&&(Er(e,t),Lr(t,null,null,n),Or()),o=e.memoizedState,a=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),Qn(t,Jh,r)):(r=a.cache,Qn(t,Jh,r),r!==o.cache&&Gn(t,[Jh],n,!0))),Ha(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function fl(e){e.flags|=4}function pl(e,t){if("stylesheet"!==t.type||(t.state.loading&rk)!==Zv)e.flags&=-16777217;else if(e.flags|=16777216,!Wu(t)){if(null!==(t=$g.current)&&((4194048&Jy)===Jy?null!==Qg:(62914560&Jy)!==Jy&&!(536870912&Jy)||t!==Qg))throw Cm=_m,Tm;e.flags|=8192}}function hl(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ne():536870912,e.lanes|=t,kb|=t)}function ml(e,t){if(!Ih)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function gl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)if((e.mode&gh)!==hh){for(var o=e.selfBaseDuration,a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,o+=a.treeBaseDuration,a=a.sibling;e.treeBaseDuration=o}else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else if((e.mode&gh)!==hh){o=e.actualDuration,a=e.selfBaseDuration;for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,o+=l.actualDuration,a+=l.treeBaseDuration,l=l.sibling;e.actualDuration=o,e.treeBaseDuration=a}else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function yl(e,t,n){var r=t.pendingProps;switch(Nn(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return gl(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),Yn(Jh,t),D(t),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Hn(t)?(qn(),fl(t)):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,Bn())),gl(t),null;case 26:return n=t.memoizedState,null===e?(fl(t),null!==n?(gl(t),pl(t,n)):(gl(t),t.flags&=-16777217)):n?n!==e.memoizedState?(fl(t),gl(t),pl(t,n)):(gl(t),t.flags&=-16777217):(e.memoizedProps!==r&&fl(t),gl(t),t.flags&=-16777217),null;case 27:z(t),n=O(od.current);var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&fl(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return gl(t),null}e=I(),Hn(t)?jn(t):(e=Tu(o,r,n,e,!0),t.stateNode=e,fl(t))}return gl(t),null;case 5:if(z(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&fl(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return gl(t),null}if(o=I(),Hn(t))jn(t);else{switch(e=O(od.current),vt(n,o.ancestorInfo),o=o.context,e=Js(e),o){case Hv:e=e.createElementNS(If,n);break;case Wv:e=e.createElementNS(Df,n);break;default:switch(n){case"svg":e=e.createElementNS(If,n);break;case"math":e=e.createElementNS(Df,n);break;case"script":(e=e.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?e.createElement("select",{is:r.is}):e.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?e.createElement(n,{is:r.is}):e.createElement(n),-1===n.indexOf("-")&&(n!==n.toLowerCase()&&console.error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",n),"[object HTMLUnknownElement]"!==Object.prototype.toString.call(e)||ld.call(qv,n)||(qv[n]=!0,console.error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",n)))}}e[zd]=t,e[Ad]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(Ws(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&fl(t)}}return gl(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&fl(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");if(e=O(od.current),n=I(),Hn(t)){e=t.stateNode,n=t.memoizedProps,o=!Nh,r=null;var a=Lh;if(null!==a)switch(a.tag){case 3:o&&(null!==(o=vu(e,n,r))&&(An(t,0).serverProps=o));break;case 27:case 5:r=a.memoizedProps,o&&(null!==(o=vu(e,n,r))&&(An(t,0).serverProps=o))}e[zd]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Ms(e.nodeValue,n)))||Mn(t)}else null!=(o=n.ancestorInfo.current)&&kt(r,o.tag,n.ancestorInfo.implicitRootScope),(e=Js(e).createTextNode(r))[zd]=t,t.stateNode=e}return gl(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=Hn(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");o[zd]=t,gl(t),(t.mode&gh)!==hh&&null!==r&&(null!==(o=t.child)&&(t.treeBaseDuration-=o.treeBaseDuration))}else qn(),Wn(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4,gl(t),(t.mode&gh)!==hh&&null!==r&&(null!==(o=t.child)&&(t.treeBaseDuration-=o.treeBaseDuration));o=!1}else o=Bn(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&t.flags?(_a(t),t):(_a(t),null)}return _a(t),128&t.flags?(t.lanes=n,(t.mode&gh)!==hh&&hr(t),t):(n=null!==r,e=null!==e&&null!==e.memoizedState,n&&(o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool),a=null,null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)),n!==e&&n&&(t.child.flags|=8192),hl(t,t.updateQueue),gl(t),(t.mode&gh)!==hh&&n&&(null!==(e=t.child)&&(t.treeBaseDuration-=e.treeBaseDuration)),null);case 4:return D(t),null===e&&_s(t.stateNode.containerInfo),gl(t),null;case 10:return Yn(t.type,t),gl(t),null;case 19:if(R(Gg,t),null===(o=t.memoizedState))return gl(t),null;if(r=!!(128&t.flags),null===(a=o.rendering))if(r)ml(o,!1);else{if(mb!==Wy||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=Ca(e))){for(t.flags|=128,ml(o,!1),e=a.updateQueue,t.updateQueue=e,hl(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)En(n,e),n=n.sibling;return P(Gg,Gg.current&Yg|Kg,t),t.child}e=e.sibling}null!==o.tail&&dd()>_b&&(t.flags|=128,r=!0,ml(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Ca(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,hl(t,e),ml(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!Ih)return gl(t),null}else 2*dd()-o.renderingStartTime>_b&&536870912!==n&&(t.flags|=128,r=!0,ml(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=o.last)?e.sibling=a:t.child=a,o.last=a)}return null!==o.tail?(e=o.tail,o.rendering=e,o.tail=e.sibling,o.renderingStartTime=dd(),e.sibling=null,n=Gg.current,P(Gg,n=r?n&Yg|Kg:n&Yg,t),e):(gl(t),null);case 22:case 23:return _a(t),Fr(t),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(gl(t),6&t.subtreeFlags&&(t.flags|=8192)):gl(t),null!==(n=t.updateQueue)&&hl(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&R(dm,t),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),Yn(Jh,t),gl(t),null;case 25:case 30:return null}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function bl(e,t){switch(Nn(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&gh)!==hh&&hr(t),t):null;case 3:return Yn(Jh,t),D(t),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return z(t),null;case 13:if(_a(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");Wn()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&gh)!==hh&&hr(t),t):null;case 19:return R(Gg,t),null;case 4:return D(t),null;case 10:return Yn(t.type,t),null;case 22:case 23:return _a(t),Fr(t),null!==e&&R(dm,t),65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&gh)!==hh&&hr(t),t):null;case 24:return Yn(Jh,t),null;default:return null}}function vl(e,t){switch(Nn(t),t.tag){case 3:Yn(Jh,t),D(t);break;case 26:case 27:case 5:z(t);break;case 4:D(t);break;case 13:_a(t);break;case 19:R(Gg,t);break;case 10:Yn(t.type,t);break;case 22:case 23:_a(t),Fr(t),null!==e&&R(dm,t);break;case 24:Yn(Jh,t)}}function kl(e){return(e.mode&gh)!==hh}function wl(e,t){kl(e)?(pr(),xl(t,e),fr()):xl(t,e)}function Sl(e,t,n){kl(e)?(pr(),Tl(n,e,t),fr()):Tl(n,e,t)}function xl(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e&&((e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectMountStarted&&Sd.markComponentPassiveEffectMountStarted(t):(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectMountStarted&&Sd.markComponentLayoutEffectMountStarted(t),r=void 0,(e&Lm)!==Pm&&(ev=!0),r=ze(t,Dg,n),(e&Lm)!==Pm&&(ev=!1),(e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectMountStopped&&Sd.markComponentPassiveEffectMountStopped():(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectMountStopped&&Sd.markComponentLayoutEffectMountStopped(),void 0!==r&&"function"!=typeof r)){var a;a=n.tag&Dm?"useLayoutEffect":n.tag&Lm?"useInsertionEffect":"useEffect";ze(t,(function(e,t){console.error("%s must not return anything besides a function, which is used for clean-up.%s",e,t)}),a,null===r?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof r.then?"\n\nIt looks like you wrote "+a+"(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n"+a+"(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching":" You returned: "+r)}n=n.next}while(n!==o)}}catch(e){Zi(t,t.return,e)}}function Tl(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var l=r.inst,i=l.destroy;void 0!==i&&(l.destroy=void 0,(e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectUnmountStarted&&Sd.markComponentPassiveEffectUnmountStarted(t):(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectUnmountStarted&&Sd.markComponentLayoutEffectUnmountStarted(t),(e&Lm)!==Pm&&(ev=!0),ze(o=t,Ng,o,n,i),(e&Lm)!==Pm&&(ev=!1),(e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectUnmountStopped&&Sd.markComponentPassiveEffectUnmountStopped():(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectUnmountStopped&&Sd.markComponentLayoutEffectUnmountStopped())}r=r.next}while(r!==a)}}catch(e){Zi(t,t.return,e)}}function El(e,t){kl(e)?(pr(),xl(t,e),fr()):xl(t,e)}function _l(e,t,n){kl(e)?(pr(),Tl(n,e,t),fr()):Tl(n,e,t)}function Cl(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;e.type.defaultProps||"ref"in e.memoizedProps||by||(n.props!==e.memoizedProps&&console.error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",_(e)||"instance"),n.state!==e.memoizedState&&console.error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",_(e)||"instance"));try{ze(e,Nr,t,n)}catch(t){Zi(e,e.return,t)}}}function Rl(e,t,n){return e.getSnapshotBeforeUpdate(t,n)}function Pl(e,t){var n=t.memoizedProps,r=t.memoizedState;t=e.stateNode,e.type.defaultProps||"ref"in e.memoizedProps||by||(t.props!==e.memoizedProps&&console.error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",_(e)||"instance"),t.state!==e.memoizedState&&console.error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",_(e)||"instance"));try{var o=Da(e.type,n,(e.elementType,e.type)),a=ze(e,Rl,t,o,r);n=xy,void 0!==a||n.has(e.type)||(n.add(e.type),ze(e,(function(){console.error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",_(e))}))),t.__reactInternalSnapshotBeforeUpdate=a}catch(t){Zi(e,e.return,t)}}function Ol(e,t,n){n.props=Da(e.type,e.memoizedProps),n.state=e.memoizedState,kl(e)?(pr(),ze(e,Og,e,t,n),fr()):ze(e,Og,e,t,n)}function Ll(e){var t=e.ref;if(null!==t){switch(e.tag){case 26:case 27:case 5:var n=e.stateNode;break;default:n=e.stateNode}if("function"==typeof t)if(kl(e))try{pr(),e.refCleanup=t(n)}finally{fr()}else e.refCleanup=t(n);else"string"==typeof t?console.error("String refs are no longer supported."):t.hasOwnProperty("current")||console.error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",_(e)),t.current=n}}function Dl(e,t){try{ze(e,Ll,e)}catch(n){Zi(e,t,n)}}function Il(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{if(kl(e))try{pr(),ze(e,r)}finally{fr()}else ze(e,r)}catch(n){Zi(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{if(kl(e))try{pr(),ze(e,n,null)}finally{fr()}else ze(e,n,null)}catch(n){Zi(e,t,n)}else n.current=null}function Nl(e,t,n,r){var o=e.memoizedProps,a=o.id,l=o.onCommit;o=o.onRender,t=null===t?"mount":"update",om&&(t="nested-update"),"function"==typeof o&&o(a,t,e.actualDuration,e.treeBaseDuration,e.actualStartTime,n),"function"==typeof l&&l(e.memoizedProps.id,t,r,n)}function zl(e,t,n,r){var o=e.memoizedProps;e=o.id,o=o.onPostCommit,t=null===t?"mount":"update",om&&(t="nested-update"),"function"==typeof o&&o(e,t,r,n)}function Al(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{ze(e,ru,r,t,n,e)}catch(t){Zi(e,e.return,t)}}function Fl(e,t,n){try{ze(e,ou,e.stateNode,e.type,n,t,e)}catch(t){Zi(e,e.return,t)}}function Ml(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&iu(e.type)||4===e.tag}function jl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Ml(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&iu(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=js));else if(4!==r&&(27===r&&iu(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(Ul(e,t,n),e=e.sibling;null!==e;)Ul(e,t,n),e=e.sibling}function Hl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&iu(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(Hl(e,t,n),e=e.sibling;null!==e;)Hl(e,t,n),e=e.sibling}function Wl(e){for(var t,n=e.return;null!==n;){if(Ml(n)){t=n;break}n=n.return}if(null==t)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");switch(t.tag){case 27:t=t.stateNode,Hl(e,n=jl(e),t);break;case 5:n=t.stateNode,32&t.flags&&(au(n),t.flags&=-33),Hl(e,t=jl(e),n);break;case 3:case 4:t=t.stateNode.containerInfo,Ul(e,n=jl(e),t);break;default:throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}}function Bl(e){var t=e.stateNode,n=e.memoizedProps;try{ze(e,Eu,e.type,n,t,e)}catch(t){Zi(e,e.return,t)}}function Vl(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:ei(e,n),4&r&&wl(n,Dm|Om);break;case 1:if(ei(e,n),4&r)if(e=n.stateNode,null===t)n.type.defaultProps||"ref"in n.memoizedProps||by||(e.props!==n.memoizedProps&&console.error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",_(n)||"instance"),e.state!==n.memoizedState&&console.error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",_(n)||"instance")),kl(n)?(pr(),ze(n,Tg,n,e),fr()):ze(n,Tg,n,e);else{var o=Da(n.type,t.memoizedProps);t=t.memoizedState,n.type.defaultProps||"ref"in n.memoizedProps||by||(e.props!==n.memoizedProps&&console.error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",_(n)||"instance"),e.state!==n.memoizedState&&console.error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",_(n)||"instance")),kl(n)?(pr(),ze(n,_g,n,e,o,t,e.__reactInternalSnapshotBeforeUpdate),fr()):ze(n,_g,n,e,o,t,e.__reactInternalSnapshotBeforeUpdate)}64&r&&Cl(n),512&r&&Dl(n,n.return);break;case 3:if(t=lr(),ei(e,n),64&r&&null!==(r=n.updateQueue)){if(o=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:o=n.child.stateNode}try{ze(n,Nr,r,o)}catch(e){Zi(n,n.return,e)}}e.effectDuration+=ir(t);break;case 27:null===t&&4&r&&Bl(n);case 26:case 5:ei(e,n),null===t&&4&r&&Al(n),512&r&&Dl(n,n.return);break;case 12:if(4&r){r=lr(),ei(e,n),(e=n.stateNode).effectDuration+=sr(r);try{ze(n,Nl,n,t,tm,e.effectDuration)}catch(e){Zi(n,n.return,e)}}else ei(e,n);break;case 13:ei(e,n),4&r&&Yl(e,n),64&r&&(null!==(e=n.memoizedState)&&(null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if(e.data!==Lv||n.readyState===Mv)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=rs.bind(null,n))));break;case 22:if(!(r=null!==n.memoizedState||Ty)){t=null!==t&&null!==t.memoizedState||Ey,o=Ty;var a=Ey;Ty=r,(Ey=t)&&!a?oi(e,n,!!(8772&n.subtreeFlags)):ei(e,n),Ty=o,Ey=a}break;case 30:break;default:ei(e,n)}}function ql(e){var t=e.alternate;null!==t&&(e.alternate=null,ql(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&fe(t)),e.stateNode=null,e._debugOwner=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function $l(e,t,n){for(n=n.child;null!==n;)Ql(e,t,n),n=n.sibling}function Ql(e,t,n){if(wd&&"function"==typeof wd.onCommitFiberUnmount)try{wd.onCommitFiberUnmount(kd,n)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}switch(n.tag){case 26:Ey||Il(n,t),$l(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ey||Il(n,t);var r=Ly,o=Dy;iu(n.type)&&(Ly=n.stateNode,Dy=!1),$l(e,t,n),ze(n,_u,n.stateNode),Ly=r,Dy=o;break;case 5:Ey||Il(n,t);case 6:if(r=Ly,o=Dy,Ly=null,$l(e,t,n),Dy=o,null!==(Ly=r))if(Dy)try{ze(n,uu,Ly,n.stateNode)}catch(e){Zi(n,t,e)}else try{ze(n,su,Ly,n.stateNode)}catch(e){Zi(n,t,e)}break;case 18:null!==Ly&&(Dy?(cu(9===(e=Ly).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),gc(e)):cu(Ly,n.stateNode));break;case 4:r=Ly,o=Dy,Ly=n.stateNode.containerInfo,Dy=!0,$l(e,t,n),Ly=r,Dy=o;break;case 0:case 11:case 14:case 15:Ey||Tl(Lm,n,t),Ey||Sl(n,t,Dm),$l(e,t,n);break;case 1:Ey||(Il(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Ol(n,t,r)),$l(e,t,n);break;case 21:$l(e,t,n);break;case 22:Ey=(r=Ey)||null!==n.memoizedState,$l(e,t,n),Ey=r;break;default:$l(e,t,n)}}function Yl(e,t){if(null===t.memoizedState&&(null!==(e=t.alternate)&&(null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))))try{ze(t,xu,e)}catch(e){Zi(t,t.return,e)}}function Kl(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new Cy),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new Cy),t;default:throw Error("Unexpected Suspense handler tag ("+e.tag+"). This is a bug in React.")}}(e);t.forEach((function(t){var r=os.bind(null,e,t);if(!n.has(t)){if(n.add(t),Td){if(null===Py||null===Oy)throw Error("Expected finished root and lanes to be set. This is a bug in React.");us(Oy,Py)}t.then(r,r)}}))}function Gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=e,a=t,l=n[r],i=a;e:for(;null!==i;){switch(i.tag){case 27:if(iu(i.type)){Ly=i.stateNode,Dy=!1;break e}break;case 5:Ly=i.stateNode,Dy=!1;break e;case 3:case 4:Ly=i.stateNode.containerInfo,Dy=!0;break e}i=i.return}if(null===Ly)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");Ql(o,a,l),Ly=null,Dy=!1,null!==(a=(o=l).alternate)&&(a.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Xl(t,e),t=t.sibling}function Xl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Gl(t,e),Jl(e),4&r&&(Tl(Lm|Om,e,e.return),xl(Lm|Om,e),Sl(e,e.return,Dm|Om));break;case 1:Gl(t,e),Jl(e),512&r&&(Ey||null===n||Il(n,n.return)),64&r&&Ty&&(null!==(e=e.updateQueue)&&(null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r))));break;case 26:var o=Iy;if(Gl(t,e),Jl(e),512&r&&(Ey||null===n||Il(n,n.return)),4&r)if(t=null!==n?n.memoizedState:null,r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,t=o.ownerDocument||o;t:switch(r){case"title":(!(o=t.getElementsByTagName("title")[0])||o[Wd]||o[zd]||o.namespaceURI===If||o.hasAttribute("itemprop"))&&(o=t.createElement(r),t.head.insertBefore(o,t.querySelector("head > title"))),Ws(o,r,n),o[zd]=e,ye(o),r=o;break e;case"link":var a=Uu("link","href",t).get(r+(n.href||""));if(a)for(var l=0;l<a.length;l++)if((o=a[l]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){a.splice(l,1);break t}Ws(o=t.createElement(r),r,n),t.head.appendChild(o);break;case"meta":if(a=Uu("meta","content",t).get(r+(n.content||"")))for(l=0;l<a.length;l++)if(o=a[l],j(n.content,"content"),o.getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){a.splice(l,1);break t}Ws(o=t.createElement(r),r,n),t.head.appendChild(o);break;default:throw Error('getNodesForType encountered a type it did not expect: "'+r+'". This is a bug in React.')}o[zd]=e,ye(o),r=o}e.stateNode=r}else Hu(o,e.type,e.stateNode);else e.stateNode=Au(o,r,e.memoizedProps);else t!==r?(null===t?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):t.count--,null===r?Hu(o,e.type,e.stateNode):Au(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Fl(e,e.memoizedProps,n.memoizedProps);break;case 27:Gl(t,e),Jl(e),512&r&&(Ey||null===n||Il(n,n.return)),null!==n&&4&r&&Fl(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Gl(t,e),Jl(e),512&r&&(Ey||null===n||Il(n,n.return)),32&e.flags){t=e.stateNode;try{ze(e,au,t)}catch(t){Zi(e,e.return,t)}}4&r&&null!=e.stateNode&&Fl(e,t=e.memoizedProps,null!==n?n.memoizedProps:t),1024&r&&(_y=!0,"form"!==e.type&&console.error("Unexpected host component type. Expected a form. This is a bug in React."));break;case 6:if(Gl(t,e),Jl(e),4&r){if(null===e.stateNode)throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");r=e.memoizedProps,n=null!==n?n.memoizedProps:r,t=e.stateNode;try{ze(e,lu,t,n,r)}catch(t){Zi(e,e.return,t)}}break;case 3:if(o=lr(),yk=null,a=Iy,Iy=Cu(t.containerInfo),Gl(t,e),Iy=a,Jl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{ze(e,Su,t.containerInfo)}catch(t){Zi(e,e.return,t)}_y&&(_y=!1,Zl(e)),t.effectDuration+=ir(o);break;case 4:r=Iy,Iy=Cu(e.stateNode.containerInfo),Gl(t,e),Jl(e),Iy=r;break;case 12:r=lr(),Gl(t,e),Jl(e),e.stateNode.effectDuration+=sr(r);break;case 13:Gl(t,e),Jl(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(Tb=dd()),4&r&&(null!==(r=e.updateQueue)&&(e.updateQueue=null,Kl(e,r)));break;case 22:o=null!==e.memoizedState;var i=null!==n&&null!==n.memoizedState,s=Ty,u=Ey;if(Ty=s||o,Ey=u||i,Gl(t,e),Ey=u,Ty=s,Jl(e),8192&r)e:for(t=e.stateNode,t._visibility=o?t._visibility&~lh:t._visibility|lh,o&&(null===n||i||Ty||Ey||ni(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){i=n=t;try{a=i.stateNode,o?ze(i,du,a):ze(i,pu,i.stateNode,i.memoizedProps)}catch(e){Zi(i,i.return,e)}}}else if(6===t.tag){if(null===n){i=t;try{l=i.stateNode,o?ze(i,fu,l):ze(i,hu,l,i.memoizedProps)}catch(e){Zi(i,i.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&(null!==(r=e.updateQueue)&&(null!==(n=r.retryQueue)&&(r.retryQueue=null,Kl(e,n))));break;case 19:Gl(t,e),Jl(e),4&r&&(null!==(r=e.updateQueue)&&(e.updateQueue=null,Kl(e,r)));break;case 30:case 21:break;default:Gl(t,e),Jl(e)}}function Jl(e){var t=e.flags;if(2&t){try{ze(e,Wl,e)}catch(t){Zi(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Zl(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Zl(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function ei(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Vl(e,t.alternate,t),t=t.sibling}function ti(e){switch(e.tag){case 0:case 11:case 14:case 15:Sl(e,e.return,Dm),ni(e);break;case 1:Il(e,e.return);var t=e.stateNode;"function"==typeof t.componentWillUnmount&&Ol(e,e.return,t),ni(e);break;case 27:ze(e,_u,e.stateNode);case 26:case 5:Il(e,e.return),ni(e);break;case 22:null===e.memoizedState&&ni(e);break;default:ni(e)}}function ni(e){for(e=e.child;null!==e;)ti(e),e=e.sibling}function ri(e,t,n,r){var o=n.flags;switch(n.tag){case 0:case 11:case 15:oi(e,n,r),wl(n,Dm);break;case 1:if(oi(e,n,r),"function"==typeof(t=n.stateNode).componentDidMount&&ze(n,Tg,n,t),null!==(t=n.updateQueue)){e=n.stateNode;try{ze(n,Ir,t,e)}catch(e){Zi(n,n.return,e)}}r&&64&o&&Cl(n),Dl(n,n.return);break;case 27:Bl(n);case 26:case 5:oi(e,n,r),r&&null===t&&4&o&&Al(n),Dl(n,n.return);break;case 12:if(r&&4&o){o=lr(),oi(e,n,r),(r=n.stateNode).effectDuration+=sr(o);try{ze(n,Nl,n,t,tm,r.effectDuration)}catch(e){Zi(n,n.return,e)}}else oi(e,n,r);break;case 13:oi(e,n,r),r&&4&o&&Yl(e,n);break;case 22:null===n.memoizedState&&oi(e,n,r),Dl(n,n.return);break;case 30:break;default:oi(e,n,r)}}function oi(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;)ri(e,t.alternate,t,n),t=t.sibling}function ai(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&or(e),null!=n&&ar(n))}function li(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(or(t),null!=e&&ar(e))}function ii(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)si(e,t,n,r),t=t.sibling}function si(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:ii(e,t,n,r),2048&o&&El(t,Im|Om);break;case 1:case 13:default:ii(e,t,n,r);break;case 3:var a=lr();ii(e,t,n,r),2048&o&&(n=null,null!==t.alternate&&(n=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==n&&(or(t),null!=n&&ar(n))),e.passiveEffectDuration+=ir(a);break;case 12:if(2048&o){o=lr(),ii(e,t,n,r),(e=t.stateNode).passiveEffectDuration+=sr(o);try{ze(t,zl,t,t.alternate,tm,e.passiveEffectDuration)}catch(e){Zi(t,t.return,e)}}else ii(e,t,n,r);break;case 23:break;case 22:a=t.stateNode;var l=t.alternate;null!==t.memoizedState?a._visibility&ih?ii(e,t,n,r):di(e,t):a._visibility&ih?ii(e,t,n,r):(a._visibility|=ih,ui(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&ai(l,t);break;case 24:ii(e,t,n,r),2048&o&&li(t.alternate,t)}}function ui(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;)ci(e,t,n,r,o),t=t.sibling}function ci(e,t,n,r,o){var a=t.flags;switch(t.tag){case 0:case 11:case 15:ui(e,t,n,r,o),El(t,Im);break;case 23:break;case 22:var l=t.stateNode;null!==t.memoizedState?l._visibility&ih?ui(e,t,n,r,o):di(e,t):(l._visibility|=ih,ui(e,t,n,r,o)),o&&2048&a&&ai(t.alternate,t);break;case 24:ui(e,t,n,r,o),o&&2048&a&&li(t.alternate,t);break;default:ui(e,t,n,r,o)}}function di(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:di(n,r),2048&o&&ai(r.alternate,r);break;case 24:di(n,r),2048&o&&li(r.alternate,r);break;default:di(n,r)}t=t.sibling}}function fi(e){if(e.subtreeFlags&Ny)for(e=e.child;null!==e;)pi(e),e=e.sibling}function pi(e){switch(e.tag){case 26:fi(e),e.flags&Ny&&null!==e.memoizedState&&function(e,t,n){if(null===bk)throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");var r=bk;if("stylesheet"===t.type&&("string"!=typeof n.media||!1!==matchMedia(n.media).matches)&&(t.state.loading&rk)===Zv){if(null===t.instance){var o=Lu(n.href),a=e.querySelector(Du(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Vu.bind(r),e.then(r,r)),t.state.loading|=rk,t.instance=a,void ye(a);a=e.ownerDocument||e,n=Iu(n),(o=ok.get(o))&&Mu(n,o),ye(a=a.createElement("link"));var l=a;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Ws(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&(t.state.loading&nk)===Zv&&(r.count++,t=Vu.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Iy,e.memoizedState,e.memoizedProps);break;case 5:default:fi(e);break;case 3:case 4:var t=Iy;Iy=Cu(e.stateNode.containerInfo),fi(e),Iy=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Ny,Ny=16777216,fi(e),Ny=t):fi(e))}}function hi(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function mi(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Ry=r,vi(r,e)}hi(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)gi(e),e=e.sibling}function gi(e){switch(e.tag){case 0:case 11:case 15:mi(e),2048&e.flags&&_l(e,e.return,Im|Om);break;case 3:var t=lr();mi(e),e.stateNode.passiveEffectDuration+=ir(t);break;case 12:t=lr(),mi(e),e.stateNode.passiveEffectDuration+=sr(t);break;case 22:t=e.stateNode,null!==e.memoizedState&&t._visibility&ih&&(null===e.return||13!==e.return.tag)?(t._visibility&=~ih,yi(e)):mi(e);break;default:mi(e)}}function yi(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Ry=r,vi(r,e)}hi(e)}for(e=e.child;null!==e;)bi(e),e=e.sibling}function bi(e){switch(e.tag){case 0:case 11:case 15:_l(e,e.return,Im),yi(e);break;case 22:var t=e.stateNode;t._visibility&ih&&(t._visibility&=~ih,yi(e));break;default:yi(e)}}function vi(e,t){for(;null!==Ry;){var n=Ry,r=n;switch(r.tag){case 0:case 11:case 15:_l(r,t,Im);break;case 23:case 22:null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(null!=(r=r.memoizedState.cachePool.pool)&&or(r));break;case 24:ar(r.memoizedState.cache)}if(null!==(r=n.child))r.return=n,Ry=r;else e:for(n=e;null!==Ry;){var o=(r=Ry).sibling,a=r.return;if(ql(r),r===n){Ry=null;break e}if(null!==o){o.return=a,Ry=o;break e}Ry=a}}}function ki(){var e="undefined"!=typeof IS_REACT_ACT_ENVIRONMENT?IS_REACT_ACT_ENVIRONMENT:void 0;return e||null===Gc.actQueue||console.error("The current testing environment is not configured to support act(...)"),e}function wi(e){if((Ky&Uy)!==jy&&0!==Jy)return Jy&-Jy;var t=Gc.T;return null!==t?(t._updatedFibers||(t._updatedFibers=new Set),t._updatedFibers.add(e),0!==(e=sm)?e:vs()):de()}function Si(){0===vb&&(vb=536870912&Jy&&!Ih?536870912:te());var e=$g.current;return null!==e&&(e.flags|=32),vb}function xi(e,t,n){if(ev&&console.error("useInsertionEffect must not schedule updates."),Kb&&(Gb=!0),(e!==Gy||ub!==tb&&ub!==sb)&&null===e.cancelPendingCommit||(Oi(e,0),Ci(e,Jy,vb,!1)),oe(e,n),Ky&Uy&&e===Gy){if(nf)switch(t.tag){case 0:case 11:case 15:e=Xy&&_(Xy)||"Unknown",rv.has(e)||(rv.add(e),t=_(t)||"Unknown",console.error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",t,e,e));break;case 1:nv||(console.error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),nv=!0)}}else Td&&se(e,t,n),function(e){ki()&&null===Gc.actQueue&&ze(e,(function(){console.error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",_(e))}))}(t),e===Gy&&((Ky&Uy)===jy&&(yb|=n),mb===$y&&Ci(e,Jy,vb,!1)),cs(e)}function Ti(e,t,n){if((Ky&(Uy|Hy))!==jy)throw Error("Should not already be working.");for(var r=!n&&!(124&t)&&!(t&e.expiredLanes)||Z(e,t),o=r?function(e,t){var n=Ky;Ky|=Uy;var r=Di(),o=Ii();if(Gy!==e||Jy!==t){if(Td){var a=e.memoizedUpdaters;0<a.size&&(us(e,Jy),a.clear()),ue(e,t)}Rb=null,_b=dd()+Cb,Oi(e,t)}else fb=Z(e,t);Q(t);e:for(;;)try{if(ub!==Zy&&null!==Xy)t:switch(t=Xy,a=cb,ub){case eb:ub=Zy,cb=null,Hi(e,t,a,eb);break;case tb:case sb:if(vr(a)){ub=Zy,cb=null,ji(t);break}t=function(){ub!==tb&&ub!==sb||Gy!==e||(ub=lb),cs(e)},a.then(t,t);break e;case nb:ub=lb;break e;case rb:ub=ob;break e;case lb:vr(a)?(ub=Zy,cb=null,ji(t)):(ub=Zy,cb=null,Hi(e,t,a,lb));break;case ob:var l=null;switch(Xy.tag){case 26:l=Xy.memoizedState;case 5:case 27:var i=Xy;if(!l||Wu(l)){ub=Zy,cb=null;var s=i.sibling;if(null!==s)Xy=s;else{var u=i.return;null!==u?(Xy=u,Wi(u)):Xy=null}break t}break;default:console.error("Unexpected type of fiber triggered a suspensey commit. This is a bug in React.")}ub=Zy,cb=null,Hi(e,t,a,ob);break;case ab:ub=Zy,cb=null,Hi(e,t,a,ab);break;case ib:Pi(),mb=Qy;break e;default:throw Error("Unexpected SuspendedReason. This is a bug in React.")}null!==Gc.actQueue?Ai():Fi();break}catch(t){Li(e,t)}return $n(),Gc.H=r,Gc.A=o,Ky=n,null!==Xy?(null!==Sd&&"function"==typeof Sd.markRenderYielded&&Sd.markRenderYielded(),Wy):(Y(),Gy=null,Jy=0,dn(),mb)}(e,t):zi(e,t,!0),a=r;;){if(o===Wy){fb&&!r&&Ci(e,t,0,!1);break}if(n=e.current.alternate,!a||_i(n)){if(o===Vy){if(a=t,e.errorRecoveryDisabledLanes&a)var l=0;else l=0!==(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var i=l;l=wb;var s=(o=e).current.memoizedState.isDehydrated;if(s&&(Oi(o,i).flags|=256),(i=zi(o,i,!1))!==Vy){if(pb&&!s){o.errorRecoveryDisabledLanes|=a,yb|=a,o=$y;break e}o=Sb,Sb=l,null!==o&&(null===Sb?Sb=o:Sb.push.apply(Sb,o))}o=i}if(a=!1,o!==Vy)continue}}if(o===By){Oi(e,0),Ci(e,t,0,!0);break}e:{switch(r=e,o){case Wy:case By:throw Error("Root did not complete. This is a bug in React.");case $y:if((4194048&t)!==t)break;case Qy:Ci(r,t,vb,!db);break e;case Vy:Sb=null;break;case qy:case Yy:break;default:throw Error("Unknown root exit status.")}if(null!==Gc.actQueue)Vi(r,n,t,Sb,Rb,xb,vb,yb,kb);else{if((62914560&t)===t&&10<(a=Tb+Eb-dd())){if(Ci(r,t,vb,!db),0!==J(r,0,!0))break e;r.timeoutHandle=Qv(Ei.bind(null,r,n,Sb,Rb,xb,t,vb,yb,kb,db,o,Db,em,0),a);break e}Ei(r,n,Sb,Rb,xb,t,vb,yb,kb,db,o,Ob,em,0)}}break}o=zi(e,t,!1),a=!1}cs(e)}function Ei(e,t,n,r,o,a,l,i,s,u,c,d,f,p){if(e.timeoutHandle=Kv,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(bk={stylesheets:null,count:0,unsuspend:Bu},pi(t),null!==(d=function(){if(null===bk)throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");var e=bk;return e.stylesheets&&0===e.count&&qu(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&qu(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(Vi.bind(null,e,t,a,n,r,o,l,i,s,c,Lb,f,p)),void Ci(e,a,l,!u);Vi(e,t,a,n,r,o,l,i,s)}function _i(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&(null!==(n=t.updateQueue)&&null!==(n=n.stores)))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Hp(a(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ci(e,t,n,r){t&=~bb,t&=~yb,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var a=31-Ed(o),l=1<<a;r[a]=-1,o&=~l}0!==n&&ae(e,n,t)}function Ri(){return(Ky&(Uy|Hy))!==jy||(ds(0,!1),!1)}function Pi(){if(null!==Xy){if(ub===Zy)var e=Xy.return;else e=Xy,$n(),Gr(e),Fg=null,Mg=0,e=Xy;for(;null!==e;)vl(e.alternate,e),e=e.return;Xy=null}}function Oi(e,t){var n=e.timeoutHandle;n!==Kv&&(e.timeoutHandle=Kv,Yv(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Pi(),Gy=e,Xy=n=Tn(e.current,null),Jy=t,ub=Zy,cb=null,db=!1,fb=Z(e,t),pb=!1,mb=Wy,kb=vb=bb=yb=gb=0,Sb=wb=null,xb=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-Ed(r),a=1<<o;t|=e[o],r&=~a}return hb=t,dn(),1e3<(t=Hh())-jh&&(Gc.recentlyCreatedOwnerStacks=0,jh=t),fm.discardPendingWarnings(),n}function Li(e,t){Km=null,Gc.H=cg,Gc.getCurrentStack=null,nf=!1,tf=null,t===xm||t===Em?(t=Sr(),ub=nb):t===Tm?(t=Sr(),ub=rb):ub=t===fy?ib:null!==t&&"object"==typeof t&&"function"==typeof t.then?ab:eb,cb=t;var n=Xy;if(null===n)mb=By,Aa(e,cn(t,e.current));else switch(n.mode&gh&&cr(n),$(),ub){case eb:null!==Sd&&"function"==typeof Sd.markComponentErrored&&Sd.markComponentErrored(n,t,Jy);break;case tb:case sb:case nb:case ab:case lb:null!==Sd&&"function"==typeof Sd.markComponentSuspended&&Sd.markComponentSuspended(n,t,Jy)}}function Di(){var e=Gc.H;return Gc.H=cg,null===e?cg:e}function Ii(){var e=Gc.A;return Gc.A=zy,e}function Ni(){mb=$y,db||(4194048&Jy)!==Jy&&null!==$g.current||(fb=!0),!(134217727&gb)&&!(134217727&yb)||null===Gy||Ci(Gy,Jy,vb,!1)}function zi(e,t,n){var r=Ky;Ky|=Uy;var o=Di(),a=Ii();if(Gy!==e||Jy!==t){if(Td){var l=e.memoizedUpdaters;0<l.size&&(us(e,Jy),l.clear()),ue(e,t)}Rb=null,Oi(e,t)}Q(t),t=!1,l=mb;e:for(;;)try{if(ub!==Zy&&null!==Xy){var i=Xy,s=cb;switch(ub){case ib:Pi(),l=Qy;break e;case nb:case tb:case sb:case ab:null===$g.current&&(t=!0);var u=ub;if(ub=Zy,cb=null,Hi(e,i,s,u),n&&fb){l=Wy;break e}break;default:u=ub,ub=Zy,cb=null,Hi(e,i,s,u)}}Ai(),l=mb;break}catch(t){Li(e,t)}return t&&e.shellSuspendCounter++,$n(),Ky=r,Gc.H=o,Gc.A=a,Y(),null===Xy&&(Gy=null,Jy=0,dn()),l}function Ai(){for(;null!==Xy;)Mi(Xy)}function Fi(){for(;null!==Xy&&!ud();)Mi(Xy)}function Mi(e){var t=e.alternate;(e.mode&gh)!==hh?(ur(e),t=ze(e,dl,t,e,hb),cr(e)):t=ze(e,dl,t,e,hb),e.memoizedProps=e.pendingProps,null===t?Wi(e):Xy=t}function ji(e){var t=ze(e,Ui,e);e.memoizedProps=e.pendingProps,null===t?Wi(e):Xy=t}function Ui(e){var t=e.alternate,n=(e.mode&gh)!==hh;switch(n&&ur(e),e.tag){case 15:case 0:t=Ka(t,e,e.pendingProps,e.type,void 0,Jy);break;case 11:t=Ka(t,e,e.pendingProps,e.type.render,e.ref,Jy);break;case 5:Gr(e);default:vl(t,e),t=dl(t,e=Xy=En(e,hb),hb)}return n&&cr(e),t}function Hi(e,t,n,r){$n(),Gr(t),Fg=null,Mg=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,Td&&us(e,o),null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Xn(t,n,o,!0),Ih&&(Nh=!0),null!==(n=$g.current)){switch(n.tag){case 13:return null===Qg?Ni():null===n.alternate&&mb===Wy&&(mb=qy),n.flags&=-257,n.flags|=65536,n.lanes=o,r===_m?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),es(e,r,o)),!1;case 22:return n.flags|=65536,r===_m?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),es(e,r,o)),!1}throw Error("Unexpected Suspense handler tag ("+n.tag+"). This is a bug in React.")}return es(e,r,o),Ni(),!1}if(Ih)return Nh=!0,null!==(t=$g.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==Mh&&Vn(cn(Error("There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",{cause:r}),n))):(r!==Mh&&Vn(cn(Error("There was an error while hydrating but React was able to recover by instead client rendering the entire root.",{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=cn(r,n),Pr(e,o=Ma(e.stateNode,r,o)),mb!==$y&&(mb=Vy)),!1;var a=cn(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",{cause:r}),n);if(null===wb?wb=[a]:wb.push(a),mb!==$y&&(mb=Vy),null===t)return!0;r=cn(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,Pr(n,e=Ma(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Pb&&Pb.has(a))))return n.flags|=65536,o&=-o,n.lanes|=o,Ua(o=ja(o),e,n,r),Pr(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,Jy))return mb=By,Aa(e,cn(n,e.current)),void(Xy=null)}catch(t){if(null!==o)throw Xy=o,t;return mb=By,Aa(e,cn(n,e.current)),void(Xy=null)}32768&t.flags?(Ih||r===eb?e=!0:fb||536870912&Jy?e=!1:(db=e=!0,(r===tb||r===sb||r===nb||r===ab)&&(null!==(r=$g.current)&&13===r.tag&&(r.flags|=16384))),Bi(t,e)):Wi(t)}function Wi(e){var t=e;do{if(32768&t.flags)return void Bi(t,db);var n=t.alternate;if(e=t.return,ur(t),n=ze(t,yl,n,t,hb),(t.mode&gh)!==hh&&dr(t),null!==n)return void(Xy=n);if(null!==(t=t.sibling))return void(Xy=t);Xy=t=e}while(null!==t);mb===Wy&&(mb=Yy)}function Bi(e,t){do{var n=bl(e.alternate,e);if(null!==n)return n.flags&=32767,void(Xy=n);if((e.mode&gh)!==hh){dr(e),n=e.actualDuration;for(var r=e.child;null!==r;)n+=r.actualDuration,r=r.sibling;e.actualDuration=n}if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(Xy=e);Xy=e=n}while(null!==e);mb=Qy,Xy=null}function Vi(e,t,n,r,o,a,l,i,s){e.cancelPendingCommit=null;do{Gi()}while(jb!==Ib);if(fm.flushLegacyContextWarning(),fm.flushPendingUnsafeLifecycleWarnings(),(Ky&(Uy|Hy))!==jy)throw Error("Should not already be working.");if(null!==Sd&&"function"==typeof Sd.markCommitStarted&&Sd.markCommitStarted(n),null===t)V();else{if(0===n&&console.error("finishedLanes should not be empty during a commit. This is a bug in React."),t===e.current)throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");if(a=t.lanes|t.childLanes,function(e,t,n,r,o,a){var l=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=l&~n;0<n;){var c=31-Ed(n),d=1<<c;i[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&ae(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(l&~t))}(e,n,a|=ch,l,i,s),e===Gy&&(Xy=Gy=null,Jy=0),Hb=t,Ub=e,Wb=n,Bb=a,Vb=o,qb=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,u=md,c=function(){return Xi(),null},null!==(d=Gc.actQueue)?d.push(c):id(u,c)):(e.callbackNode=null,e.callbackPriority=0),tm=Zh(),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=Gc.T,Gc.T=null,o=Xc.p,Xc.p=Od,l=Ky,Ky|=Hy;try{!function(e,t){if(e=e.containerInfo,Bv=Ok,on(e=rn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,i=-1,s=-1,u=0,c=0,d=e,f=null;t:for(;;){for(var p;d!==n||0!==o&&3!==d.nodeType||(i=l+o),d!==a||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===e)break t;if(f===n&&++u===o&&(i=l),f===a&&++c===r&&(s=l),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}n=-1===i||-1===s?null:{start:i,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Vv={focusedElem:e,selectionRange:n},Ok=!1,Ry=t;null!==Ry;)if(e=(t=Ry).child,1024&t.subtreeFlags&&null!==e)e.return=t,Ry=e;else for(;null!==Ry;){switch(n=(e=t=Ry).alternate,o=e.flags,e.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:1024&o&&null!==n&&Pl(e,n);break;case 3:if(1024&o)if(9===(n=(e=e.stateNode.containerInfo).nodeType))mu(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":mu(e);break;default:e.textContent=""}break;default:if(1024&o)throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}if(null!==(e=t.sibling)){e.return=t.return,Ry=e;break}Ry=t.return}}(e,t)}finally{Ky=l,Xc.p=o,Gc.T=r}}jb=Nb,qi(),$i(),Qi()}var u,c,d}function qi(){if(jb===Nb){jb=Ib;var e=Ub,t=Hb,n=Wb,r=!!(13878&t.flags);if(13878&t.subtreeFlags||r){r=Gc.T,Gc.T=null;var o=Xc.p;Xc.p=Od;var a=Ky;Ky|=Hy;try{Py=n,Oy=e,Xl(t,e),Oy=Py=null,n=Vv;var l=rn(e.containerInfo),i=n.focusedElem,s=n.selectionRange;if(l!==i&&i&&i.ownerDocument&&nn(i.ownerDocument.documentElement,i)){if(null!==s&&on(i)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in i)i.selectionStart=u,i.selectionEnd=Math.min(c,i.value.length);else{var d=i.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var p=f.getSelection(),h=i.textContent.length,m=Math.min(s.start,h),g=void 0===s.end?m:Math.min(s.end,h);!p.extend&&m>g&&(l=g,g=m,m=l);var y=tn(i,m),b=tn(i,g);if(y&&b&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==b.node||p.focusOffset!==b.offset)){var v=d.createRange();v.setStart(y.node,y.offset),p.removeAllRanges(),m>g?(p.addRange(v),p.extend(b.node,b.offset)):(v.setEnd(b.node,b.offset),p.addRange(v))}}}}for(d=[],p=i;p=p.parentNode;)1===p.nodeType&&d.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<d.length;i++){var k=d[i];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}Ok=!!Bv,Vv=Bv=null}finally{Ky=a,Xc.p=o,Gc.T=r}}e.current=t,jb=zb}}function $i(){if(jb===zb){jb=Ib;var e=Ub,t=Hb,n=Wb,r=!!(8772&t.flags);if(8772&t.subtreeFlags||r){r=Gc.T,Gc.T=null;var o=Xc.p;Xc.p=Od;var a=Ky;Ky|=Hy;try{null!==Sd&&"function"==typeof Sd.markLayoutEffectsStarted&&Sd.markLayoutEffectsStarted(n),Py=n,Oy=e,Vl(e,t.alternate,t),Oy=Py=null,null!==Sd&&"function"==typeof Sd.markLayoutEffectsStopped&&Sd.markLayoutEffectsStopped()}finally{Ky=a,Xc.p=o,Gc.T=r}}jb=Ab}}function Qi(){if(jb===Fb||jb===Ab){jb=Ib,cd();var e=Ub,t=Hb,n=Wb,r=qb,o=!!(10256&t.subtreeFlags)||!!(10256&t.flags);o?jb=Mb:(jb=Ib,Hb=Ub=null,Ki(e,e.pendingLanes),Jb=0,Zb=null);var a=e.pendingLanes;if(0===a&&(Pb=null),o||is(e),o=ce(n),t=t.stateNode,wd&&"function"==typeof wd.onCommitFiberRoot)try{var l=!(128&~t.current.flags);switch(o){case Od:var i=pd;break;case Ld:i=hd;break;case Dd:i=md;break;case Id:i=yd;break;default:i=md}wd.onCommitFiberRoot(kd,t,i,l)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}if(Td&&e.memoizedUpdaters.clear(),Fy.forEach((function(e){return e()})),null!==r){l=Gc.T,i=Xc.p,Xc.p=Od,Gc.T=null;try{var s=e.onRecoverableError;for(t=0;t<r.length;t++){var u=r[t],c=Yi(u.stack);ze(u.source,s,u.value,c)}}finally{Gc.T=l,Xc.p=i}}3&Wb&&Gi(),cs(e),a=e.pendingLanes,4194090&n&&42&a?(am=!0,e===Yb?Qb++:(Qb=0,Yb=e)):Qb=0,ds(0,!1),V()}}function Yi(e){return e={componentStack:e},Object.defineProperty(e,"digest",{get:function(){console.error('You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.')}}),e}function Ki(e,t){0==(e.pooledCacheLanes&=t)&&(null!=(t=e.pooledCache)&&(e.pooledCache=null,ar(t)))}function Gi(e){return qi(),$i(),Qi(),Xi()}function Xi(){if(jb!==Mb)return!1;var e=Ub,t=Bb;Bb=0;var n=ce(Wb),r=0===Dd||Dd>n?Dd:n;n=Gc.T;var o=Xc.p;try{Xc.p=r,Gc.T=null,r=Vb,Vb=null;var a=Ub,l=Wb;if(jb=Ib,Hb=Ub=null,Wb=0,(Ky&(Uy|Hy))!==jy)throw Error("Cannot flush passive effects while already rendering.");Kb=!0,Gb=!1,null!==Sd&&"function"==typeof Sd.markPassiveEffectsStarted&&Sd.markPassiveEffectsStarted(l);var i=Ky;if(Ky|=Hy,gi(a.current),si(a,a.current,l,r),null!==Sd&&"function"==typeof Sd.markPassiveEffectsStopped&&Sd.markPassiveEffectsStopped(),is(a),Ky=i,ds(0,!1),Gb?a===Zb?Jb++:(Jb=0,Zb=a):Jb=0,Gb=Kb=!1,wd&&"function"==typeof wd.onPostCommitFiberRoot)try{wd.onPostCommitFiberRoot(kd,a)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}var s=a.current.stateNode;return s.effectDuration=0,s.passiveEffectDuration=0,!0}finally{Xc.p=o,Gc.T=n,Ki(e,t)}}function Ji(e,t,n){t=cn(n,t),null!==(e=Cr(e,t=Ma(e.stateNode,t,2),2))&&(oe(e,2),cs(e))}function Zi(e,t,n){if(ev=!1,3===e.tag)Ji(e,e,n);else{for(;null!==t;){if(3===t.tag)return void Ji(t,e,n);if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Pb||!Pb.has(r)))return e=cn(n,e),void(null!==(r=Cr(t,n=ja(2),2))&&(Ua(n,r,t,e),oe(r,2),cs(r)))}t=t.return}console.error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",n)}}function es(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new My;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(pb=!0,o.add(n),r=ts.bind(null,e,t,n),Td&&us(e,n),t.then(r,r))}function ts(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ki()&&null===Gc.actQueue&&console.error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"),Gy===e&&(Jy&n)===n&&(mb===$y||mb===qy&&(62914560&Jy)===Jy&&dd()-Tb<Eb?(Ky&Uy)===jy&&Oi(e,0):bb|=n,kb===Jy&&(kb=0)),cs(e)}function ns(e,t){0===t&&(t=ne()),null!==(e=hn(e,t))&&(oe(e,t),cs(e))}function rs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ns(e,n)}function os(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.")}null!==r&&r.delete(t),ns(e,n)}function as(e,t,n){if(67117056&t.subtreeFlags)for(t=t.child;null!==t;){var r=e,o=t,a=o.type===Rc;a=n||a,22!==o.tag?67108864&o.flags?a&&ze(o,ls,r,o,(o.mode&vh)===hh):as(r,o,a):null===o.memoizedState&&(a&&8192&o.flags?ze(o,ls,r,o):67108864&o.subtreeFlags&&ze(o,as,r,o,a)),t=t.sibling}}function ls(e,t){var n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2];W(!0);try{ti(t),n&&bi(t),ri(e,t.alternate,t,!1),n&&ci(e,t,0,null,!1)}finally{W(!1)}}function is(e){var t=!0;e.current.mode&(yh|bh)||(t=!1),as(e,e.current,t)}function ss(e){if((Ky&Uy)===jy){var t=e.tag;if(3===t||1===t||0===t||11===t||14===t||15===t){if(t=_(e)||"ReactComponent",null!==tv){if(tv.has(t))return;tv.add(t)}else tv=new Set([t]);ze(e,(function(){console.error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.")}))}}}function us(e,t){Td&&e.memoizedUpdaters.forEach((function(n){se(e,n,t)}))}function cs(e){e!==av&&null===e.next&&(null===av?ov=av=e:av=av.next=e),sv=!0,null!==Gc.actQueue?iv||(iv=!0,bs()):lv||(lv=!0,bs())}function ds(e,t){if(!uv&&sv){uv=!0;do{for(var n=!1,r=ov;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var l=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-Ed(42|e)+1)-1,a=201326741&(a&=o&~(l&~i))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,gs(r,a))}else a=Jy,!(3&(a=J(r,r===Gy?a:0,null!==r.cancelPendingCommit||r.timeoutHandle!==Kv)))||Z(r,a)||(n=!0,gs(r,a));r=r.next}}while(n);uv=!1}}function fs(){ps()}function ps(){sv=iv=lv=!1;var e=0;0!==cv&&(function(){var e=window.event;if(e&&"popstate"===e.type)return e!==$v&&($v=e,!0);return $v=null,!1}()&&(e=cv),cv=0);for(var t=dd(),n=null,r=ov;null!==r;){var o=r.next,a=hs(r,t);0===a?(r.next=null,null===n?ov=o:n.next=o,null===o&&(av=n)):(n=r,(0!==e||3&a)&&(sv=!0)),r=o}ds(e,!1)}function hs(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var l=31-Ed(a),i=1<<l,s=o[l];-1===s?i&n&&!(i&r)||(o[l]=ee(i,t)):s<=t&&(e.expiredLanes|=i),a&=~i}if(n=Jy,n=J(e,e===(t=Gy)?n:0,null!==e.cancelPendingCommit||e.timeoutHandle!==Kv),r=e.callbackNode,0===n||e===t&&(ub===tb||ub===sb)||null!==e.cancelPendingCommit)return null!==r&&ys(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Z(e,n)){if((t=n&-n)===e.callbackPriority&&(null===Gc.actQueue||r===dv))return t;switch(ys(r),ce(n)){case Od:case Ld:n=hd;break;case Dd:n=md;break;case Id:n=yd;break;default:n=md}return r=ms.bind(null,e),null!==Gc.actQueue?(Gc.actQueue.push(r),n=dv):n=id(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&ys(r),e.callbackPriority=2,e.callbackNode=null,2}function ms(e,t){if(am=om=!1,jb!==Ib&&jb!==Mb)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(Gi()&&e.callbackNode!==n)return null;var r=Jy;return 0===(r=J(e,e===Gy?r:0,null!==e.cancelPendingCommit||e.timeoutHandle!==Kv))?null:(Ti(e,r,t),hs(e,dd()),null!=e.callbackNode&&e.callbackNode===n?ms.bind(null,e):null)}function gs(e,t){if(Gi())return null;om=am,am=!1,Ti(e,t,!0)}function ys(e){e!==dv&&null!==e&&sd(e)}function bs(){null!==Gc.actQueue&&Gc.actQueue.push((function(){return ps(),null})),Xv((function(){(Ky&(Uy|Hy))!==jy?id(pd,fs):ps()}))}function vs(){return 0===cv&&(cv=te()),cv}function ks(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:(j(e,"action"),Rt(""+e))}function ws(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}function Ss(e,t,n){e.currentTarget=n;try{t(e)}catch(e){uy(e)}e.currentTarget=null}function xs(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n];e:{var o=void 0,a=r.event;if(r=r.listeners,t)for(var l=r.length-1;0<=l;l--){var i=r[l],s=i.instance,u=i.currentTarget;if(i=i.listener,s!==o&&a.isPropagationStopped())break e;null!==s?ze(s,Ss,a,i,u):Ss(a,i,u),o=s}else for(l=0;l<r.length;l++){if(s=(i=r[l]).instance,u=i.currentTarget,i=i.listener,s!==o&&a.isPropagationStopped())break e;null!==s?ze(s,Ss,a,i,u):Ss(a,i,u),o=s}}}}function Ts(e,t){pv.has(e)||console.error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',e);var n=t[Md];void 0===n&&(n=t[Md]=new Set);var r=e+"__bubble";n.has(r)||(Cs(t,e,2,!1),n.add(r))}function Es(e,t,n){pv.has(e)&&!t&&console.error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',e);var r=0;t&&(r|=4),Cs(n,e,r,t)}function _s(e){if(!e[hv]){e[hv]=!0,Bd.forEach((function(t){"selectionchange"!==t&&(pv.has(t)||Es(t,!1,e),Es(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[hv]||(t[hv]=!0,Es("selectionchange",!1,t))}}function Cs(e,t,n,r){switch(ic(t)){case Od:var o=nc;break;case Ld:o=rc;break;default:o=oc}n=o.bind(null,t,n,e),o=void 0,!Jf||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rs(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===o)break;if(4===l)for(l=r.return;null!==l;){var s=l.tag;if((3===s||4===s)&&l.stateNode.containerInfo===o)return;l=l.return}for(;null!==i;){if(null===(l=pe(i)))return;if(5===(s=l.tag)||6===s||26===s||27===s){r=a=l;continue e}i=i.parentNode}}r=r.return}Lt((function(){var r=a,o=Pt(n),l=[];e:{var i=rh.get(e);if(void 0!==i){var s=ip,u=e;switch(e){case"keypress":if(0===Nt(n))break e;case"keydown":case"keyup":s=wp;break;case"focusin":u="focus",s=pp;break;case"focusout":u="blur",s=pp;break;case"beforeblur":case"afterblur":s=pp;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=dp;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=fp;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=xp;break;case Gp:case Xp:case Jp:s=hp;break;case nh:s=Tp;break;case"scroll":case"scrollend":s=up;break;case"wheel":s=Ep;break;case"copy":case"cut":case"paste":s=mp;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Sp;break;case"toggle":case"beforetoggle":s=_p}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),f=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===f||null!=(m=Dt(h,f))&&c.push(Ps(h,m,p)),d)break;h=h.return}0<c.length&&(i=new s(i,u,null,n,o),l.push({event:i,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Qf||!(u=n.relatedTarget||n.fromElement)||!pe(u)&&!u[Fd])&&(s||i)&&(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?pe(u):null)&&(d=v(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(s=null,u=r),s!==u)){if(c=dp,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Sp,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?i:me(s),p=null==u?i:me(u),(i=new c(m,h+"leave",s,n,o)).target=d,i.relatedTarget=p,m=null,pe(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=Ls(p))h++;for(p=0,m=f;m;m=Ls(m))p++;for(;0<h-p;)c=Ls(c),h--;for(;0<p-h;)f=Ls(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Ls(c),f=Ls(f)}c=null}else c=null;null!==s&&Ds(l,i,s,c,!1),null!==u&&null!==d&&Ds(l,d,u,c,!0)}if("select"===(s=(i=r?me(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var g=$t;else if(Wt(i))if(Up)g=Jt;else{g=Gt;var y=Kt}else!(s=i.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Tt(r.elementType)&&(g=$t):g=Xt;switch(g&&(g=g(e,r))?Bt(l,g,n,o):(y&&y(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&$e(i,"number",i.value)),y=r?me(r):window,e){case"focusin":(Wt(y)||"true"===y.contentEditable)&&(Bp=y,Vp=r,qp=null);break;case"focusout":qp=Vp=Bp=null;break;case"mousedown":$p=!0;break;case"contextmenu":case"mouseup":case"dragend":$p=!1,an(l,n,o);break;case"selectionchange":if(Wp)break;case"keydown":case"keyup":an(l,n,o)}var b;if(Pp)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else Ap?Ut(e,n)&&(k="onCompositionEnd"):"keydown"===e&&n.keyCode===Rp&&(k="onCompositionStart");k&&(Dp&&"ko"!==n.locale&&(Ap||"onCompositionStart"!==k?"onCompositionEnd"===k&&Ap&&(b=It()):(op="value"in(rp=o)?rp.value:rp.textContent,Ap=!0)),0<(y=Os(r,k)).length&&(k=new gp(k,e,null,n,o),l.push({event:k,listeners:y}),b?k.data=b:null!==(b=Ht(n))&&(k.data=b))),(b=Lp?function(e,t){switch(e){case"compositionend":return Ht(t);case"keypress":return t.which!==Ip?null:(zp=!0,Np);case"textInput":return(e=t.data)===Np&&zp?null:e;default:return null}}(e,n):function(e,t){if(Ap)return"compositionend"===e||!Pp&&Ut(e,t)?(e=It(),ap=op=rp=null,Ap=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dp&&"ko"!==t.locale?null:t.data}}(e,n))&&(0<(k=Os(r,"onBeforeInput")).length&&(y=new yp("onBeforeInput","beforeinput",null,n,o),l.push({event:y,listeners:k}),y.data=b)),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var a=ks((o[Ad]||null).action),l=r.submitter;l&&null!==(t=(t=l[Ad]||null)?ks(t.formAction):l.getAttribute("formAction"))&&(a=t,l=null);var i=new ip("action","action",null,r,o);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==cv){var e=l?ws(o,l):new FormData(o),t={pending:!0,data:e,method:o.method,action:a};Object.freeze(t),Jo(n,t,null,e)}}else"function"==typeof a&&(i.preventDefault(),t={pending:!0,data:e=l?ws(o,l):new FormData(o),method:o.method,action:a},Object.freeze(t),Jo(n,t,a,e))},currentTarget:o}]})}}(l,e,r,n,o)}xs(l,t)}))}function Ps(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Os(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=Dt(e,n))&&r.unshift(Ps(e,o,a)),null!=(o=Dt(e,t))&&r.push(Ps(e,o,a))),3===e.tag)return r;e=e.return}return[]}function Ls(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Ds(e,t,n,r,o){for(var a=t._reactName,l=[];null!==n&&n!==r;){var i=n,s=i.alternate,u=i.stateNode;if(i=i.tag,null!==s&&s===r)break;5!==i&&26!==i&&27!==i||null===u||(s=u,o?null!=(u=Dt(n,a))&&l.unshift(Ps(n,u,s)):o||null!=(u=Dt(n,a))&&l.push(Ps(n,u,s))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}function Is(e,t){!function(e,t){var n,r=[];for(n in t)_t(e,n)||r.push(n);t=r.map((function(e){return"`"+e+"`"})).join(", "),1===r.length?console.error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",t,e):1<r.length&&console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",t,e)}(e,t),"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Uf||(Uf=!0,"select"===e&&t.multiple?console.error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",e):console.error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",e));var n={registrationNameDependencies:Vd,possibleRegistrationNames:qd};Tt(e)||"string"==typeof t.is||function(e,t,n){var r,o=[];for(r in t)Ct(e,r,t[r],n)||o.push(r);t=o.map((function(e){return"`"+e+"`"})).join(", "),1===o.length?console.error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",t,e):1<o.length&&console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",t,e)}(e,t,n),t.contentEditable&&!t.suppressContentEditableWarning&&null!=t.children&&console.error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.")}function Ns(e,t,n,r){t!==n&&(n=Fs(n),Fs(t)!==n&&(r[e]=t))}function zs(e,t){!1===t?console.error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",e,e,e):console.error("Expected `%s` listener to be a function, instead got a value of `%s` type.",e,typeof t)}function As(e,t){return(e=e.namespaceURI===Df||e.namespaceURI===If?e.ownerDocument.createElementNS(e.namespaceURI,e.tagName):e.ownerDocument.createElement(e.tagName)).innerHTML=t,e.innerHTML}function Fs(e){return F(e)&&(console.error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",A(e)),M(e)),("string"==typeof e?e:""+e).replace(xv,"\n").replace(Tv,"")}function Ms(e,t){return t=Fs(t),Fs(e)===t}function js(){}function Us(e,t,n,r,o,a){switch(n){case"children":"string"==typeof r?(kt(r,t,!1),"body"===t||"textarea"===t&&""===r||wt(e,r)):"number"!=typeof r&&"bigint"!=typeof r||(kt(""+r,t,!1),"body"!==t&&wt(e,""+r));break;case"className":Te(e,"class",r);break;case"tabIndex":Te(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":Te(e,n,r);break;case"style":xt(e,r,a);break;case"data":if("object"!==t){Te(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){"src"===n?console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',n,n):console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',n,n),e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}j(r,n),r=Rt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if(null!=r&&("form"===t?"formAction"===n?console.error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."):"function"==typeof r&&(null==o.encType&&null==o.method||kv||(kv=!0,console.error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.")),null==o.target||vv||(vv=!0,console.error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."))):"input"===t||"button"===t?"action"===n?console.error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."):"input"!==t||"submit"===o.type||"image"===o.type||yv?"button"!==t||null==o.type||"submit"===o.type||yv?"function"==typeof r&&(null==o.name||bv||(bv=!0,console.error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.')),null==o.formEncType&&null==o.formMethod||kv||(kv=!0,console.error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.")),null==o.formTarget||vv||(vv=!0,console.error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."))):(yv=!0,console.error('A button can only specify a formAction along with type="submit" or no type.')):(yv=!0,console.error('An input can only specify a formAction along with type="submit" or type="image".')):"action"===n?console.error("You can only pass the action prop to <form>."):console.error("You can only pass the formAction prop to <input> or <button>.")),"function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Us(e,t,"name",o.name,o,null),Us(e,t,"formEncType",o.formEncType,o,null),Us(e,t,"formMethod",o.formMethod,o,null),Us(e,t,"formTarget",o.formTarget,o,null)):(Us(e,t,"encType",o.encType,o,null),Us(e,t,"method",o.method,o,null),Us(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}j(r,n),r=Rt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&("function"!=typeof r&&zs(n,r),e.onclick=js);break;case"onScroll":null!=r&&("function"!=typeof r&&zs(n,r),Ts("scroll",e));break;case"onScrollEnd":null!=r&&("function"!=typeof r&&zs(n,r),Ts("scrollend",e));break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");if(null!=(n=r.__html)){if(null!=o.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}j(r,n),n=Rt(""+r),e.setAttributeNS(Ev,"xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?(j(r,n),e.setAttribute(n,""+r)):e.removeAttribute(n);break;case"inert":""!==r||Sv[n]||(Sv[n]=!0,console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",n));case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?(j(r,n),e.setAttribute(n,r)):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?(j(r,n),e.setAttribute(n,r)):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):(j(r,n),e.setAttribute(n,r));break;case"popover":Ts("beforetoggle",e),Ts("toggle",e),xe(e,"popover",r);break;case"xlinkActuate":Ee(e,Ev,"xlink:actuate",r);break;case"xlinkArcrole":Ee(e,Ev,"xlink:arcrole",r);break;case"xlinkRole":Ee(e,Ev,"xlink:role",r);break;case"xlinkShow":Ee(e,Ev,"xlink:show",r);break;case"xlinkTitle":Ee(e,Ev,"xlink:title",r);break;case"xlinkType":Ee(e,Ev,"xlink:type",r);break;case"xmlBase":Ee(e,_v,"xml:base",r);break;case"xmlLang":Ee(e,_v,"xml:lang",r);break;case"xmlSpace":Ee(e,_v,"xml:space",r);break;case"is":null!=a&&console.error('Cannot update the "is" prop after it has been initialized.'),xe(e,"is",r);break;case"innerText":case"textContent":break;case"popoverTarget":wv||null==r||"object"!=typeof r||(wv=!0,console.error("The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",r));default:!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1]?xe(e,n=Et(n),r):Vd.hasOwnProperty(n)&&null!=r&&"function"!=typeof r&&zs(n,r)}}function Hs(e,t,n,r,o,a){switch(n){case"style":xt(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");if(null!=(n=r.__html)){if(null!=o.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&("function"!=typeof r&&zs(n,r),Ts("scroll",e));break;case"onScrollEnd":null!=r&&("function"!=typeof r&&zs(n,r),Ts("scrollend",e));break;case"onClick":null!=r&&("function"!=typeof r&&zs(n,r),e.onclick=js);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Vd.hasOwnProperty(n)?null!=r&&"function"!=typeof r&&zs(n,r):"o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Ad]||null)?a[n]:null)&&e.removeEventListener(t,a,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):xe(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o))}}function Ws(e,t,n){switch(Is(t,n),t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Ts("error",e),Ts("load",e);var r,o=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Us(e,t,r,l,n,null)}}return a&&Us(e,t,"srcSet",n.srcSet,n,null),void(o&&Us(e,t,"src",n.src,n,null));case"input":ke("input",n),Ts("invalid",e);var i=r=l=a=null,s=null,u=null;for(o in n)if(n.hasOwnProperty(o)){var c=n[o];if(null!=c)switch(o){case"name":a=c;break;case"type":l=c;break;case"checked":s=c;break;case"defaultChecked":u=c;break;case"value":r=c;break;case"defaultValue":i=c;break;case"children":case"dangerouslySetInnerHTML":if(null!=c)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:Us(e,t,o,c,n,null)}}return Be(0,n),qe(e,r,i,s,u,l,a,!1),void je(e);case"select":for(a in ke("select",n),Ts("invalid",e),o=l=r=null,n)if(n.hasOwnProperty(a)&&null!=(i=n[a]))switch(a){case"value":r=i;break;case"defaultValue":l=i;break;case"multiple":o=i;default:Us(e,t,a,i,n,null)}return Ge(e,n),t=r,n=l,e.multiple=!!o,void(null!=t?Ke(e,!!o,t,!1):null!=n&&Ke(e,!!o,n,!0));case"textarea":for(l in ke("textarea",n),Ts("invalid",e),r=a=o=null,n)if(n.hasOwnProperty(l)&&null!=(i=n[l]))switch(l){case"value":o=i;break;case"defaultValue":a=i;break;case"children":r=i;break;case"dangerouslySetInnerHTML":if(null!=i)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");break;default:Us(e,t,l,i,n,null)}return Xe(0,n),Ze(e,o,a,r),void je(e);case"option":for(s in Qe(0,n),n)if(n.hasOwnProperty(s)&&null!=(o=n[s]))if("selected"===s)e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o;else Us(e,t,s,o,n,null);return;case"dialog":Ts("beforetoggle",e),Ts("toggle",e),Ts("cancel",e),Ts("close",e);break;case"iframe":case"object":Ts("load",e);break;case"video":case"audio":for(o=0;o<fv.length;o++)Ts(fv[o],e);break;case"image":Ts("error",e),Ts("load",e);break;case"details":Ts("toggle",e);break;case"embed":case"source":case"link":Ts("error",e),Ts("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(u in n)if(n.hasOwnProperty(u)&&null!=(o=n[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Us(e,t,u,o,n,null)}return;default:if(Tt(t)){for(c in n)n.hasOwnProperty(c)&&(void 0!==(o=n[c])&&Hs(e,t,c,o,n,void 0));return}}for(i in n)n.hasOwnProperty(i)&&(null!=(o=n[i])&&Us(e,t,i,o,n,null))}function Bs(e){switch(e){case"class":return"className";case"for":return"htmlFor";default:return e}}function Vs(e){var t={};e=e.style;for(var n=0;n<e.length;n++){var r=e[n];t[r]=e.getPropertyValue(r)}return t}function qs(e,t,n){if(null!=t&&"object"!=typeof t)console.error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");else{var r,o,a=r="";for(o in t)if(t.hasOwnProperty(o)){var l=t[o];null!=l&&"boolean"!=typeof l&&""!==l&&(0===o.indexOf("--")?(U(l,o),r+=a+o+":"+(""+l).trim()):"number"!=typeof l||0===l||Lf.has(o)?(U(l,o),r+=a+o.replace(wf,"-$1").toLowerCase().replace(Sf,"-ms-")+":"+(""+l).trim()):r+=a+o.replace(wf,"-$1").toLowerCase().replace(Sf,"-ms-")+":"+l+"px",a=";")}r=r||null,(t=e.getAttribute("style"))!==r&&(r=Fs(r),Fs(t)!==r&&(n.style=Vs(e)))}}function $s(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(j(r,t),e===""+r)return}Ns(t,e,r,a)}function Qs(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n))){switch(typeof r){case"function":case"symbol":return}if(!r)return}else switch(typeof r){case"function":case"symbol":break;default:if(r)return}Ns(t,e,r,a)}function Ys(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":return}else if(null!=r)switch(typeof r){case"function":case"symbol":break;default:if(j(r,n),e===""+r)return}Ns(t,e,r,a)}function Ks(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return;default:if(isNaN(r))return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(!isNaN(r)&&(j(r,t),e===""+r))return}Ns(t,e,r,a)}function Gs(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(j(r,t),e===(n=Rt(""+r)))return}Ns(t,e,r,a)}function Xs(e,t,n,r){for(var o={},a=new Set,l=e.attributes,i=0;i<l.length;i++)switch(l[i].name.toLowerCase()){case"value":case"checked":case"selected":break;default:a.add(l[i].name)}if(Tt(t)){for(var s in n)if(n.hasOwnProperty(s)){var u=n[s];if(null!=u)if(Vd.hasOwnProperty(s))"function"!=typeof u&&zs(s,u);else if(!0!==n.suppressHydrationWarning)switch(s){case"children":"string"!=typeof u&&"number"!=typeof u||Ns("children",e.textContent,u,o);continue;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":continue;case"dangerouslySetInnerHTML":l=e.innerHTML,null!=(u=u?u.__html:void 0)&&Ns(s,l,u=As(e,u),o);continue;case"style":a.delete(s),qs(e,u,o);continue;case"offsetParent":case"offsetTop":case"offsetLeft":case"offsetWidth":case"offsetHeight":case"isContentEditable":case"outerText":case"outerHTML":a.delete(s.toLowerCase()),console.error("Assignment to read-only property will result in a no-op: `%s`",s);continue;case"className":a.delete("class"),Ns("className",l=Se(e,"class",u),u,o);continue;default:r.context===Uv&&"svg"!==t&&"math"!==t?a.delete(s.toLowerCase()):a.delete(s),Ns(s,l=Se(e,s,u),u,o)}}}else for(u in n)if(n.hasOwnProperty(u)&&null!=(s=n[u]))if(Vd.hasOwnProperty(u))"function"!=typeof s&&zs(u,s);else if(!0!==n.suppressHydrationWarning)switch(u){case"children":"string"!=typeof s&&"number"!=typeof s||Ns("children",e.textContent,s,o);continue;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"value":case"checked":case"selected":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":continue;case"dangerouslySetInnerHTML":l=e.innerHTML,null!=(s=s?s.__html:void 0)&&(l!==(s=As(e,s))&&(o[u]={__html:l}));continue;case"className":$s(e,u,"class",s,a,o);continue;case"tabIndex":$s(e,u,"tabindex",s,a,o);continue;case"style":a.delete(u),qs(e,s,o);continue;case"multiple":a.delete(u),Ns(u,e.multiple,s,o);continue;case"muted":a.delete(u),Ns(u,e.muted,s,o);continue;case"autoFocus":a.delete("autofocus"),Ns(u,e.autofocus,s,o);continue;case"data":if("object"!==t){a.delete(u),Ns(u,l=e.getAttribute("data"),s,o);continue}case"src":case"href":if(!(""!==s||"a"===t&&"href"===u||"object"===t&&"data"===u)){"src"===u?console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',u,u):console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',u,u);continue}Gs(e,u,u,s,a,o);continue;case"action":case"formAction":if(l=e.getAttribute(u),"function"==typeof s){a.delete(u.toLowerCase()),"formAction"===u?(a.delete("name"),a.delete("formenctype"),a.delete("formmethod"),a.delete("formtarget")):(a.delete("enctype"),a.delete("method"),a.delete("target"));continue}if(l===Cv){a.delete(u.toLowerCase()),Ns(u,"function",s,o);continue}Gs(e,u,u.toLowerCase(),s,a,o);continue;case"xlinkHref":Gs(e,u,"xlink:href",s,a,o);continue;case"contentEditable":Ys(e,u,"contenteditable",s,a,o);continue;case"spellCheck":Ys(e,u,"spellcheck",s,a,o);continue;case"draggable":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":Ys(e,u,u,s,a,o);continue;case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":Qs(e,u,u.toLowerCase(),s,a,o);continue;case"capture":case"download":e:{i=e;var c=l=u,d=o;if(a.delete(c),null===(i=i.getAttribute(c)))switch(typeof s){case"undefined":case"function":case"symbol":break e;default:if(!1===s)break e}else if(null!=s)switch(typeof s){case"function":case"symbol":break;case"boolean":if(!0===s&&""===i)break e;break;default:if(j(s,l),i===""+s)break e}Ns(l,i,s,d)}continue;case"cols":case"rows":case"size":case"span":e:{if(i=e,c=l=u,d=o,a.delete(c),null===(i=i.getAttribute(c)))switch(typeof s){case"undefined":case"function":case"symbol":case"boolean":break e;default:if(isNaN(s)||1>s)break e}else if(null!=s)switch(typeof s){case"function":case"symbol":case"boolean":break;default:if(!(isNaN(s)||1>s)&&(j(s,l),i===""+s))break e}Ns(l,i,s,d)}continue;case"rowSpan":Ks(e,u,"rowspan",s,a,o);continue;case"start":Ks(e,u,u,s,a,o);continue;case"xHeight":$s(e,u,"x-height",s,a,o);continue;case"xlinkActuate":$s(e,u,"xlink:actuate",s,a,o);continue;case"xlinkArcrole":$s(e,u,"xlink:arcrole",s,a,o);continue;case"xlinkRole":$s(e,u,"xlink:role",s,a,o);continue;case"xlinkShow":$s(e,u,"xlink:show",s,a,o);continue;case"xlinkTitle":$s(e,u,"xlink:title",s,a,o);continue;case"xlinkType":$s(e,u,"xlink:type",s,a,o);continue;case"xmlBase":$s(e,u,"xml:base",s,a,o);continue;case"xmlLang":$s(e,u,"xml:lang",s,a,o);continue;case"xmlSpace":$s(e,u,"xml:space",s,a,o);continue;case"inert":""!==s||Sv[u]||(Sv[u]=!0,console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",u)),Qs(e,u,u,s,a,o);continue;default:if(!(2<u.length)||"o"!==u[0]&&"O"!==u[0]||"n"!==u[1]&&"N"!==u[1]){i=Et(u),l=!1,r.context===Uv&&"svg"!==t&&"math"!==t?a.delete(i.toLowerCase()):(c=u.toLowerCase(),null!==(c=zf.hasOwnProperty(c)&&zf[c]||null)&&c!==u&&(l=!0,a.delete(c)),a.delete(i));e:if(c=e,d=i,i=s,we(d))if(c.hasAttribute(d))c=c.getAttribute(d),j(i,d),i=c===""+i?i:c;else{switch(typeof i){case"function":case"symbol":break e;case"boolean":if("data-"!==(c=d.toLowerCase().slice(0,5))&&"aria-"!==c)break e}i=void 0===i?void 0:null}else i=void 0;l||Ns(u,i,s,o)}}return 0<a.size&&!0!==n.suppressHydrationWarning&&function(e,t,n){t.forEach((function(t){n[Bs(t)]="style"===t?Vs(e):e.getAttribute(t)}))}(e,a,o),0===Object.keys(o).length?null:o}function Js(e){return 9===e.nodeType?e:e.ownerDocument}function Zs(e){switch(e){case If:return Hv;case Df:return Wv;default:return Uv}}function eu(e,t){if(e===Uv)switch(t){case"svg":return Hv;case"math":return Wv;default:return Uv}return e===Hv&&"foreignObject"===t?Uv:e}function tu(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function nu(e){setTimeout((function(){throw e}))}function ru(e,t,n){switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&e.focus();break;case"img":n.src?e.src=n.src:n.srcSet&&(e.srcset=n.srcSet)}}function ou(e,t,n,r){!function(e,t,n,r){switch(Is(t,r),t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,l=null,i=null,s=null,u=null,c=null;for(p in n){var d=n[p];if(n.hasOwnProperty(p)&&null!=d)switch(p){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(p)||Us(e,t,p,null,r,d)}}for(var f in r){var p=r[f];if(d=n[f],r.hasOwnProperty(f)&&(null!=p||null!=d))switch(f){case"type":a=p;break;case"name":o=p;break;case"checked":u=p;break;case"defaultChecked":c=p;break;case"value":l=p;break;case"defaultValue":i=p;break;case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:p!==d&&Us(e,t,f,p,r,d)}}return t="checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value,r="checkbox"===r.type||"radio"===r.type?null!=r.checked:null!=r.value,t||!r||gv||(console.error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"),gv=!0),!t||r||mv||(console.error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"),mv=!0),void Ve(e,l,i,s,u,c,a,o);case"select":for(a in p=l=i=f=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":p=s;default:r.hasOwnProperty(a)||Us(e,t,a,null,r,s)}for(o in r)if(a=r[o],s=n[o],r.hasOwnProperty(o)&&(null!=a||null!=s))switch(o){case"value":f=a;break;case"defaultValue":i=a;break;case"multiple":l=a;default:a!==s&&Us(e,t,o,a,r,s)}return r=i,t=l,n=p,void(null!=f?Ke(e,!!t,f,!1):!!n!=!!t&&(null!=r?Ke(e,!!t,r,!0):Ke(e,!!t,t?[]:"",!1)));case"textarea":for(i in p=f=null,n)if(o=n[i],n.hasOwnProperty(i)&&null!=o&&!r.hasOwnProperty(i))switch(i){case"value":case"children":break;default:Us(e,t,i,null,r,o)}for(l in r)if(o=r[l],a=n[l],r.hasOwnProperty(l)&&(null!=o||null!=a))switch(l){case"value":f=o;break;case"defaultValue":p=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");break;default:o!==a&&Us(e,t,l,o,r,a)}return void Je(e,f,p);case"option":for(var h in n)f=n[h],n.hasOwnProperty(h)&&null!=f&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Us(e,t,h,null,r,f));for(s in r)f=r[s],p=n[s],!r.hasOwnProperty(s)||f===p||null==f&&null==p||("selected"===s?e.selected=f&&"function"!=typeof f&&"symbol"!=typeof f:Us(e,t,s,f,r,p));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var m in n)f=n[m],n.hasOwnProperty(m)&&null!=f&&!r.hasOwnProperty(m)&&Us(e,t,m,null,r,f);for(u in r)if(f=r[u],p=n[u],r.hasOwnProperty(u)&&f!==p&&(null!=f||null!=p))switch(u){case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:Us(e,t,u,f,r,p)}return;default:if(Tt(t)){for(var g in n)f=n[g],n.hasOwnProperty(g)&&void 0!==f&&!r.hasOwnProperty(g)&&Hs(e,t,g,void 0,r,f);for(c in r)f=r[c],p=n[c],!r.hasOwnProperty(c)||f===p||void 0===f&&void 0===p||Hs(e,t,c,f,r,p);return}}for(var y in n)f=n[y],n.hasOwnProperty(y)&&null!=f&&!r.hasOwnProperty(y)&&Us(e,t,y,null,r,f);for(d in r)f=r[d],p=n[d],!r.hasOwnProperty(d)||f===p||null==f&&null==p||Us(e,t,d,f,r,p)}(e,t,n,r),e[Ad]=r}function au(e){wt(e,"")}function lu(e,t,n){e.nodeValue=n}function iu(e){return"head"===e}function su(e,t){e.removeChild(t)}function uu(e,t){(9===e.nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e).removeChild(t)}function cu(e,t){var n=t,r=0,o=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if((n=a.data)===Ov){if(0<r&&8>r){n=r;var l=e.ownerDocument;if(n&Iv&&_u(l.documentElement),n&Nv&&_u(l.body),n&zv)for(_u(n=l.head),l=n.firstChild;l;){var i=l.nextSibling,s=l.nodeName;l[Wd]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===l.rel.toLowerCase()||n.removeChild(l),l=i}}if(0===o)return e.removeChild(a),void gc(t);o--}else n===Pv||n===Lv||n===Dv?o++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);gc(t)}function du(e){"function"==typeof(e=e.style).setProperty?e.setProperty("display","none","important"):e.display="none"}function fu(e){e.nodeValue=""}function pu(e,t){t=null!=(t=t[jv])&&t.hasOwnProperty("display")?t.display:null,e.style.display=null==t||"boolean"==typeof t?"":(""+t).trim()}function hu(e,t){e.nodeValue=t}function mu(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":mu(n),fe(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gu(e){return e.data===Dv||e.data===Lv&&e.ownerDocument.readyState===Mv}function yu(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if((t=e.data)===Pv||t===Dv||t===Lv||t===Av||t===Fv)break;if(t===Ov)return null}}return e}function bu(e){if(1===e.nodeType){for(var t=e.nodeName.toLowerCase(),n={},r=e.attributes,o=0;o<r.length;o++){var a=r[o];n[Bs(a.name)]="style"===a.name.toLowerCase()?Vs(e):a.value}return{type:t,props:n}}return 8===e.nodeType?{type:"Suspense",props:{}}:e.nodeValue}function vu(e,t,n){return null===n||!0!==n[Rv]?(e.nodeValue===t?e=null:(t=Fs(t),e=Fs(e.nodeValue)===t?null:e.nodeValue),e):null}function ku(e){e=e.nextSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Ov){if(0===t)return yu(e.nextSibling);t--}else n!==Pv&&n!==Dv&&n!==Lv||t++}e=e.nextSibling}return null}function wu(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Pv||n===Dv||n===Lv){if(0===t)return e;t--}else n===Ov&&t++}e=e.previousSibling}return null}function Su(e){gc(e)}function xu(e){gc(e)}function Tu(e,t,n,r,o){switch(o&&vt(e,r.ancestorInfo),t=Js(n),e){case"html":if(!(e=t.documentElement))throw Error("React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.");return e;case"head":if(!(e=t.head))throw Error("React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page.");return e;case"body":if(!(e=t.body))throw Error("React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page.");return e;default:throw Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.")}}function Eu(e,t,n,r){if(!n[Fd]&&he(n)){var o=n.tagName.toLowerCase();console.error("You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",o,o,o)}switch(e){case"html":case"head":case"body":break;default:console.error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.")}for(o=n.attributes;o.length;)n.removeAttributeNode(o[0]);Ws(n,e,t),n[zd]=r,n[Ad]=t}function _u(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);fe(e)}function Cu(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}function Ru(e,t,n){var r=gk;if(r&&"string"==typeof t&&t){var o=We(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),ak.has(o)||(ak.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(Ws(t=r.createElement("link"),"link",e),ye(t),r.head.appendChild(t)))}}function Pu(e,t,n,r){var o=(o=od.current)?Cu(o):null;if(!o)throw Error('"resourceRoot" was expected to exist. This is a bug in React.');switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(n=Lu(n.href),(r=(t=ge(o).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Lu(n.href);var a=ge(o).hoistableStyles,l=a.get(e);if(!l&&(o=o.ownerDocument||o,l={type:"stylesheet",instance:null,count:0,state:{loading:Zv,preload:null}},a.set(e,l),(a=o.querySelector(Du(e)))&&!a._p&&(l.instance=a,l.state.loading=ek|rk),!ok.has(e))){var i={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy};ok.set(e,i),a||function(e,t,n,r){e.querySelector('link[rel="preload"][as="style"]['+t+"]")?r.loading=ek:(t=e.createElement("link"),r.preload=t,t.addEventListener("load",(function(){return r.loading|=ek})),t.addEventListener("error",(function(){return r.loading|=tk})),Ws(t,"link",n),ye(t),e.head.appendChild(t))}(o,e,i,l.state)}if(t&&null===r)throw n="\n\n  - "+Ou(t)+"\n  + "+Ou(n),Error("Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key."+n);return l}if(t&&null!==r)throw n="\n\n  - "+Ou(t)+"\n  + "+Ou(n),Error("Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key."+n);return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(n=Nu(n),(r=(t=ge(o).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error('getResource encountered a type it did not expect: "'+e+'". this is a bug in React.')}}function Ou(e){var t=0,n="<link";return"string"==typeof e.rel?(t++,n+=' rel="'+e.rel+'"'):ld.call(e,"rel")&&(t++,n+=' rel="'+(null===e.rel?"null":"invalid type "+typeof e.rel)+'"'),"string"==typeof e.href?(t++,n+=' href="'+e.href+'"'):ld.call(e,"href")&&(t++,n+=' href="'+(null===e.href?"null":"invalid type "+typeof e.href)+'"'),"string"==typeof e.precedence?(t++,n+=' precedence="'+e.precedence+'"'):ld.call(e,"precedence")&&(t++,n+=" precedence={"+(null===e.precedence?"null":"invalid type "+typeof e.precedence)+"}"),Object.getOwnPropertyNames(e).length>t&&(n+=" ..."),n+" />"}function Lu(e){return'href="'+We(e)+'"'}function Du(e){return'link[rel="stylesheet"]['+e+"]"}function Iu(e){return xc({},e,{"data-precedence":e.precedence,precedence:null})}function Nu(e){return'[src="'+We(e)+'"]'}function zu(e){return"script[async]"+e}function Au(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+We(n.href)+'"]');if(r)return t.instance=r,ye(r),r;var o=xc({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return ye(r=(e.ownerDocument||e).createElement("style")),Ws(r,"style",o),Fu(r,n.precedence,e),t.instance=r;case"stylesheet":o=Lu(n.href);var a=e.querySelector(Du(o));if(a)return t.state.loading|=rk,t.instance=a,ye(a),a;r=Iu(n),(o=ok.get(o))&&Mu(r,o),ye(a=(e.ownerDocument||e).createElement("link"));var l=a;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Ws(a,"link",r),t.state.loading|=rk,Fu(a,n.precedence,e),t.instance=a;case"script":return a=Nu(n.src),(o=e.querySelector(zu(a)))?(t.instance=o,ye(o),o):(r=n,(o=ok.get(a))&&ju(r=xc({},n),o),ye(o=(e=e.ownerDocument||e).createElement("script")),Ws(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error('acquireResource encountered a resource type it did not expect: "'+t.type+'". this is a bug in React.')}else"stylesheet"===t.type&&(t.state.loading&rk)===Zv&&(r=t.instance,t.state.loading|=rk,Fu(r,n.precedence,e));return t.instance}function Fu(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,l=0;l<r.length;l++){var i=r[l];if(i.dataset.precedence===t)a=i;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Mu(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function ju(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}function Uu(e,t,n){if(null===yk){var r=new Map,o=yk=new Map;o.set(n,r)}else(r=(o=yk).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var a=n[o];if(!(a[Wd]||a[zd]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&a.namespaceURI!==If){var l=a.getAttribute(t)||"";l=e+l;var i=r.get(l);i?i.push(a):r.set(l,[a])}}return r}function Hu(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Wu(e){return"stylesheet"!==e.type||(e.state.loading&nk)!==Zv}function Bu(){}function Vu(){if(this.count--,0===this.count)if(this.stylesheets)qu(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}function qu(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,kk=new Map,t.forEach($u,e),kk=null,Vu.call(e))}function $u(e,t){if(!(t.state.loading&rk)){var n=kk.get(e);if(n)var r=n.get(vk);else{n=new Map,kk.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var l=o[a];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(n.set(l.dataset.precedence,l),r=l)}r&&n.set(vk,r)}l=(o=t.instance).getAttribute("data-precedence"),(a=n.get(l)||r)===r&&n.set(vk,o),n.set(l,o),this.count++,r=Vu.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=rk}}function Qu(e,t,n,r,o,a,l,i){for(this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=Kv,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=re(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=re(0),this.hiddenUpdates=re(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map,this.passiveEffectDuration=this.effectDuration=-0,this.memoizedUpdaters=new Set,e=this.pendingUpdatersLaneMap=[],t=0;31>t;t++)e.push(new Set);this._debugRootType=n?"hydrateRoot()":"createRoot()"}function Yu(e,t,n,r,o,a,l,i,s,u,c,d){return e=new Qu(e,t,n,l,i,s,u,d),t=mh,!0===a&&(t|=yh|bh),Td&&(t|=gh),a=h(3,null,null,t),e.current=a,a.stateNode=e,or(t=rr()),e.pooledCache=t,or(t),a.memoizedState={element:r,isDehydrated:n,cache:t},Tr(a),e}function Ku(e){return e?e=dh:dh}function Gu(e,t,n,r,o,a){if(wd&&"function"==typeof wd.onScheduleFiberRoot)try{wd.onScheduleFiberRoot(kd,r,n)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}null!==Sd&&"function"==typeof Sd.markRenderScheduled&&Sd.markRenderScheduled(t),o=Ku(o),null===r.context?r.context=o:r.pendingContext=o,nf&&null!==tf&&!Rk&&(Rk=!0,console.error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",_(tf)||"Unknown")),(r=_r(t)).payload={element:n},null!==(a=void 0===a?null:a)&&("function"!=typeof a&&console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.",a),r.callback=a),null!==(n=Cr(e,r,t))&&(xi(n,e,t),Rr(n,e,t))}function Xu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ju(e,t){Xu(e,t),(e=e.alternate)&&Xu(e,t)}function Zu(e){if(13===e.tag){var t=hn(e,67108864);null!==t&&xi(t,e,67108864),Ju(e,67108864)}}function ec(){return tf}function tc(){for(var e=new Map,t=1,n=0;31>n;n++){var r=G(t);e.set(t,r),t*=2}return e}function nc(e,t,n,r){var o=Gc.T;Gc.T=null;var a=Xc.p;try{Xc.p=Od,oc(e,t,n,r)}finally{Xc.p=a,Gc.T=o}}function rc(e,t,n,r){var o=Gc.T;Gc.T=null;var a=Xc.p;try{Xc.p=Ld,oc(e,t,n,r)}finally{Xc.p=a,Gc.T=o}}function oc(e,t,n,r){if(Ok){var o=ac(r);if(null===o)Rs(e,t,r,Lk,n),sc(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ik=uc(Ik,e,t,n,r,o),!0;case"dragenter":return Nk=uc(Nk,e,t,n,r,o),!0;case"mouseover":return zk=uc(zk,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Ak.set(a,uc(Ak.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Fk.set(a,uc(Fk.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(sc(e,r),4&t&&-1<jk.indexOf(e)){for(;null!==o;){var a=he(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var l=X(a.pendingLanes);if(0!==l){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;l;){var s=1<<31-Ed(l);i.entanglements[1]|=s,l&=~s}cs(a),(Ky&(Uy|Hy))===jy&&(_b=dd()+Cb,ds(0,!1))}}break;case 13:null!==(i=hn(a,2))&&xi(i,a,2),Ri(),Ju(a,2)}if(null===(a=ac(r))&&Rs(e,t,r,Lk,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Rs(e,t,r,null,n)}}function ac(e){return lc(e=Pt(e))}function lc(e){if(Lk=null,null!==(e=pe(e))){var t=v(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=k(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Lk=e,null}function ic(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return Od;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return Ld;case"message":switch(fd()){case pd:return Od;case hd:return Ld;case md:case gd:return Dd;case yd:return Id;default:return Dd}default:return Dd}}function sc(e,t){switch(e){case"focusin":case"focusout":Ik=null;break;case"dragenter":case"dragleave":Nk=null;break;case"mouseover":case"mouseout":zk=null;break;case"pointerover":case"pointerout":Ak.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Fk.delete(t.pointerId)}}function uc(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&(null!==(t=he(t))&&Zu(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function cc(e){var t=pe(e.target);if(null!==t){var n=v(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=k(n)))return e.blockedOn=t,void function(e,t){var n=Xc.p;try{return Xc.p=e,t()}finally{Xc.p=n}}(e.priority,(function(){if(13===n.tag){var e=wi(n);e=ie(e);var t=hn(n,e);null!==t&&xi(t,n,e),Ju(n,e)}}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function dc(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=ac(e.nativeEvent);if(null!==n)return null!==(t=he(n))&&Zu(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n),o=r;null!==Qf&&console.error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."),Qf=o,n.target.dispatchEvent(r),null===Qf&&console.error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."),Qf=null,t.shift()}return!0}function fc(e,t,n){dc(e)&&n.delete(t)}function pc(){Dk=!1,null!==Ik&&dc(Ik)&&(Ik=null),null!==Nk&&dc(Nk)&&(Nk=null),null!==zk&&dc(zk)&&(zk=null),Ak.forEach(fc),Fk.forEach(fc)}function hc(e,t){e.blockedOn===t&&(e.blockedOn=null,Dk||(Dk=!0,kc.unstable_scheduleCallback(kc.unstable_NormalPriority,pc)))}function mc(e){Uk!==e&&(Uk=e,kc.unstable_scheduleCallback(kc.unstable_NormalPriority,(function(){Uk===e&&(Uk=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===lc(r||n))continue;break}var a=he(n);null!==a&&(e.splice(t,3),t-=3,n={pending:!0,data:o,method:n.method,action:r},Object.freeze(n),Jo(a,n,r,o))}})))}function gc(e){function t(t){return hc(t,e)}null!==Ik&&hc(Ik,e),null!==Nk&&hc(Nk,e),null!==zk&&hc(zk,e),Ak.forEach(t),Fk.forEach(t);for(var n=0;n<Mk.length;n++){var r=Mk[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<Mk.length&&null===(n=Mk[0]).blockedOn;)cc(n),null===n.blockedOn&&Mk.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],a=n[r+1],l=o[Ad]||null;if("function"==typeof a)l||mc(n);else if(l){var i=null;if(a&&a.hasAttribute("formAction")){if(o=a,l=a[Ad]||null)i=l.formAction;else if(null!==lc(o))continue}else i=l.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),mc(n)}}}function yc(e){this._internalRoot=e}function bc(e){this._internalRoot=e}function vc(e){e[Fd]&&(e._reactRootContainer?console.error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."):console.error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."))}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var kc=n("./node_modules/scheduler/index.js"),wc=n("./node_modules/react/index.js"),Sc=n("./node_modules/react-dom/index.js"),xc=Object.assign,Tc=Symbol.for("react.element"),Ec=Symbol.for("react.transitional.element"),_c=Symbol.for("react.portal"),Cc=Symbol.for("react.fragment"),Rc=Symbol.for("react.strict_mode"),Pc=Symbol.for("react.profiler"),Oc=Symbol.for("react.provider"),Lc=Symbol.for("react.consumer"),Dc=Symbol.for("react.context"),Ic=Symbol.for("react.forward_ref"),Nc=Symbol.for("react.suspense"),zc=Symbol.for("react.suspense_list"),Ac=Symbol.for("react.memo"),Fc=Symbol.for("react.lazy");Symbol.for("react.scope");var Mc=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var jc=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var Uc,Hc,Wc,Bc,Vc,qc,$c,Qc=Symbol.iterator,Yc=Symbol.for("react.client.reference"),Kc=Array.isArray,Gc=wc.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Xc=Sc.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Jc=Object.freeze({pending:!1,data:null,method:null,action:null}),Zc=[],ed=[],td=-1,nd=C(null),rd=C(null),od=C(null),ad=C(null),ld=Object.prototype.hasOwnProperty,id=kc.unstable_scheduleCallback,sd=kc.unstable_cancelCallback,ud=kc.unstable_shouldYield,cd=kc.unstable_requestPaint,dd=kc.unstable_now,fd=kc.unstable_getCurrentPriorityLevel,pd=kc.unstable_ImmediatePriority,hd=kc.unstable_UserBlockingPriority,md=kc.unstable_NormalPriority,gd=kc.unstable_LowPriority,yd=kc.unstable_IdlePriority,bd=kc.log,vd=kc.unstable_setDisableYieldValue,kd=null,wd=null,Sd=null,xd=!1,Td="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,Ed=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(_d(e)/Cd|0)|0},_d=Math.log,Cd=Math.LN2,Rd=256,Pd=4194304,Od=2,Ld=8,Dd=32,Id=268435456,Nd=Math.random().toString(36).slice(2),zd="__reactFiber$"+Nd,Ad="__reactProps$"+Nd,Fd="__reactContainer$"+Nd,Md="__reactEvents$"+Nd,jd="__reactListeners$"+Nd,Ud="__reactHandles$"+Nd,Hd="__reactResources$"+Nd,Wd="__reactMarker$"+Nd,Bd=new Set,Vd={},qd={},$d={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},Qd=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Yd={},Kd={},Gd=0;_e.__reactDisabledLog=!0;var Xd,Jd,Zd=!1,ef=new("function"==typeof WeakMap?WeakMap:Map),tf=null,nf=!1,rf=/[\n"\\]/g,of=!1,af=!1,lf=!1,sf=!1,uf=!1,cf=!1,df=["value","defaultValue"],ff=!1,pf=/["'&<>\n\t]|^\s|\s$/,hf="address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(" "),mf="applet caption html table td th marquee object template foreignObject desc title".split(" "),gf=mf.concat(["button"]),yf="dd dt li option optgroup p rp rt".split(" "),bf={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null,containerTagInScope:null,implicitRootScope:!1},vf={},kf={animation:"animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(" "),background:"backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(" "),backgroundPosition:["backgroundPositionX","backgroundPositionY"],border:"borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(" "),borderBlockEnd:["borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth"],borderBlockStart:["borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth"],borderBottom:["borderBottomColor","borderBottomStyle","borderBottomWidth"],borderColor:["borderBottomColor","borderLeftColor","borderRightColor","borderTopColor"],borderImage:["borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth"],borderInlineEnd:["borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth"],borderInlineStart:["borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth"],borderLeft:["borderLeftColor","borderLeftStyle","borderLeftWidth"],borderRadius:["borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius"],borderRight:["borderRightColor","borderRightStyle","borderRightWidth"],borderStyle:["borderBottomStyle","borderLeftStyle","borderRightStyle","borderTopStyle"],borderTop:["borderTopColor","borderTopStyle","borderTopWidth"],borderWidth:["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth"],columnRule:["columnRuleColor","columnRuleStyle","columnRuleWidth"],columns:["columnCount","columnWidth"],flex:["flexBasis","flexGrow","flexShrink"],flexFlow:["flexDirection","flexWrap"],font:"fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(" "),fontVariant:"fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(" "),gap:["columnGap","rowGap"],grid:"gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(" "),gridArea:["gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart"],gridColumn:["gridColumnEnd","gridColumnStart"],gridColumnGap:["columnGap"],gridGap:["columnGap","rowGap"],gridRow:["gridRowEnd","gridRowStart"],gridRowGap:["rowGap"],gridTemplate:["gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],listStyle:["listStyleImage","listStylePosition","listStyleType"],margin:["marginBottom","marginLeft","marginRight","marginTop"],marker:["markerEnd","markerMid","markerStart"],mask:"maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(" "),maskPosition:["maskPositionX","maskPositionY"],outline:["outlineColor","outlineStyle","outlineWidth"],overflow:["overflowX","overflowY"],padding:["paddingBottom","paddingLeft","paddingRight","paddingTop"],placeContent:["alignContent","justifyContent"],placeItems:["alignItems","justifyItems"],placeSelf:["alignSelf","justifySelf"],textDecoration:["textDecorationColor","textDecorationLine","textDecorationStyle"],textEmphasis:["textEmphasisColor","textEmphasisStyle"],transition:["transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction"],wordWrap:["overflowWrap"]},wf=/([A-Z])/g,Sf=/^ms-/,xf=/^(?:webkit|moz|o)[A-Z]/,Tf=/^-ms-/,Ef=/-(.)/g,_f=/;\s*$/,Cf={},Rf={},Pf=!1,Of=!1,Lf=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")),Df="http://www.w3.org/1998/Math/MathML",If="http://www.w3.org/2000/svg",Nf=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),zf={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",disablepictureinpicture:"disablePictureInPicture",disableremoteplayback:"disableRemotePlayback",download:"download",draggable:"draggable",enctype:"encType",enterkeyhint:"enterKeyHint",fetchpriority:"fetchPriority",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",imagesizes:"imageSizes",imagesrcset:"imageSrcSet",inert:"inert",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",popover:"popover",popovertarget:"popoverTarget",popovertargetaction:"popoverTargetAction",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",transformorigin:"transformOrigin","transform-origin":"transformOrigin",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},Af={"aria-current":0,"aria-description":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},Ff={},Mf=RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),jf=RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Uf=!1,Hf={},Wf=/^on./,Bf=/^on[^A-Z]/,Vf=RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),qf=RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),$f=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i,Qf=null,Yf=null,Kf=null,Gf=!1,Xf=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Jf=!1;if(Xf)try{var Zf={};Object.defineProperty(Zf,"passive",{get:function(){Jf=!0}}),window.addEventListener("test",Zf,Zf),window.removeEventListener("test",Zf,Zf)}catch(e){Jf=!1}var ep,tp,np,rp=null,op=null,ap=null,lp={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ip=Ft(lp),sp=xc({},lp,{view:0,detail:0}),up=Ft(sp),cp=xc({},sp,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==np&&(np&&"mousemove"===e.type?(ep=e.screenX-np.screenX,tp=e.screenY-np.screenY):tp=ep=0,np=e),ep)},movementY:function(e){return"movementY"in e?e.movementY:tp}}),dp=Ft(cp),fp=Ft(xc({},cp,{dataTransfer:0})),pp=Ft(xc({},sp,{relatedTarget:0})),hp=Ft(xc({},lp,{animationName:0,elapsedTime:0,pseudoElement:0})),mp=Ft(xc({},lp,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),gp=Ft(xc({},lp,{data:0})),yp=gp,bp={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vp={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},wp=Ft(xc({},sp,{key:function(e){if(e.key){var t=bp[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Nt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?vp[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jt,charCode:function(e){return"keypress"===e.type?Nt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Nt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Sp=Ft(xc({},cp,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),xp=Ft(xc({},sp,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jt})),Tp=Ft(xc({},lp,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ep=Ft(xc({},cp,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),_p=Ft(xc({},lp,{newState:0,oldState:0})),Cp=[9,13,27,32],Rp=229,Pp=Xf&&"CompositionEvent"in window,Op=null;Xf&&"documentMode"in document&&(Op=document.documentMode);var Lp=Xf&&"TextEvent"in window&&!Op,Dp=Xf&&(!Pp||Op&&8<Op&&11>=Op),Ip=32,Np=String.fromCharCode(Ip),zp=!1,Ap=!1,Fp={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},Mp=null,jp=null,Up=!1;Xf&&(Up=function(e){if(!Xf)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}("input")&&(!document.documentMode||9<document.documentMode));var Hp="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Wp=Xf&&"documentMode"in document&&11>=document.documentMode,Bp=null,Vp=null,qp=null,$p=!1,Qp={animationend:ln("Animation","AnimationEnd"),animationiteration:ln("Animation","AnimationIteration"),animationstart:ln("Animation","AnimationStart"),transitionrun:ln("Transition","TransitionRun"),transitionstart:ln("Transition","TransitionStart"),transitioncancel:ln("Transition","TransitionCancel"),transitionend:ln("Transition","TransitionEnd")},Yp={},Kp={};Xf&&(Kp=document.createElement("div").style,"AnimationEvent"in window||(delete Qp.animationend.animation,delete Qp.animationiteration.animation,delete Qp.animationstart.animation),"TransitionEvent"in window||delete Qp.transitionend.transition);var Gp=sn("animationend"),Xp=sn("animationiteration"),Jp=sn("animationstart"),Zp=sn("transitionrun"),eh=sn("transitionstart"),th=sn("transitioncancel"),nh=sn("transitionend"),rh=new Map,oh="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");oh.push("scrollEnd");var ah=new WeakMap,lh=1,ih=2,sh=[],uh=0,ch=0,dh={};Object.freeze(dh);var fh=null,ph=null,hh=0,mh=1,gh=2,yh=8,bh=16,vh=64,kh=!1;try{var wh=Object.preventExtensions({});new Map([[wh,null]]),new Set([wh])}catch(e){kh=!0}var Sh=[],xh=0,Th=null,Eh=0,_h=[],Ch=0,Rh=null,Ph=1,Oh="",Lh=null,Dh=null,Ih=!1,Nh=!1,zh=null,Ah=null,Fh=!1,Mh=Error("Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),jh=0;if("object"==typeof performance&&"function"==typeof performance.now)var Uh=performance,Hh=function(){return Uh.now()};else{var Wh=Date;Hh=function(){return Wh.now()}}var Bh=C(null),Vh=C(null),qh={},$h=null,Qh=null,Yh=!1,Kh="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Gh=kc.unstable_scheduleCallback,Xh=kc.unstable_NormalPriority,Jh={$$typeof:Dc,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0,_currentRenderer:null,_currentRenderer2:null},Zh=kc.unstable_now,em=-0,tm=-0,nm=-1.1,rm=-0,om=!1,am=!1,lm=null,im=0,sm=0,um=null,cm=Gc.S;Gc.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===lm){var n=lm=[];im=0,sm=vs(),um={status:"pending",value:void 0,then:function(e){n.push(e)}}}im++,t.then(mr,mr)}(0,t),null!==cm&&cm(e,t)};var dm=C(null),fm={recordUnsafeLifecycleWarnings:function(){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},pm=[],hm=[],mm=[],gm=[],ym=[],bm=[],vm=new Set;fm.recordUnsafeLifecycleWarnings=function(e,t){vm.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&pm.push(e),e.mode&yh&&"function"==typeof t.UNSAFE_componentWillMount&&hm.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&mm.push(e),e.mode&yh&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&gm.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&ym.push(e),e.mode&yh&&"function"==typeof t.UNSAFE_componentWillUpdate&&bm.push(e))},fm.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;0<pm.length&&(pm.forEach((function(t){e.add(_(t)||"Component"),vm.add(t.type)})),pm=[]);var t=new Set;0<hm.length&&(hm.forEach((function(e){t.add(_(e)||"Component"),vm.add(e.type)})),hm=[]);var n=new Set;0<mm.length&&(mm.forEach((function(e){n.add(_(e)||"Component"),vm.add(e.type)})),mm=[]);var r=new Set;0<gm.length&&(gm.forEach((function(e){r.add(_(e)||"Component"),vm.add(e.type)})),gm=[]);var o=new Set;0<ym.length&&(ym.forEach((function(e){o.add(_(e)||"Component"),vm.add(e.type)})),ym=[]);var a=new Set;if(0<bm.length&&(bm.forEach((function(e){a.add(_(e)||"Component"),vm.add(e.type)})),bm=[]),0<t.size){var l=p(t);console.error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",l)}0<r.size&&(l=p(r),console.error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",l)),0<a.size&&(l=p(a),console.error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",l)),0<e.size&&(l=p(e),console.warn("componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",l)),0<n.size&&(l=p(n),console.warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",l)),0<o.size&&(l=p(o),console.warn("componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",l))};var km=new Map,wm=new Set;fm.recordLegacyContextWarning=function(e,t){for(var n=null,r=e;null!==r;)r.mode&yh&&(n=r),r=r.return;null===n?console.error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."):!wm.has(e.type)&&(r=km.get(n),null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===r&&(r=[],km.set(n,r)),r.push(e))},fm.flushLegacyContextWarning=function(){km.forEach((function(e){if(0!==e.length){var t=e[0],n=new Set;e.forEach((function(e){n.add(_(e)||"Component"),wm.add(e.type)}));var r=p(n);ze(t,(function(){console.error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",r)}))}}))},fm.discardPendingWarnings=function(){pm=[],hm=[],mm=[],gm=[],ym=[],bm=[],km=new Map};var Sm,xm=Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."),Tm=Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),Em=Error("Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."),_m={then:function(){console.error('Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.')}},Cm=null,Rm=!1,Pm=0,Om=1,Lm=2,Dm=4,Im=8,Nm=0,zm=1,Am=2,Fm=3,Mm=!1,jm=!1,Um=null,Hm=!1,Wm=C(null),Bm=C(0),Vm=new Set,qm=new Set,$m=new Set,Qm=new Set,Ym=0,Km=null,Gm=null,Xm=null,Jm=!1,Zm=!1,eg=!1,tg=0,ng=0,rg=null,og=0,ag=25,lg=null,ig=null,sg=-1,ug=!1,cg={readContext:er,use:eo,useCallback:Wr,useContext:Wr,useEffect:Wr,useImperativeHandle:Wr,useLayoutEffect:Wr,useInsertionEffect:Wr,useMemo:Wr,useReducer:Wr,useRef:Wr,useState:Wr,useDebugValue:Wr,useDeferredValue:Wr,useTransition:Wr,useSyncExternalStore:Wr,useId:Wr,useHostTransitionStatus:Wr,useFormState:Wr,useActionState:Wr,useOptimistic:Wr,useMemoCache:Wr,useCacheRefresh:Wr},dg=null,fg=null,pg=null,hg=null,mg=null,gg=null,yg=null;dg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return lg="useCallback",Mr(),Ur(t),Wo(e,t)},useContext:function(e){return lg="useContext",Mr(),er(e)},useEffect:function(e,t){return lg="useEffect",Mr(),Ur(t),Fo(e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",Mr(),Ur(n),Uo(e,t,n)},useInsertionEffect:function(e,t){lg="useInsertionEffect",Mr(),Ur(t),zo(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",Mr(),Ur(t),Mo(e,t)},useMemo:function(e,t){lg="useMemo",Mr(),Ur(t);var n=Gc.H;Gc.H=mg;try{return Vo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",Mr();var r=Gc.H;Gc.H=mg;try{return ro(e,t,n)}finally{Gc.H=r}},useRef:function(e){return lg="useRef",Mr(),No(e)},useState:function(e){lg="useState",Mr();var t=Gc.H;Gc.H=mg;try{return go(e)}finally{Gc.H=t}},useDebugValue:function(){lg="useDebugValue",Mr()},useDeferredValue:function(e,t){return lg="useDeferredValue",Mr(),$o(e,t)},useTransition:function(){return lg="useTransition",Mr(),ta()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",Mr(),io(e,t,n)},useId:function(){return lg="useId",Mr(),aa()},useFormState:function(e,t){return lg="useFormState",Mr(),Hr(),Ro(e,t)},useActionState:function(e,t){return lg="useActionState",Mr(),Ro(e,t)},useOptimistic:function(e){return lg="useOptimistic",Mr(),yo(e)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return lg="useCacheRefresh",Mr(),la()}},fg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return lg="useCallback",jr(),Wo(e,t)},useContext:function(e){return lg="useContext",jr(),er(e)},useEffect:function(e,t){return lg="useEffect",jr(),Fo(e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",jr(),Uo(e,t,n)},useInsertionEffect:function(e,t){lg="useInsertionEffect",jr(),zo(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",jr(),Mo(e,t)},useMemo:function(e,t){lg="useMemo",jr();var n=Gc.H;Gc.H=mg;try{return Vo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",jr();var r=Gc.H;Gc.H=mg;try{return ro(e,t,n)}finally{Gc.H=r}},useRef:function(e){return lg="useRef",jr(),No(e)},useState:function(e){lg="useState",jr();var t=Gc.H;Gc.H=mg;try{return go(e)}finally{Gc.H=t}},useDebugValue:function(){lg="useDebugValue",jr()},useDeferredValue:function(e,t){return lg="useDeferredValue",jr(),$o(e,t)},useTransition:function(){return lg="useTransition",jr(),ta()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",jr(),io(e,t,n)},useId:function(){return lg="useId",jr(),aa()},useActionState:function(e,t){return lg="useActionState",jr(),Ro(e,t)},useFormState:function(e,t){return lg="useFormState",jr(),Hr(),Ro(e,t)},useOptimistic:function(e){return lg="useOptimistic",jr(),yo(e)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return lg="useCacheRefresh",jr(),la()}},pg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return lg="useCallback",jr(),Bo(e,t)},useContext:function(e){return lg="useContext",jr(),er(e)},useEffect:function(e,t){lg="useEffect",jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return lg="useInsertionEffect",jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){lg="useMemo",jr();var n=Gc.H;Gc.H=gg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",jr();var r=Gc.H;Gc.H=gg;try{return oo(e)}finally{Gc.H=r}},useRef:function(){return lg="useRef",jr(),Jr().memoizedState},useState:function(){lg="useState",jr();var e=Gc.H;Gc.H=gg;try{return oo(no)}finally{Gc.H=e}},useDebugValue:function(){lg="useDebugValue",jr()},useDeferredValue:function(e,t){return lg="useDeferredValue",jr(),Qo(e,t)},useTransition:function(){return lg="useTransition",jr(),na()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",jr(),so(e,t,n)},useId:function(){return lg="useId",jr(),Jr().memoizedState},useFormState:function(e){return lg="useFormState",jr(),Hr(),Po(e)},useActionState:function(e){return lg="useActionState",jr(),Po(e)},useOptimistic:function(e,t){return lg="useOptimistic",jr(),bo(e,t)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return lg="useCacheRefresh",jr(),Jr().memoizedState}},hg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return lg="useCallback",jr(),Bo(e,t)},useContext:function(e){return lg="useContext",jr(),er(e)},useEffect:function(e,t){lg="useEffect",jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return lg="useInsertionEffect",jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){lg="useMemo",jr();var n=Gc.H;Gc.H=yg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",jr();var r=Gc.H;Gc.H=yg;try{return lo(e)}finally{Gc.H=r}},useRef:function(){return lg="useRef",jr(),Jr().memoizedState},useState:function(){lg="useState",jr();var e=Gc.H;Gc.H=yg;try{return lo(no)}finally{Gc.H=e}},useDebugValue:function(){lg="useDebugValue",jr()},useDeferredValue:function(e,t){return lg="useDeferredValue",jr(),Yo(e,t)},useTransition:function(){return lg="useTransition",jr(),ra()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",jr(),so(e,t,n)},useId:function(){return lg="useId",jr(),Jr().memoizedState},useFormState:function(e){return lg="useFormState",jr(),Hr(),Do(e)},useActionState:function(e){return lg="useActionState",jr(),Do(e)},useOptimistic:function(e,t){return lg="useOptimistic",jr(),ko(e,t)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return lg="useCacheRefresh",jr(),Jr().memoizedState}},mg={readContext:function(e){return d(),er(e)},use:function(e){return c(),eo(e)},useCallback:function(e,t){return lg="useCallback",c(),Mr(),Wo(e,t)},useContext:function(e){return lg="useContext",c(),Mr(),er(e)},useEffect:function(e,t){return lg="useEffect",c(),Mr(),Fo(e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",c(),Mr(),Uo(e,t,n)},useInsertionEffect:function(e,t){lg="useInsertionEffect",c(),Mr(),zo(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",c(),Mr(),Mo(e,t)},useMemo:function(e,t){lg="useMemo",c(),Mr();var n=Gc.H;Gc.H=mg;try{return Vo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",c(),Mr();var r=Gc.H;Gc.H=mg;try{return ro(e,t,n)}finally{Gc.H=r}},useRef:function(e){return lg="useRef",c(),Mr(),No(e)},useState:function(e){lg="useState",c(),Mr();var t=Gc.H;Gc.H=mg;try{return go(e)}finally{Gc.H=t}},useDebugValue:function(){lg="useDebugValue",c(),Mr()},useDeferredValue:function(e,t){return lg="useDeferredValue",c(),Mr(),$o(e,t)},useTransition:function(){return lg="useTransition",c(),Mr(),ta()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",c(),Mr(),io(e,t,n)},useId:function(){return lg="useId",c(),Mr(),aa()},useFormState:function(e,t){return lg="useFormState",c(),Mr(),Ro(e,t)},useActionState:function(e,t){return lg="useActionState",c(),Mr(),Ro(e,t)},useOptimistic:function(e){return lg="useOptimistic",c(),Mr(),yo(e)},useMemoCache:function(e){return c(),to(e)},useHostTransitionStatus:oa,useCacheRefresh:function(){return lg="useCacheRefresh",Mr(),la()}},gg={readContext:function(e){return d(),er(e)},use:function(e){return c(),eo(e)},useCallback:function(e,t){return lg="useCallback",c(),jr(),Bo(e,t)},useContext:function(e){return lg="useContext",c(),jr(),er(e)},useEffect:function(e,t){lg="useEffect",c(),jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",c(),jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return lg="useInsertionEffect",c(),jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",c(),jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){lg="useMemo",c(),jr();var n=Gc.H;Gc.H=gg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",c(),jr();var r=Gc.H;Gc.H=gg;try{return oo(e)}finally{Gc.H=r}},useRef:function(){return lg="useRef",c(),jr(),Jr().memoizedState},useState:function(){lg="useState",c(),jr();var e=Gc.H;Gc.H=gg;try{return oo(no)}finally{Gc.H=e}},useDebugValue:function(){lg="useDebugValue",c(),jr()},useDeferredValue:function(e,t){return lg="useDeferredValue",c(),jr(),Qo(e,t)},useTransition:function(){return lg="useTransition",c(),jr(),na()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",c(),jr(),so(e,t,n)},useId:function(){return lg="useId",c(),jr(),Jr().memoizedState},useFormState:function(e){return lg="useFormState",c(),jr(),Po(e)},useActionState:function(e){return lg="useActionState",c(),jr(),Po(e)},useOptimistic:function(e,t){return lg="useOptimistic",c(),jr(),bo(e,t)},useMemoCache:function(e){return c(),to(e)},useHostTransitionStatus:oa,useCacheRefresh:function(){return lg="useCacheRefresh",jr(),Jr().memoizedState}},yg={readContext:function(e){return d(),er(e)},use:function(e){return c(),eo(e)},useCallback:function(e,t){return lg="useCallback",c(),jr(),Bo(e,t)},useContext:function(e){return lg="useContext",c(),jr(),er(e)},useEffect:function(e,t){lg="useEffect",c(),jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return lg="useImperativeHandle",c(),jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return lg="useInsertionEffect",c(),jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return lg="useLayoutEffect",c(),jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){lg="useMemo",c(),jr();var n=Gc.H;Gc.H=gg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){lg="useReducer",c(),jr();var r=Gc.H;Gc.H=gg;try{return lo(e)}finally{Gc.H=r}},useRef:function(){return lg="useRef",c(),jr(),Jr().memoizedState},useState:function(){lg="useState",c(),jr();var e=Gc.H;Gc.H=gg;try{return lo(no)}finally{Gc.H=e}},useDebugValue:function(){lg="useDebugValue",c(),jr()},useDeferredValue:function(e,t){return lg="useDeferredValue",c(),jr(),Yo(e,t)},useTransition:function(){return lg="useTransition",c(),jr(),ra()},useSyncExternalStore:function(e,t,n){return lg="useSyncExternalStore",c(),jr(),so(e,t,n)},useId:function(){return lg="useId",c(),jr(),Jr().memoizedState},useFormState:function(e){return lg="useFormState",c(),jr(),Do(e)},useActionState:function(e){return lg="useActionState",c(),jr(),Do(e)},useOptimistic:function(e,t){return lg="useOptimistic",c(),jr(),ko(e,t)},useMemoCache:function(e){return c(),to(e)},useHostTransitionStatus:oa,useCacheRefresh:function(){return lg="useCacheRefresh",jr(),Jr().memoizedState}};var bg,vg={"react-stack-bottom-frame":function(e,t,n){var r=nf;nf=!0;try{return e(t,n)}finally{nf=r}}},kg=vg["react-stack-bottom-frame"].bind(vg),wg={"react-stack-bottom-frame":function(e){var t=nf;nf=!0;try{return e.render()}finally{nf=t}}},Sg=wg["react-stack-bottom-frame"].bind(wg),xg={"react-stack-bottom-frame":function(e,t){try{t.componentDidMount()}catch(t){Zi(e,e.return,t)}}},Tg=xg["react-stack-bottom-frame"].bind(xg),Eg={"react-stack-bottom-frame":function(e,t,n,r,o){try{t.componentDidUpdate(n,r,o)}catch(t){Zi(e,e.return,t)}}},_g=Eg["react-stack-bottom-frame"].bind(Eg),Cg={"react-stack-bottom-frame":function(e,t){var n=t.stack;e.componentDidCatch(t.value,{componentStack:null!==n?n:""})}},Rg=Cg["react-stack-bottom-frame"].bind(Cg),Pg={"react-stack-bottom-frame":function(e,t,n){try{n.componentWillUnmount()}catch(n){Zi(e,t,n)}}},Og=Pg["react-stack-bottom-frame"].bind(Pg),Lg={"react-stack-bottom-frame":function(e){null!=e.resourceKind&&console.error("Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",e.resourceKind);var t=e.create;return e=e.inst,t=t(),e.destroy=t}},Dg=Lg["react-stack-bottom-frame"].bind(Lg),Ig={"react-stack-bottom-frame":function(e,t,n){try{n()}catch(n){Zi(e,t,n)}}},Ng=Ig["react-stack-bottom-frame"].bind(Ig),zg={"react-stack-bottom-frame":function(e){return(0,e._init)(e._payload)}},Ag=zg["react-stack-bottom-frame"].bind(zg),Fg=null,Mg=0,jg=null,Ug=bg=!1,Hg={},Wg={},Bg={};u=function(e,t,n){if(null!==n&&"object"==typeof n&&n._store&&(!n._store.validated&&null==n.key||2===n._store.validated)){if("object"!=typeof n._store)throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");n._store.validated=1;var r=_(e),o=r||"null";if(!Hg[o]){Hg[o]=!0,n=n._owner,e=e._debugOwner;var a="";e&&"number"==typeof e.tag&&(o=_(e))&&(a="\n\nCheck the render method of `"+o+"`."),a||r&&(a="\n\nCheck the top-level render call using <"+r+">.");var l="";null!=n&&e!==n&&(r=null,"number"==typeof n.tag?r=_(n):"string"==typeof n.name&&(r=n.name),r&&(l=" It was passed a child from "+r+".")),ze(t,(function(){console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',a,l)}))}}};var Vg=Sa(!0),qg=Sa(!1),$g=C(null),Qg=null,Yg=1,Kg=2,Gg=C(0),Xg={},Jg=new Set,Zg=new Set,ey=new Set,ty=new Set,ny=new Set,ry=new Set,oy=new Set,ay=new Set,ly=new Set,iy=new Set;Object.freeze(Xg);var sy={enqueueSetState:function(e,t,n){var r=wi(e=e._reactInternals),o=_r(r);o.payload=t,null!=n&&(Ra(n),o.callback=n),null!==(t=Cr(e,o,r))&&(xi(t,e,r),Rr(t,e,r)),K(e,r)},enqueueReplaceState:function(e,t,n){var r=wi(e=e._reactInternals),o=_r(r);o.tag=zm,o.payload=t,null!=n&&(Ra(n),o.callback=n),null!==(t=Cr(e,o,r))&&(xi(t,e,r),Rr(t,e,r)),K(e,r)},enqueueForceUpdate:function(e,t){var n=wi(e=e._reactInternals),r=_r(n);r.tag=Am,null!=t&&(Ra(t),r.callback=t),null!==(t=Cr(e,r,n))&&(xi(t,e,n),Rr(t,e,n)),null!==Sd&&"function"==typeof Sd.markForceUpdateScheduled&&Sd.markForceUpdateScheduled(e,n)}},uy="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)},cy=null,dy=null,fy=Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."),py=!1,hy={},my={},gy={},yy={},by=!1,vy={},ky={},wy={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null},Sy=!1,xy=null;xy=new Set;var Ty=!1,Ey=!1,_y=!1,Cy="function"==typeof WeakSet?WeakSet:Set,Ry=null,Py=null,Oy=null,Ly=null,Dy=!1,Iy=null,Ny=8192,zy={getCacheForType:function(e){var t=er(Jh),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n},getOwner:function(){return tf}};if("function"==typeof Symbol&&Symbol.for){var Ay=Symbol.for;Ay("selector.component"),Ay("selector.has_pseudo_class"),Ay("selector.role"),Ay("selector.test_id"),Ay("selector.text")}var Fy=[],My="function"==typeof WeakMap?WeakMap:Map,jy=0,Uy=2,Hy=4,Wy=0,By=1,Vy=2,qy=3,$y=4,Qy=6,Yy=5,Ky=jy,Gy=null,Xy=null,Jy=0,Zy=0,eb=1,tb=2,nb=3,rb=4,ob=5,ab=6,lb=7,ib=8,sb=9,ub=Zy,cb=null,db=!1,fb=!1,pb=!1,hb=0,mb=Wy,gb=0,yb=0,bb=0,vb=0,kb=0,wb=null,Sb=null,xb=!1,Tb=0,Eb=300,_b=1/0,Cb=500,Rb=null,Pb=null,Ob=0,Lb=1,Db=2,Ib=0,Nb=1,zb=2,Ab=3,Fb=4,Mb=5,jb=0,Ub=null,Hb=null,Wb=0,Bb=0,Vb=null,qb=null,$b=50,Qb=0,Yb=null,Kb=!1,Gb=!1,Xb=50,Jb=0,Zb=null,ev=!1,tv=null,nv=!1,rv=new Set,ov=null,av=null,lv=!1,iv=!1,sv=!1,uv=!1,cv=0,dv={};!function(){for(var e=0;e<oh.length;e++){var t=oh[e];un(t.toLowerCase(),"on"+(t=t[0].toUpperCase()+t.slice(1)))}un(Gp,"onAnimationEnd"),un(Xp,"onAnimationIteration"),un(Jp,"onAnimationStart"),un("dblclick","onDoubleClick"),un("focusin","onFocus"),un("focusout","onBlur"),un(Zp,"onTransitionRun"),un(eh,"onTransitionStart"),un(th,"onTransitionCancel"),un(nh,"onTransitionEnd")}(),ve("onMouseEnter",["mouseout","mouseover"]),ve("onMouseLeave",["mouseout","mouseover"]),ve("onPointerEnter",["pointerout","pointerover"]),ve("onPointerLeave",["pointerout","pointerover"]),be("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),be("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),be("onBeforeInput",["compositionend","keypress","textInput","paste"]),be("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),be("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),be("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var fv="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),pv=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(fv)),hv="_reactListening"+Math.random().toString(36).slice(2),mv=!1,gv=!1,yv=!1,bv=!1,vv=!1,kv=!1,wv=!1,Sv={},xv=/\r\n?/g,Tv=/\u0000|\uFFFD/g,Ev="http://www.w3.org/1999/xlink",_v="http://www.w3.org/XML/1998/namespace",Cv="javascript:throw new Error('React form unexpectedly submitted.')",Rv="suppressHydrationWarning",Pv="$",Ov="/$",Lv="$?",Dv="$!",Iv=1,Nv=2,zv=4,Av="F!",Fv="F",Mv="complete",jv="style",Uv=0,Hv=1,Wv=2,Bv=null,Vv=null,qv={dialog:!0,webview:!0},$v=null,Qv="function"==typeof setTimeout?setTimeout:void 0,Yv="function"==typeof clearTimeout?clearTimeout:void 0,Kv=-1,Gv="function"==typeof Promise?Promise:void 0,Xv="function"==typeof queueMicrotask?queueMicrotask:void 0!==Gv?function(e){return Gv.resolve(null).then(e).catch(nu)}:Qv,Jv=null,Zv=0,ek=1,tk=2,nk=3,rk=4,ok=new Map,ak=new Set,lk=Xc.d;Xc.d={f:function(){var e=lk.f(),t=Ri();return e||t},r:function(e){var t=he(e);null!==t&&5===t.tag&&"form"===t.type?ea(t):lk.r(e)},D:function(e){lk.D(e),Ru("dns-prefetch",e,null)},C:function(e,t){lk.C(e,t),Ru("preconnect",e,t)},L:function(e,t,n){lk.L(e,t,n);var r=gk;if(r&&e&&t){var o='link[rel="preload"][as="'+We(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+We(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+We(n.imageSizes)+'"]')):o+='[href="'+We(e)+'"]';var a=o;switch(t){case"style":a=Lu(e);break;case"script":a=Nu(e)}ok.has(a)||(e=xc({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),ok.set(a,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(Du(a))||"script"===t&&r.querySelector(zu(a))||(Ws(t=r.createElement("link"),"link",e),ye(t),r.head.appendChild(t)))}},m:function(e,t){lk.m(e,t);var n=gk;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+We(r)+'"][href="'+We(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Nu(e)}if(!ok.has(a)&&(e=xc({rel:"modulepreload",href:e},t),ok.set(a,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(zu(a)))return}Ws(r=n.createElement("link"),"link",e),ye(r),n.head.appendChild(r)}}},X:function(e,t){lk.X(e,t);var n=gk;if(n&&e){var r=ge(n).hoistableScripts,o=Nu(e),a=r.get(o);a||((a=n.querySelector(zu(o)))||(e=xc({src:e,async:!0},t),(t=ok.get(o))&&ju(e,t),ye(a=n.createElement("script")),Ws(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,t,n){lk.S(e,t,n);var r=gk;if(r&&e){var o=ge(r).hoistableStyles,a=Lu(e);t=t||"default";var l=o.get(a);if(!l){var i={loading:Zv,preload:null};if(l=r.querySelector(Du(a)))i.loading=ek|rk;else{e=xc({rel:"stylesheet",href:e,"data-precedence":t},n),(n=ok.get(a))&&Mu(e,n);var s=l=r.createElement("link");ye(s),Ws(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){i.loading|=ek})),s.addEventListener("error",(function(){i.loading|=tk})),i.loading|=rk,Fu(l,t,r)}l={type:"stylesheet",instance:l,count:1,state:i},o.set(a,l)}}},M:function(e,t){lk.M(e,t);var n=gk;if(n&&e){var r=ge(n).hoistableScripts,o=Nu(e),a=r.get(o);a||((a=n.querySelector(zu(o)))||(e=xc({src:e,async:!0,type:"module"},t),(t=ok.get(o))&&ju(e,t),ye(a=n.createElement("script")),Ws(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var ik,sk,uk,ck,dk,fk,pk,hk,mk,gk="undefined"==typeof document?null:document,yk=null,bk=null,vk=null,kk=null,wk=Jc,Sk={$$typeof:Dc,Provider:null,Consumer:null,_currentValue:wk,_currentValue2:wk,_threadCount:0},xk="%c%s%c ",Tk="background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px",Ek="",_k=" ",Ck=Function.prototype.bind,Rk=!1;ik=function(t,n,o,a){null!==(n=e(t,n))&&(o=r(n.memoizedState,o,0,a),n.memoizedState=o,n.baseState=o,t.memoizedProps=xc({},t.memoizedProps),null!==(o=hn(t,2))&&xi(o,t,2))},sk=function(t,n,r){null!==(n=e(t,n))&&(r=l(n.memoizedState,r,0),n.memoizedState=r,n.baseState=r,t.memoizedProps=xc({},t.memoizedProps),null!==(r=hn(t,2))&&xi(r,t,2))},uk=function(t,n,r,a){null!==(n=e(t,n))&&(r=o(n.memoizedState,r,a),n.memoizedState=r,n.baseState=r,t.memoizedProps=xc({},t.memoizedProps),null!==(r=hn(t,2))&&xi(r,t,2))},ck=function(e,t,n){e.pendingProps=r(e.memoizedProps,t,0,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=hn(e,2))&&xi(t,e,2)},dk=function(e,t){e.pendingProps=l(e.memoizedProps,t,0),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=hn(e,2))&&xi(t,e,2)},fk=function(e,t,n){e.pendingProps=o(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=hn(e,2))&&xi(t,e,2)},pk=function(e){var t=hn(e,2);null!==t&&xi(t,e,2)},hk=function(e){s=e},mk=function(e){i=e};var Pk,Ok=!0,Lk=null,Dk=!1,Ik=null,Nk=null,zk=null,Ak=new Map,Fk=new Map,Mk=[],jk="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" "),Uk=null;if(bc.prototype.render=yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error("Cannot update an unmounted root.");var n=arguments;"function"==typeof n[1]?console.error("does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."):b(n[1])?console.error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."):void 0!==n[1]&&console.error("You passed a second argument to root.render(...) but it only accepts one argument."),n=e;var r=t.current;Gu(r,wi(r),n,t,null,null)},bc.prototype.unmount=yc.prototype.unmount=function(){var e=arguments;if("function"==typeof e[0]&&console.error("does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."),null!==(e=this._internalRoot)){this._internalRoot=null;var t=e.containerInfo;(Ky&(Uy|Hy))!==jy&&console.error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."),Gu(e.current,2,null,e,null,null),Ri(),t[Fd]=null}},bc.prototype.unstable_scheduleHydration=function(e){if(e){var t=de();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Mk.length&&0!==t&&t<Mk[n].priority;n++);Mk.splice(n,0,e),0===n&&cc(e)}},function(){var e=wc.version;if("19.1.0"!==e)throw Error('Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      '+e+"\n  - react-dom:  19.1.0\nLearn more: https://react.dev/warnings/version-mismatch")}(),"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"),Xc.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error("Unable to find node on an unmounted component.");throw e=Object.keys(e).join(","),Error("Argument appears to not be a ReactComponent. Keys: "+e)}return e=function(e){var t=e.alternate;if(!t){if(null===(t=v(e)))throw Error("Unable to find node on an unmounted component.");return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return w(o),e;if(a===r)return w(o),t;a=a.sibling}throw Error("Unable to find node on an unmounted component.")}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,i=o.child;i;){if(i===n){l=!0,n=o,r=a;break}if(i===r){l=!0,r=o,n=a;break}i=i.sibling}if(!l){for(i=a.child;i;){if(i===n){l=!0,n=a,r=o;break}if(i===r){l=!0,r=a,n=o;break}i=i.sibling}if(!l)throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(n.alternate!==r)throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(3!==n.tag)throw Error("Unable to find node on an unmounted component.");return n.stateNode.current===n?e:t}(t),e=null===(e=null!==e?S(e):null)?null:e.stateNode},(Pk={bundleType:1,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:Gc,reconcilerVersion:"19.1.0"}).overrideHookState=ik,Pk.overrideHookStateDeletePath=sk,Pk.overrideHookStateRenamePath=uk,Pk.overrideProps=ck,Pk.overridePropsDeletePath=dk,Pk.overridePropsRenamePath=fk,Pk.scheduleUpdate=pk,Pk.setErrorHandler=hk,Pk.setSuspenseHandler=mk,Pk.scheduleRefresh=g,Pk.scheduleRoot=m,Pk.setRefreshHandler=y,Pk.getCurrentFiber=ec,Pk.getLaneLabelMap=tc,Pk.injectProfilingHooks=B,!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return console.error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"),!0;try{kd=t.inject(e),wd=t}catch(e){console.error("React instrumentation encountered an error: %s.",e)}return!!t.checkDCE}(Pk)&&Xf&&window.top===window.self&&(-1<navigator.userAgent.indexOf("Chrome")&&-1===navigator.userAgent.indexOf("Edge")||-1<navigator.userAgent.indexOf("Firefox"))){var Hk=window.location.protocol;/^(https?|file):$/.test(Hk)&&console.info("%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools"+("file:"===Hk?"\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq":""),"font-weight:bold")}t.createRoot=function(e,t){if(!b(e))throw Error("Target container is not a DOM element.");vc(e);var n=!1,r="",o=Ia,a=Na,l=za;return null!=t&&(t.hydrate?console.warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."):"object"==typeof t&&null!==t&&t.$$typeof===Ec&&console.error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"),!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(l=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Yu(e,1,!1,null,0,n,r,o,a,l,0,null),e[Fd]=t.current,_s(e),new yc(t)},t.hydrateRoot=function(e,t,n){if(!b(e))throw Error("Target container is not a DOM element.");vc(e),void 0===t&&console.error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");var r=!1,o="",a=Ia,l=Na,i=za,s=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(l=n.onCaughtError),void 0!==n.onRecoverableError&&(i=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(s=n.formState)),(t=Yu(e,1,!0,t,0,r,o,a,l,i,0,s)).context=Ku(null),(o=_r(r=ie(r=wi(n=t.current)))).callback=null,Cr(n,o,r),n=r,t.current.lanes=n,oe(t,n),cs(t),e[Fd]=t.current,_s(e),new bc(t)},t.version="19.1.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react-dom/cjs/react-dom.development.js":(e,t,n)=>{!function(){function e(){}function r(e){return""+e}function o(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}function a(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":'something with type "'+typeof e+'"'}function l(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":"string"==typeof e?JSON.stringify(e):"number"==typeof e?"`"+e+"`":'something with type "'+typeof e+'"'}function i(){var e=d.H;return null===e&&console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."),e}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var s=n("./node_modules/react/index.js"),u={d:{f:e,r:function(){throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.")},D:e,C:e,L:e,m:e,X:e,S:e,M:e},p:0,findDOMNode:null},c=Symbol.for("react.portal"),d=s.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=u,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error("Target container is not a DOM element.");return function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;try{r(o);var a=!1}catch(e){a=!0}return a&&(console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.","function"==typeof Symbol&&Symbol.toStringTag&&o[Symbol.toStringTag]||o.constructor.name||"Object"),r(o)),{$$typeof:c,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=d.T,n=u.p;try{if(d.T=null,u.p=2,e)return e()}finally{d.T=t,u.p=n,u.d.f()&&console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.")}},t.preconnect=function(e,t){"string"==typeof e&&e?null!=t&&"object"!=typeof t?console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",l(t)):null!=t&&"string"!=typeof t.crossOrigin&&console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",a(t.crossOrigin)):console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&(t?t="string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:t=null,u.d.C(e,t))},t.prefetchDNS=function(e){if("string"==typeof e&&e){if(1<arguments.length){var t=arguments[1];"object"==typeof t&&t.hasOwnProperty("crossOrigin")?console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",l(t)):console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",l(t))}}else console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e));"string"==typeof e&&u.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&e?null==t||"object"!=typeof t?console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",l(t)):"style"!==t.as&&"script"!==t.as&&console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',l(t.as)):console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=o(n,t.crossOrigin),i="string"==typeof t.integrity?t.integrity:void 0,s="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?u.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:i,fetchPriority:s}):"script"===n&&u.d.X(e,{crossOrigin:r,integrity:i,fetchPriority:s,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){var n="";if("string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"script"!==t.as&&(n+=" The `as` option encountered was "+l(t.as)+"."),n)console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",n);else if("script"===(n=t&&"string"==typeof t.as?t.as:"script"));else n=l(n),console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',n,e);"string"==typeof e&&("object"==typeof t&&null!==t?null!=t.as&&"script"!==t.as||(n=o(t.as,t.crossOrigin),u.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})):null==t&&u.d.M(e))},t.preload=function(e,t){var n="";if("string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),null==t||"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":"string"==typeof t.as&&t.as||(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',n),"string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var r=o(n=t.as,t.crossOrigin);u.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){var n="";"string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"string"!=typeof t.as&&(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',n),"string"==typeof e&&(t?(n=o(t.as,t.crossOrigin),u.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})):u.d.m(e))},t.requestFormReset=function(e){u.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return i().useFormState(e,t,n)},t.useFormStatus=function(){return i().useHostTransitionStatus()},t.version="19.1.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react-dom/client.js":(e,t,n)=>{e.exports=n("./node_modules/react-dom/cjs/react-dom-client.development.js")},"./node_modules/react-dom/index.js":(e,t,n)=>{e.exports=n("./node_modules/react-dom/cjs/react-dom.development.js")},"./node_modules/react/cjs/react-jsx-runtime.development.js":(e,t,n)=>{!function(){function e(t){if(null==t)return null;if("function"==typeof t)return t.$$typeof===E?null:t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case p:return"Fragment";case m:return"Profiler";case h:return"StrictMode";case k:return"Suspense";case w:return"SuspenseList";case T:return"Activity"}if("object"==typeof t)switch("number"==typeof t.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),t.$$typeof){case f:return"Portal";case b:return(t.displayName||"Context")+".Provider";case y:return(t._context.displayName||"Context")+".Consumer";case v:var n=t.render;return(t=t.displayName)||(t=""!==(t=n.displayName||n.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case S:return null!==(n=t.displayName||null)?n:e(t.type)||"Memo";case x:n=t._payload,t=t._init;try{return e(t(n))}catch(e){}}return null}function r(e){return""+e}function o(e){try{r(e);var t=!1}catch(e){t=!0}if(t){var n=(t=console).error,o="function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n.call(t,"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",o),r(e)}}function a(t){if(t===p)return"<>";if("object"==typeof t&&null!==t&&t.$$typeof===x)return"<...>";try{var n=e(t);return n?"<"+n+">":"<...>"}catch(e){return"<...>"}}function l(){return Error("react-stack-top-frame")}function i(){var t=e(this.type);return O[t]||(O[t]=!0,console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.")),void 0!==(t=this.props.ref)?t:null}function s(t,n,r,a,l,s,c,f){var p,h=n.children;if(void 0!==h)if(a)if(R(h)){for(a=0;a<h.length;a++)u(h[a]);Object.freeze&&Object.freeze(h)}else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else u(h);if(C.call(n,"key")){h=e(t);var m=Object.keys(n).filter((function(e){return"key"!==e}));a=0<m.length?"{key: someKey, "+m.join(": ..., ")+": ...}":"{key: someKey}",I[h+a]||(m=0<m.length?"{"+m.join(": ..., ")+": ...}":"{}",console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',a,h,m,h),I[h+a]=!0)}if(h=null,void 0!==r&&(o(r),h=""+r),function(e){if(C.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}(n)&&(o(n.key),h=""+n.key),"key"in n)for(var y in r={},n)"key"!==y&&(r[y]=n[y]);else r=n;return h&&function(e,t){function n(){g||(g=!0,console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",t))}n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(r,"function"==typeof t?t.displayName||t.name||"Unknown":t),function(e,t,n,r,o,a,l,s){return n=a.ref,e={$$typeof:d,type:e,key:t,props:a,_owner:o},null!==(void 0!==n?n:null)?Object.defineProperty(e,"ref",{enumerable:!1,get:i}):Object.defineProperty(e,"ref",{enumerable:!1,value:null}),e._store={},Object.defineProperty(e._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:0}),Object.defineProperty(e,"_debugInfo",{configurable:!1,enumerable:!1,writable:!0,value:null}),Object.defineProperty(e,"_debugStack",{configurable:!1,enumerable:!1,writable:!0,value:l}),Object.defineProperty(e,"_debugTask",{configurable:!1,enumerable:!1,writable:!0,value:s}),Object.freeze&&(Object.freeze(e.props),Object.freeze(e)),e}(t,h,s,0,null===(p=_.A)?null:p.getOwner(),r,c,f)}function u(e){"object"==typeof e&&null!==e&&e.$$typeof===d&&e._store&&(e._store.validated=1)}var c=n("./node_modules/react/index.js"),d=Symbol.for("react.transitional.element"),f=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),h=Symbol.for("react.strict_mode"),m=Symbol.for("react.profiler");Symbol.for("react.provider");var g,y=Symbol.for("react.consumer"),b=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),w=Symbol.for("react.suspense_list"),S=Symbol.for("react.memo"),x=Symbol.for("react.lazy"),T=Symbol.for("react.activity"),E=Symbol.for("react.client.reference"),_=c.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,C=Object.prototype.hasOwnProperty,R=Array.isArray,P=console.createTask?console.createTask:function(){return null},O={},L=(c={"react-stack-bottom-frame":function(e){return e()}})["react-stack-bottom-frame"].bind(c,l)(),D=P(a(l)),I={};t.Fragment=p,t.jsx=function(e,t,n,r,o){var l=1e4>_.recentlyCreatedOwnerStacks++;return s(e,t,n,!1,0,o,l?Error("react-stack-top-frame"):L,l?P(a(e)):D)},t.jsxs=function(e,t,n,r,o){var l=1e4>_.recentlyCreatedOwnerStacks++;return s(e,t,n,!0,0,o,l?Error("react-stack-top-frame"):L,l?P(a(e)):D)}}()},"./node_modules/react/cjs/react.development.js":(e,t,n)=>{e=n.nmd(e),function(){function n(e,t){Object.defineProperty(o.prototype,e,{get:function(){console.warn("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})}function r(e,t){var n=(e=(e=e.constructor)&&(e.displayName||e.name)||"ReactClass")+"."+t;B[n]||(console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,e),B[n]=!0)}function o(e,t,n){this.props=e,this.context=t,this.refs=$,this.updater=n||V}function a(){}function l(e,t,n){this.props=e,this.context=t,this.refs=$,this.updater=n||V}function i(e){return""+e}function s(e){try{i(e);var t=!1}catch(e){t=!0}if(t){var n=(t=console).error,r="function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n.call(t,"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",r),i(e)}}function u(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===J?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case L:return"Fragment";case I:return"Profiler";case D:return"StrictMode";case F:return"Suspense";case M:return"SuspenseList";case H:return"Activity"}if("object"==typeof e)switch("number"==typeof e.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),e.$$typeof){case O:return"Portal";case z:return(e.displayName||"Context")+".Provider";case N:return(e._context.displayName||"Context")+".Consumer";case A:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case j:return null!==(t=e.displayName||null)?t:u(e.type)||"Memo";case U:t=e._payload,e=e._init;try{return u(e(t))}catch(e){}}return null}function c(e){if(e===L)return"<>";if("object"==typeof e&&null!==e&&e.$$typeof===U)return"<...>";try{var t=u(e);return t?"<"+t+">":"<...>"}catch(e){return"<...>"}}function d(){var e=Z.A;return null===e?null:e.getOwner()}function f(){return Error("react-stack-top-frame")}function p(e){if(ee.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function h(){var e=u(this.type);return ne[e]||(ne[e]=!0,console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.")),void 0!==(e=this.props.ref)?e:null}function m(e,t,n,r,o,a,l,i){return n=a.ref,e={$$typeof:P,type:e,key:t,props:a,_owner:o},null!==(void 0!==n?n:null)?Object.defineProperty(e,"ref",{enumerable:!1,get:h}):Object.defineProperty(e,"ref",{enumerable:!1,value:null}),e._store={},Object.defineProperty(e._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:0}),Object.defineProperty(e,"_debugInfo",{configurable:!1,enumerable:!1,writable:!0,value:null}),Object.defineProperty(e,"_debugStack",{configurable:!1,enumerable:!1,writable:!0,value:l}),Object.defineProperty(e,"_debugTask",{configurable:!1,enumerable:!1,writable:!0,value:i}),Object.freeze&&(Object.freeze(e.props),Object.freeze(e)),e}function g(e){return"object"==typeof e&&null!==e&&e.$$typeof===P}function y(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(s(e.key),n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function b(){}function v(e,t,n,r,o){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var l,i,u,c=!1;if(null===e)c=!0;else switch(a){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case P:case O:c=!0;break;case U:return v((c=e._init)(e._payload),t,n,r,o)}}if(c){o=o(c=e);var d=""===r?"."+y(c,0):r;return X(o)?(n="",null!=d&&(n=d.replace(le,"$&/")+"/"),v(o,t,n,"",(function(e){return e}))):null!=o&&(g(o)&&(null!=o.key&&(c&&c.key===o.key||s(o.key)),l=o,i=n+(null==o.key||c&&c.key===o.key?"":(""+o.key).replace(le,"$&/")+"/")+d,i=m(l.type,i,void 0,0,l._owner,l.props,l._debugStack,l._debugTask),l._store&&(i._store.validated=l._store.validated),n=i,""!==r&&null!=c&&g(c)&&null==c.key&&c._store&&!c._store.validated&&(n._store.validated=2),o=n),t.push(o)),1}if(c=0,d=""===r?".":r+":",X(e))for(var f=0;f<e.length;f++)c+=v(r=e[f],t,n,a=d+y(r,f),o);else if("function"==typeof(f=null===(u=e)||"object"!=typeof u?null:"function"==typeof(u=W&&u[W]||u["@@iterator"])?u:null))for(f===e.entries&&(ae||console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),ae=!0),e=f.call(e),f=0;!(r=e.next()).done;)c+=v(r=r.value,t,n,a=d+y(r,f++),o);else if("object"===a){if("function"==typeof e.then)return v(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(b,b):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,n,r,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function k(e,t,n){if(null==e)return e;var r=[],o=0;return v(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function w(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return void 0===(t=e._result)&&console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",t),"default"in t||console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",t),t.default;throw e._result}function S(){var e=Z.H;return null===e&&console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."),e}function x(){}function T(t){if(null===ue)try{var n=("require"+Math.random()).slice(0,7);ue=(e&&e[n]).call(e,"timers").setImmediate}catch(e){ue=function(e){!1===se&&(se=!0,"undefined"==typeof MessageChannel&&console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}return ue(t)}function E(e){return 1<e.length&&"function"==typeof AggregateError?new AggregateError(e):e[0]}function _(e,t){t!==ce-1&&console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),ce=t}function C(e,t,n){var r=Z.actQueue;if(null!==r)if(0!==r.length)try{return R(r),void T((function(){return C(e,t,n)}))}catch(e){Z.thrownErrors.push(e)}else Z.actQueue=null;0<Z.thrownErrors.length?(r=E(Z.thrownErrors),Z.thrownErrors.length=0,n(r)):t(e)}function R(e){if(!fe){fe=!0;var t=0;try{for(;t<e.length;t++)for(var n=e[t];;){Z.didUsePromise=!1;var r=n(!1);if(null===r)break;if(Z.didUsePromise)return e[t]=n,void e.splice(0,t);n=r}e.length=0}catch(n){e.splice(0,t+1),Z.thrownErrors.push(n)}finally{fe=!1}}}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var P=Symbol.for("react.transitional.element"),O=Symbol.for("react.portal"),L=Symbol.for("react.fragment"),D=Symbol.for("react.strict_mode"),I=Symbol.for("react.profiler");Symbol.for("react.provider");var N=Symbol.for("react.consumer"),z=Symbol.for("react.context"),A=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),M=Symbol.for("react.suspense_list"),j=Symbol.for("react.memo"),U=Symbol.for("react.lazy"),H=Symbol.for("react.activity"),W=Symbol.iterator,B={},V={isMounted:function(){return!1},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e){r(e,"replaceState")},enqueueSetState:function(e){r(e,"setState")}},q=Object.assign,$={};Object.freeze($),o.prototype.isReactComponent={},o.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},o.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var Q,Y={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]};for(Q in Y)Y.hasOwnProperty(Q)&&n(Q,Y[Q]);a.prototype=o.prototype,(Y=l.prototype=new a).constructor=l,q(Y,o.prototype),Y.isPureReactComponent=!0;var K,G,X=Array.isArray,J=Symbol.for("react.client.reference"),Z={H:null,A:null,T:null,S:null,V:null,actQueue:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1,didUsePromise:!1,thrownErrors:[],getCurrentStack:null,recentlyCreatedOwnerStacks:0},ee=Object.prototype.hasOwnProperty,te=console.createTask?console.createTask:function(){return null},ne={},re=(Y={"react-stack-bottom-frame":function(e){return e()}})["react-stack-bottom-frame"].bind(Y,f)(),oe=te(c(f)),ae=!1,le=/\/+/g,ie="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)},se=!1,ue=null,ce=0,de=!1,fe=!1,pe="function"==typeof queueMicrotask?function(e){queueMicrotask((function(){return queueMicrotask(e)}))}:T;Y=Object.freeze({__proto__:null,c:function(e){return S().useMemoCache(e)}}),t.Children={map:k,forEach:function(e,t,n){k(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return k(e,(function(){t++})),t},toArray:function(e){return k(e,(function(e){return e}))||[]},only:function(e){if(!g(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=o,t.Fragment=L,t.Profiler=I,t.PureComponent=l,t.StrictMode=D,t.Suspense=F,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=Z,t.__COMPILER_RUNTIME=Y,t.act=function(e){var t=Z.actQueue,n=ce;ce++;var r=Z.actQueue=null!==t?t:[],o=!1;try{var a=e()}catch(e){Z.thrownErrors.push(e)}if(0<Z.thrownErrors.length)throw _(0,n),e=E(Z.thrownErrors),Z.thrownErrors.length=0,e;if(null!==a&&"object"==typeof a&&"function"==typeof a.then){var l=a;return pe((function(){o||de||(de=!0,console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))})),{then:function(e,t){o=!0,l.then((function(o){if(_(0,n),0===n){try{R(r),T((function(){return C(o,e,t)}))}catch(e){Z.thrownErrors.push(e)}if(0<Z.thrownErrors.length){var a=E(Z.thrownErrors);Z.thrownErrors.length=0,t(a)}}else e(o)}),(function(e){_(0,n),0<Z.thrownErrors.length?(e=E(Z.thrownErrors),Z.thrownErrors.length=0,t(e)):t(e)}))}}}var i=a;if(_(0,n),0===n&&(R(r),0!==r.length&&pe((function(){o||de||(de=!0,console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"))})),Z.actQueue=null),0<Z.thrownErrors.length)throw e=E(Z.thrownErrors),Z.thrownErrors.length=0,e;return{then:function(e,t){o=!0,0===n?(Z.actQueue=r,T((function(){return C(i,e,t)}))):e(i)}}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.captureOwnerStack=function(){var e=Z.getCurrentStack;return null===e?null:e()},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r,o=q({},e.props),a=e.key,l=e._owner;if(null!=t)for(i in(r=!(ee.call(t,"ref")&&(r=Object.getOwnPropertyDescriptor(t,"ref").get)&&r.isReactWarning)&&void 0!==t.ref)&&(l=d()),p(t)&&(s(t.key),a=""+t.key),t)!ee.call(t,i)||"key"===i||"__self"===i||"__source"===i||"ref"===i&&void 0===t.ref||(o[i]=t[i]);var i=arguments.length-2;if(1===i)o.children=n;else if(1<i){r=Array(i);for(var u=0;u<i;u++)r[u]=arguments[u+2];o.children=r}for(o=m(e.type,a,void 0,0,l,o,e._debugStack,e._debugTask),a=2;a<arguments.length;a++)g(l=arguments[a])&&l._store&&(l._store.validated=1);return o},t.createContext=function(e){return(e={$$typeof:z,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:N,_context:e},e._currentRenderer=null,e._currentRenderer2=null,e},t.createElement=function(e,t,n){for(var r=2;r<arguments.length;r++){var o=arguments[r];g(o)&&o._store&&(o._store.validated=1)}if(r={},o=null,null!=t)for(u in G||!("__self"in t)||"key"in t||(G=!0,console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")),p(t)&&(s(t.key),o=""+t.key),t)ee.call(t,u)&&"key"!==u&&"__self"!==u&&"__source"!==u&&(r[u]=t[u]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var l=Array(a),i=0;i<a;i++)l[i]=arguments[i+2];Object.freeze&&Object.freeze(l),r.children=l}if(e&&e.defaultProps)for(u in a=e.defaultProps)void 0===r[u]&&(r[u]=a[u]);o&&function(e,t){function n(){K||(K=!0,console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",t))}n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(r,"function"==typeof e?e.displayName||e.name||"Unknown":e);var u=1e4>Z.recentlyCreatedOwnerStacks++;return m(e,o,void 0,0,d(),r,u?Error("react-stack-top-frame"):re,u?te(c(e)):oe)},t.createRef=function(){var e={current:null};return Object.seal(e),e},t.forwardRef=function(e){null!=e&&e.$$typeof===j?console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?console.error("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&console.error("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&null!=e.defaultProps&&console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");var t,n={$$typeof:A,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(n){t=n,e.name||e.displayName||(Object.defineProperty(e,"name",{value:n}),e.displayName=n)}}),n},t.isValidElement=g,t.lazy=function(e){return{$$typeof:U,_payload:{_status:-1,_result:e},_init:w}},t.memo=function(e,t){var n;return null==e&&console.error("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e),t={$$typeof:j,type:e,compare:void 0===t?null:t},Object.defineProperty(t,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,e.name||e.displayName||(Object.defineProperty(e,"name",{value:t}),e.displayName=t)}}),t},t.startTransition=function(e){var t=Z.T,n={};Z.T=n,n._updatedFibers=new Set;try{var r=e(),o=Z.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(x,ie)}catch(e){ie(e)}finally{null===t&&n._updatedFibers&&(e=n._updatedFibers.size,n._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")),Z.T=t}},t.unstable_useCacheRefresh=function(){return S().useCacheRefresh()},t.use=function(e){return S().use(e)},t.useActionState=function(e,t,n){return S().useActionState(e,t,n)},t.useCallback=function(e,t){return S().useCallback(e,t)},t.useContext=function(e){var t=S();return e.$$typeof===N&&console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"),t.useContext(e)},t.useDebugValue=function(e,t){return S().useDebugValue(e,t)},t.useDeferredValue=function(e,t){return S().useDeferredValue(e,t)},t.useEffect=function(e,t,n){null==e&&console.warn("React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?");var r=S();if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S().useId()},t.useImperativeHandle=function(e,t,n){return S().useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return null==e&&console.warn("React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"),S().useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return null==e&&console.warn("React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"),S().useLayoutEffect(e,t)},t.useMemo=function(e,t){return S().useMemo(e,t)},t.useOptimistic=function(e,t){return S().useOptimistic(e,t)},t.useReducer=function(e,t,n){return S().useReducer(e,t,n)},t.useRef=function(e){return S().useRef(e)},t.useState=function(e){return S().useState(e)},t.useSyncExternalStore=function(e,t,n){return S().useSyncExternalStore(e,t,n)},t.useTransition=function(){return S().useTransition()},t.version="19.1.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react/index.js":(e,t,n)=>{e.exports=n("./node_modules/react/cjs/react.development.js")},"./node_modules/react/jsx-runtime.js":(e,t,n)=>{e.exports=n("./node_modules/react/cjs/react-jsx-runtime.development.js")},"./node_modules/scheduler/cjs/scheduler.development.js":(e,t)=>{!function(){function e(){if(w=!1,E){var e=t.unstable_now();R=e;var n=!0;try{e:{v=!1,k&&(k=!1,x(_),_=-1),b=!0;var a=y;try{t:{for(l(e),g=r(p);null!==g&&!(g.expirationTime>e&&s());){var c=g.callback;if("function"==typeof c){g.callback=null,y=g.priorityLevel;var d=c(g.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof d){g.callback=d,l(e),n=!0;break t}g===r(p)&&o(p),l(e)}else o(p);g=r(p)}if(null!==g)n=!0;else{var f=r(h);null!==f&&u(i,f.startTime-e),n=!1}}break e}finally{g=null,y=a,b=!1}n=void 0}}finally{n?P():E=!1}}}function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,l=o>>>1;r<l;){var i=2*(r+1)-1,s=e[i],u=i+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[i]=n,r=i);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}function l(e){for(var t=r(h);null!==t;){if(null===t.callback)o(h);else{if(!(t.startTime<=e))break;o(h),t.sortIndex=t.expirationTime,n(p,t)}t=r(h)}}function i(e){if(k=!1,l(e),!v)if(null!==r(p))v=!0,E||(E=!0,P());else{var t=r(h);null!==t&&u(i,t.startTime-e)}}function s(){return!!w||!(t.unstable_now()-R<C)}function u(e,n){_=S((function(){e(t.unstable_now())}),n)}if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error()),t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var c=performance;t.unstable_now=function(){return c.now()}}else{var d=Date,f=d.now();t.unstable_now=function(){return d.now()-f}}var p=[],h=[],m=1,g=null,y=3,b=!1,v=!1,k=!1,w=!1,S="function"==typeof setTimeout?setTimeout:null,x="function"==typeof clearTimeout?clearTimeout:null,T="undefined"!=typeof setImmediate?setImmediate:null,E=!1,_=-1,C=5,R=-1;if("function"==typeof T)var P=function(){T(e)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,L=O.port2;O.port1.onmessage=e,P=function(){L.postMessage(null)}}else P=function(){S(e,0)};t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return y},t.unstable_next=function(e){switch(y){case 1:case 2:case 3:var t=3;break;default:t=y}var n=y;y=t;try{return e()}finally{y=n}},t.unstable_requestPaint=function(){w=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=y;y=e;try{return t()}finally{y=n}},t.unstable_scheduleCallback=function(e,o,a){var l=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?l+a:l:a=l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:m++,callback:o,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>l?(e.sortIndex=a,n(h,e),null===r(p)&&e===r(h)&&(k?(x(_),_=-1):k=!0,u(i,a-l))):(e.sortIndex=s,n(p,e),v||b||(v=!0,E||(E=!0,P()))),e},t.unstable_shouldYield=s,t.unstable_wrapCallback=function(e){var t=y;return function(){var n=y;y=t;try{return e.apply(this,arguments)}finally{y=n}}},"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/scheduler/index.js":(e,t,n)=>{e.exports=n("./node_modules/scheduler/cjs/scheduler.development.js")}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r](a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var r={};(()=>{n.r(r);var e=n("./node_modules/react/jsx-runtime.js"),t=(n("./dev/src/_header.scss"),n("./dev/src/components/App.tsx"));(0,n("./node_modules/react-dom/client.js").createRoot)(document).render((0,e.jsx)(t.default,{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,