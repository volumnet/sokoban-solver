(()=>{"use strict";var e={"./dev/src/_header.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/App.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=n("./dev/src/model/Level.ts"),i=n("./dev/src/components/Levels.tsx"),l=n("./dev/src/components/LevelComponent.tsx"),s=n("./dev/src/components/useLevels.ts");function u(){const[e,t]=(0,o.useState)(null),{levels:n,saveLevel:u,deleteLevel:c}=(0,s.default)();let d;if(null!==e){let o;o=-1==e?new a.default:n[e],d=(0,r.jsx)(l.default,{level:o,selectedLevelIndex:e,onClose:()=>t(null),onSave:n=>{const r=u(n,e);-1==e&&t(r-1)},onDelete:()=>{c(e),t(null)}},e)}else d=(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h3",{children:"Выберите уровень:"}),(0,r.jsx)(i.default,{levels:n,onSelect:e=>t(e)})]});return(0,r.jsxs)("div",{className:"body__background-holder",children:[(0,r.jsx)("h1",{className:"body__logo logo",children:"SOKOBAN solver"}),d]})}u.displayName="App";const c=u},"./dev/src/components/BlockComponent.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/react/jsx-runtime.js"),o=(n("./dev/src/components/block.scss"),n("./dev/src/model/BlockType.ts"));function a({className:e="",blockType:t,notAvailable:n=!1,hasPlayer:a=!1,onClick:i,onContextMenu:l,onMouseDown:s,onMouseMove:u}){let c=e+" block";switch(t){case o.default.Wall:c+=" block_wall";break;case o.default.Player:c+=" block_player";break;case o.default.Box:c+=" block_box";break;case o.default.Place:c+=" block_place"}return a&&(c+=" block_player"),n&&t==o.default.Empty&&(c+=" block_not-available"),(0,r.jsx)("div",{className:c,onClick:i,onContextMenu:l,onMouseMove:u,onMouseDown:s})}a.displayName="BlockComponent";const i=a},"./dev/src/components/GameField.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=(n("./dev/src/components/level-field.scss"),n("./dev/src/model/Point.ts")),i=n("./dev/src/components/BlockComponent.tsx"),l=n("./dev/src/model/PointsRepo.ts"),s=n("./dev/src/model/Config.ts");function u({className:e="",gameState:t,editorMode:n=!1,onBlockClick:u,size:c}){function d(e){if(!m.current||!h.current||!u)return;const t=function(e,t,n){const r=t.getBoundingClientRect(),o=Math.floor((e.clientX-r.x)/r.width*n.x),a=Math.floor((e.clientY-r.y)/r.height*n.y);return l.default.get(o,a)}(e,m.current,f);u(t,h.current<0)}const f=c||new a.default(s.default.size,s.default.size),p=[],h=(0,o.useRef)(0),m=(0,o.useRef)(null);for(let e=0;e<f.y;e++)for(let o=0;o<f.x;o++){const a=l.default.get(o,e);p.push((0,r.jsx)(i.default,{className:"level-field__item",blockType:t.blockType(a),hasPlayer:!(!t.player||!t.player.isSame(a)),notAvailable:!n&&(t.room.corners.hasPoint(a)||t.nearWalls.hasPoint(a))},o+"x"+e))}return(0,r.jsx)("div",{ref:m,className:e+" level-field"+(n?" level-field_editor":""),style:{"--size":f.x},onMouseDown:e=>{0==e.button?h.current=1:2==e.button&&(h.current=-1),d(e)},onMouseUp:e=>{h.current=0},onMouseMove:d,onContextMenu:e=>{e.preventDefault(),e.stopPropagation()},children:p})}u.displayName="GameField";const c=u},"./dev/src/components/GameStates.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js");n("./dev/src/components/game-states.scss");function a({states:e=[],index:t=0,onChange:n}){const[a,i]=(0,o.useState)(!1),l=(0,o.useRef)(null);(0,o.useRef)(null);return(0,o.useEffect)((()=>(a&&(t<e.length-1?l.current=window.setTimeout((()=>{n(t+1)}),500):i(!1)),()=>{l.current&&(window.clearTimeout(l.current),l.current=null)})),[e,t,a]),(0,r.jsxs)("div",{className:"game-states",children:[(0,r.jsx)("input",{className:"game-states__range",type:"range",min:"0",max:e.length-1,value:t,onChange:e=>{n(parseInt(e.target.value)||0)}}),(0,r.jsxs)("div",{className:"game-states__stats"+(e[t].isWin?" game-states__stats_win":""),children:[t+1," / ",e.length]}),(0,r.jsxs)("div",{className:"game-states__controls",children:[(0,r.jsx)("button",{type:"button",className:"game-states__control game-states__control_play"+(t==e.length-1||a?" game-states__control_disabled":""),onClick:()=>i(!0)}),(0,r.jsx)("button",{type:"button",className:"game-states__control game-states__control_pause"+(a?"":" game-states__control_disabled"),onClick:()=>i(!1)}),(0,r.jsx)("button",{type:"button",className:"game-states__control game-states__control_replay"+(0==t?" game-states__control_disabled":""),onClick:()=>{n(0)}})]})]})}a.displayName="GameStates";const i=a},"./dev/src/components/LevelComponent.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=(n("./dev/src/components/level.scss"),n("./dev/src/components/LevelEditorComponent.tsx")),i=n("./dev/src/components/LevelGamePlayComponent.tsx");function l({level:e,selectedLevelIndex:t,onClose:n,onSave:l,onDelete:s}){const[u,c]=(0,o.useState)(-1===t);return u?(0,r.jsx)(a.default,{level:e,onClose:()=>{-1==t&&n(),c(!1)},onSave:e=>{l(e),c(!1)}}):(0,r.jsx)(i.default,{level:e,onClose:n,onEdit:()=>c(!0),onDelete:s})}l.displayName="LevelComponent";const s=l},"./dev/src/components/LevelEditorComponent.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=n("./dev/src/model/BlockType.ts"),i=n("./dev/src/components/LevelLegend.tsx"),l=n("./dev/src/components/GameField.tsx"),s=n("./dev/src/components/LevelLoader.tsx"),u=n("./dev/src/model/LevelFileProcessor.ts");function c({level:e,onClose:t,onSave:n}){const[c,d]=(0,o.useState)(a.default.Wall),[f,p]=(0,o.useState)(e.name),[h,m]=(0,o.useState)(e.clone()),g=(0,o.useRef)(null);return(0,r.jsxs)("form",{className:"level",ref:g,children:[(0,r.jsxs)("main",{className:"level__main",children:[(0,r.jsx)("input",{type:"text",className:"form-control",placeholder:"Введите название уровня",required:!0,value:f,onChange:e=>p(e.target.value)}),(0,r.jsx)(l.default,{className:"level__field",gameState:h.gameState,editorMode:!0,onBlockClick:(e,t)=>{const n=t?a.default.Empty:c;if(h.blocks[e.y][e.x]==n)return;const r=h.setBlockImmutable(e.y,e.x,n);m(r)}},"field-editor")]}),(0,r.jsxs)("aside",{className:"level__aside",children:[(0,r.jsx)(i.default,{className:"level__legend",selectedBlockType:c,onClick:d}),(0,r.jsxs)("div",{className:"level__controls",children:[(0,r.jsx)("button",{type:"button",className:"btn btn-primary",onClick:function(){try{if(g.current&&g.current.reportValidity()&&h.gameState.check()){const e=h.clone();e.name=f,n(e)}}catch(e){alert(e)}},children:"Сохранить"}),(0,r.jsx)(s.default,{onFileLoad:async function(e){const t=new u.default,n=await t.load(e);p(n.name),m(n)}}),(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:function(){try{(new u.default).save(h)}catch(e){alert(e)}},children:"Сохранить в файл"}),(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:t,children:"« Назад"})]})]})]})}c.displayName="LevelEditorComponent";const d=c},"./dev/src/components/LevelGamePlayComponent.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js"),a=n("./dev/src/model/BlockMovement.ts"),i=n("./dev/src/components/GameField.tsx"),l=n("./dev/src/components/GameStates.tsx"),s=n("./dev/src/model/Solver.ts");function u({level:e,onEdit:t,onDelete:n,onClose:u}){const[c,d]=(0,o.useState)([e.gameState]),[f,p]=(0,o.useState)(0),[h,m]=(0,o.useState)({depth:0,variants:0,time:0,active:!1}),g=(0,o.useRef)(null),y=c[f],b=(0,o.useCallback)((e=>{try{const t=y.playMove(e);t&&(d([...c.slice(0,f+1),t]),p(f+1),!y.isWin&&t.isWin&&window.setTimeout((()=>alert("Вы выиграли!"))))}catch(e){alert(e)}}),[f,c,y]),v=(0,o.useCallback)((()=>{f>0&&p((e=>e-1))}),[f]),k=(0,o.useCallback)((()=>{f<c.length-1&&p((e=>e+1))}),[c,f]);return(0,o.useEffect)((()=>{const e=e=>{switch(e.code){case"ArrowUp":case"KeyW":b(a.default.Up);break;case"ArrowDown":case"KeyS":b(a.default.Down);break;case"ArrowLeft":case"KeyA":b(a.default.Left);break;case"ArrowRight":case"KeyD":b(a.default.Right);break;case"KeyZ":e.ctrlKey&&v();break;case"KeyY":e.ctrlKey&&k()}(-1!=["ArrowUp","KeyW","ArrowDown","KeyS","ArrowLeft","KeyA","ArrowRight","KeyD"].indexOf(e.code)||-1!=["KeyZ","KeyY"].indexOf(e.code)&&e.ctrlKey)&&e.preventDefault()};return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)}}),[b,v,k]),(0,r.jsxs)("div",{className:"level",children:[(0,r.jsxs)("main",{className:"level__main",children:[(0,r.jsx)("h3",{children:e.name}),(0,r.jsx)(l.default,{states:c,index:f,onChange:e=>{p(e)}}),(0,r.jsx)("div",{className:"level__hint level__hint_desktop",children:"Используйте стрелки клавиатуры или клавиши WASD, чтобы двигаться"}),(0,r.jsxs)("div",{className:"level__hint level__hint_mobile",children:["Нажимайте на свободное поле, чтобы по возможности переместиться туда.",(0,r.jsx)("br",{}),"Нажимайте на ящик рядом с вами, чтобы передвинуть его."]}),(0,r.jsx)(i.default,{className:"level__field",gameState:y,editorMode:!1,size:e.size,onBlockClick:e=>{const t=y.player;if(!t)return;if(y.boxes.hasPoint(e))return e.stepTo(a.default.Up)==t&&b(a.default.Down),e.stepTo(a.default.Down)==t&&b(a.default.Up),e.stepTo(a.default.Left)==t&&b(a.default.Right),void(e.stepTo(a.default.Right)==t&&b(a.default.Left));const n=y.canReachTo[e.toString()];if(n){const e=y.getStatesFromPath(n);d([...c.slice(0,f+1),...e]),p(f+e.length)}}},"field")]}),(0,r.jsx)("aside",{className:"level__aside",children:(0,r.jsxs)("div",{className:"level__controls",children:[(0,r.jsx)("button",{type:"button",className:"btn btn-primary",onClick:t,children:"Редактировать"}),h.active?(0,r.jsx)("button",{type:"button",className:"btn btn-warning",onClick:()=>{g.current&&(g.current.stop(),m({...h,active:g.current.active}))},children:"Остановить"}):(0,r.jsx)("button",{type:"button",className:"btn btn-success",onClick:()=>async function(e){try{m({depth:0,variants:0,time:0,active:!1}),g.current=new s.default(e);const t=await g.current.solve((()=>{g.current&&m({depth:g.current.depth,variants:g.current.variants,time:Math.round(g.current.totalTime/1e3),active:g.current.active})}));t&&(d([...c.slice(0,f+1),...t]),window.setTimeout((()=>{alert("Решение найдено!")})))}catch(e){alert(e)}}(y),children:"Решить"}),(0,r.jsx)("button",{type:"button",className:"btn btn-danger",onClick:()=>confirm("Вы действительно хотите удалить этот уровень?")&&n(),children:"Удалить"}),(0,r.jsx)("button",{type:"button",className:"btn btn-default",onClick:u,children:"« Назад"}),h.depth?(0,r.jsxs)("div",{className:"level__stat",children:["Глубина: ",(0,r.jsx)("strong",{children:h.depth}),(0,r.jsx)("br",{}),"Вариантов: ",(0,r.jsx)("strong",{children:h.variants}),(0,r.jsx)("br",{}),"Время: ",(0,r.jsx)("strong",{children:h.time})," с"]}):""]})})]})}u.displayName="LevelGamePlayComponent";const c=u},"./dev/src/components/LevelLegend.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/react/jsx-runtime.js"),o=(n("./dev/src/components/level-legend.scss"),n("./dev/src/components/level-legend-list.scss"),n("./dev/src/model/BlockType.ts")),a=n("./dev/src/components/BlockComponent.tsx");function i({className:e="",selectedBlockType:t,onClick:n}){const i=Object.values(o.default).map((e=>{let o="level-legend-list__item";return e==t&&(o+=" level-legend-list__item_active"),(0,r.jsx)(a.default,{className:o,blockType:e,onClick:()=>n&&n(e)},e)}));return(0,r.jsx)("nav",{className:e+" level-legend level-legend-list",children:i})}i.displayName="LevelLegend";const l=i},"./dev/src/components/LevelLoader.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/react/jsx-runtime.js"),o=n("./node_modules/react/index.js");n("./dev/src/components/level-loader.scss");function a({className:e="",onFileLoad:t}){const[n,a]=(0,o.useState)(!1);let i=(0,o.useRef)(null);async function l(e){i.current&&(i.current.value=""),t&&t(e)}return(0,r.jsxs)("label",{className:e+" level-loader btn btn-default"+(n?" level-loader_drag":""),onDragOver:()=>a(!0),onDragLeave:()=>a(!1),onDrop:e=>{e.preventDefault(),function(e){if(!e?.dataTransfer?.files?.length)return void(i.current&&(i.current.value=""));l(Array.from(e.dataTransfer.files)[0])}(e),a(!1)},children:[(0,r.jsx)("input",{type:"file",accept:".txt",ref:i,onChange:e=>function(e){if(!e?.target?.files?.length)return void(i.current&&(i.current.value=""));l(Array.from(e.target.files)[0])}(e)}),"Загрузить файл"]})}a.displayName="LevelLoader";const i=a},"./dev/src/components/Levels.tsx":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/react/jsx-runtime.js");n("./dev/src/components/levels.scss");function o({levels:e,onSelect:t}){const n=e.map(((e,n)=>(0,r.jsx)("li",{className:"levels__item",children:(0,r.jsx)("button",{className:"levels__link",onClick:()=>t(n),children:e.name})},n)));return(0,r.jsx)("nav",{className:"levels",children:(0,r.jsxs)("ul",{className:"levels__list",children:[n,(0,r.jsx)("li",{className:"levels__item",children:(0,r.jsx)("button",{className:"levels__link levels__link_new",onClick:()=>t(-1),children:"Новый"})})]})})}o.displayName="Levels";const a=o},"./dev/src/components/block.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/game-states.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-field.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-legend-list.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-legend.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level-loader.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/level.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/levels.scss":(e,t,n)=>{n.r(t)},"./dev/src/components/useLevels.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/react/index.js"),o=n("./dev/src/model/Level.ts"),a=n("./dev/src/model/LevelStorage.ts");function i(){const e=new a.default,[t,n]=(0,r.useState)(e.load());function i(t){e.save(t),n(t)}return(0,r.useEffect)((()=>{t.length||async function(){const e=await fetch("/levels.soko.txt"),t=(await e.text()).split("\n---\n"),n=[];for(let e=0;e<t.length;e++){const r=new o.default("Уровень "+(e+1));r.parse(t[e]),n.push(r)}return n}().then((e=>{i(e)}))}),[t]),{levels:t,saveLevel:function(e,n=-1){const r=[...t];return-1==n?r.push(e):r[n]=e,i(r),r.length},deleteLevel:function(e){const n=[...t];return n.splice(e,1),i(n),n.length}}}},"./dev/src/model/BlockMovement.ts":(e,t,n)=>{var r;n.r(t),n.d(t,{BlockMovement:()=>r,default:()=>o}),function(e){e.None="",e.Up="u",e.Right="r",e.Down="d",e.Left="l"}(r||(r={}));const o=r},"./dev/src/model/BlockType.ts":(e,t,n)=>{var r;n.r(t),n.d(t,{BlockType:()=>r,default:()=>o}),function(e){e.Empty=" ",e.Wall="#",e.Player="@",e.Box="B",e.Place="."}(r||(r={}));const o=r},"./dev/src/model/Config.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r={size:32}},"./dev/src/model/GameState.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var r=n("./dev/src/model/PointSet.ts"),o=n("./dev/src/model/Point.ts"),a=n("./dev/src/model/BlockMovement.ts"),i=n("./dev/src/model/BlockType.ts");class l{room;boxes;winState;player;_nearWalls=null;_isWin=null;_canReachTo=null;constructor(e,t,n,r){this.room=e,this.boxes=t,this.winState=n,this.player=r}check(){if(!this.boxes.length)throw"Нужен хотя бы один ящик";if(this.winState.length>this.boxes.length)throw"Не хватает ящиков (еще "+(this.winState.length-this.boxes.length)+")";if(!this.player)throw"Не указано положение игрока";return!0}get nearWalls(){if(!this._nearWalls){let e=[];for(let t of Object.values(this.room.corners.points))for(let n of[a.default.Up,a.default.Right,a.default.Down,a.default.Left]){const r=this.checkWall(t,n);e=e.concat(r)}this._nearWalls=new r.default(e)}return this._nearWalls}blockType(e){return this.room.hasPoint(e)?i.default.Wall:this.boxes.hasPoint(e)?i.default.Box:this.winState.hasPoint(e)?i.default.Place:i.default.Empty}checkWall(e,t){const n=[];let r=e,o=a.default.Right;t!=a.default.Left&&t!=a.default.Right||(o=a.default.Down);do{const e=r.stepTo(t);if(this.winState.hasPoint(r))return[];if(e&&!this.room.hasPoint(e))return[];if(this.room.hasPoint(r))break;n.push(r)}while(r=r.stepTo(o));return n}get isWin(){if(null===this._isWin){let e=!0;for(let t in this.winState.points)void 0===this.boxes.points[t]&&(e=!1);this._isWin=e}return this._isWin}get canReachTo(){if(this.check(),!this.player)return{};if(!this._canReachTo){const e={};e[this.player.toString()]="";let t={...e};for(;Object.keys(t).length;){const n={};for(let r in t){const i=o.default.fromString(r);for(let o of[a.default.Up,a.default.Right,a.default.Down,a.default.Left]){const a=i.stepTo(o);if(a){const i=a.toString();void 0!==e[i]||this.isEngaged(a)||(n[i]=e[i]=t[r]+o)}}}t=n}this._canReachTo=e}return this._canReachTo}nextStates(e=null){const t={},n=this.canReachTo;let r;r=e?[e]:Object.values(this.boxes.points);for(let e of r)for(let r of[a.default.Up,a.default.Right,a.default.Down,a.default.Left]){let o,i=a.default.None;switch(r){case a.default.Up:i=a.default.Down;break;case a.default.Right:i=a.default.Left;break;case a.default.Down:i=a.default.Up;break;case a.default.Left:i=a.default.Right}if(i==a.default.None)continue;if(o=e.stepTo(i),!o)continue;const s=n[o.toString()];if(void 0===s)continue;if(!this.blockMovementAvailable(e,r))continue;const u=s+r,c=this.boxes.movePoint(e,r);if(c){const n=new l(this.room,c,this.winState,e);n._nearWalls=this.nearWalls,t[u]=n}}return t}blockMovementAvailable(e,t){const n=e.stepTo(t);if(!n)return!1;if(this.isEngaged(n))return!1;if(this.winState.hasPoint(n))return!0;if(this.room.corners.hasPoint(n))return!1;if(this.nearWalls.hasPoint(n))return!1;const r=n.up,o=!r||!!this.isEngaged(r),i=n.down,l=!i||!!this.isEngaged(i),s=n.left,u=!s||!!this.isEngaged(s),c=n.right,d=!c||!!this.isEngaged(c),f=r?.left,p=!f||!!this.isEngaged(f),h=r?.right,m=!h||!!this.isEngaged(h),g=i?.left,y=!g||!!this.isEngaged(g),b=i?.right,v=!b||!!this.isEngaged(b);switch(t){case a.default.Up:if(o&&(u&&p||d&&m))return!1;break;case a.default.Down:if(l&&(u&&y||d&&v))return!1;break;case a.default.Left:if(u&&(o&&p||l&&y))return!1;break;case a.default.Right:if(d&&(o&&m||l&&v))return!1}return!0}isEngaged(e){return!!this.room.hasPoint(e)||!!this.boxes.hasPoint(e)}playMove(e){if(!this.player)return null;const t=this.player.stepTo(e);if(!t)return null;if(this.room.hasPoint(t))return null;if(this.boxes.hasPoint(t)){const n=t.stepTo(e);if(!n)return null;if(this.isEngaged(n))return null;if(!this.blockMovementAvailable(t,e))throw"Этот ход приведет к проигрышу, не надо так!";const r=this.boxes.movePoint(t,e);return r?new l(this.room,r,this.winState,t):null}return new l(this.room,this.boxes,this.winState,t)}getStatesFromPath(e){const t=[];let n=this;for(let r=0;r<e.length&&(n=n.playMove(e[r]),n);r++)t.push(n);return t}}},"./dev/src/model/Level.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var r=n("./dev/src/model/BlockType.ts"),o=n("./dev/src/model/Point.ts"),a=n("./dev/src/model/PointsRepo.ts"),i=n("./dev/src/model/PointSet.ts"),l=n("./dev/src/model/Room.ts"),s=n("./dev/src/model/GameState.ts"),u=n("./dev/src/model/Config.ts");class c{name;_blocks=[];constructor(e="",t=[]){this.name=e,this.blocks=t}set blocks(e){this._blocks=Array.from({length:u.default.size},(()=>Array.from({length:u.default.size},(()=>r.default.Empty))));for(let t=0;t<u.default.size;t++)if(e[t])for(let n=0;n<u.default.size;n++)e[t][n]&&this.setBlock(t,n,e[t][n])}get blocks(){return this._blocks}get size(){let e=0,t=0;for(let e=0;e<u.default.size;e++)for(let n=0;n<u.default.size;n++)if(this._blocks[e][n]!=r.default.Empty){t=e+1;break}for(let t=0;t<u.default.size;t++)for(let n=e;n<u.default.size;n++)this._blocks[t][n]!=r.default.Empty&&(e=n+1);return new o.default(e,t)}get player(){for(let e=0;e<u.default.size;e++)for(let t=0;t<u.default.size;t++)if(this._blocks[e][t]==r.default.Player)return a.default.get(t,e);return null}get dataToSave(){const e=this._blocks.map((e=>e.join(""))).join("\n");return{name:this.name,data:e}}get gameState(){const e=[],t=[],n=[];for(let o=0;o<u.default.size;o++)for(let i=0;i<u.default.size;i++)switch(this._blocks[o][i]){case r.default.Wall:e.push(a.default.get(i,o));break;case r.default.Box:t.push(a.default.get(i,o));break;case r.default.Place:n.push(a.default.get(i,o))}return new s.default(new l.default(e),new i.default(t),new i.default(n),this.player)}parse(e){this._blocks=[];const t=e.split("\n").map((e=>Array.from(e).map((e=>Object.values(r.default).includes(e)?e:r.default.Empty))));this.blocks=t}clone(){return new c(this.name,this.blocks)}setBlock(e,t,n){n!=r.default.Player||!this.player||t==this.player.x&&e==this.player.y||(this._blocks[this.player.y][this.player.x]=r.default.Empty),this._blocks[e][t]=n}setBlockImmutable(e,t,n){const r=this.clone();return r.setBlock(e,t,n),r}}},"./dev/src/model/LevelFileProcessor.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var r=n("./dev/src/model/Level.ts");class o{async load(e){if(!/\.soko\.txt$/gi.test(e.name))throw"Файл должен быть с расширением .soko.txt";const t=e.name.replace(/\.soko\.txt$/gi,""),n=await this.getFileContents(e),o=new r.default(t);return o.parse(n),o}async getFileContents(e){return new Promise(((t,n)=>{var r=new FileReader;r.onload=()=>{t(r.result)},r.onerror=n,r.readAsText(e)}))}save(e){const t=e.dataToSave.data,n=new Blob([t],{type:"text/plain"}),r=URL.createObjectURL(n),o=document.createElement("a");o.href=r,o.download=(e.name||"Уровень")+".soko.txt",o.click(),URL.revokeObjectURL(r)}}},"./dev/src/model/LevelStorage.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var r=n("./dev/src/model/Level.ts");class o{load(){const e=window.localStorage.levels||"[]";return JSON.parse(e).map((e=>{const t=new r.default(e.name);return t.parse(e.data),t}))}save(e){const t=e.map((e=>e.dataToSave)),n=JSON.stringify(t);window.localStorage.levels=n}}},"./dev/src/model/Point.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./dev/src/model/BlockMovement.ts"),o=n("./dev/src/model/Config.ts"),a=n("./dev/src/model/PointsRepo.ts");class i extends Array{str="";_up=void 0;_down=void 0;_left=void 0;_right=void 0;constructor(e,t){if(super(e,t),this.str=this.x.toString(36)+this.y.toString(36),2!==this.length)throw new Error("Point должен содержать ровно 2 числа")}get left(){return void 0===this._left&&(this[0]>0?this._left=a.default.get(this[0]-1,this[1]):this._left=null),this._left}get right(){return void 0===this._right&&(this[0]<o.default.size-1?this._right=a.default.get(this[0]+1,this[1]):this._right=null),this._right}get up(){return void 0===this._up&&(this[1]>0?this._up=a.default.get(this[0],this[1]-1):this._up=null),this._up}get down(){return void 0===this._down&&(this[1]<o.default.size-1?this._down=a.default.get(this[0],this[1]+1):this._down=null),this._down}get x(){return this[0]}get y(){return this[1]}push(...e){throw new Error("Запрет изменения элементов в Point")}unshift(...e){throw new Error("Запрет изменения элементов в Point")}toString(){return this.str}static fromString(e){return a.default.fromString(e)}stepTo(e){switch(e){case r.default.None:return this;case r.default.Left:return this.left;case r.default.Right:return this.right;case r.default.Up:return this.up;case r.default.Down:return this.down}return null}isSame(e){return this==e||this.x==e.x&&this.y==e.y}}},"./dev/src/model/PointSet.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var r=n("./dev/src/model/BlockMovement.ts");class o{_points={};get points(){return this._points}get length(){return Object.values(this._points).length}constructor(e=[]){for(let t of e)this._points[t.toString()]=t}hasPoint(e){return!!this._points[e.toString()]}clone(){let e=new o;return e._points={...this._points},e}addPoint(e){if(this._points[e.toString()])return this;const t=this.clone();return t._points[e.toString()]=e,t}deletePoint(e){if(!this._points[e.toString()])return this;const t=this.clone();return delete t._points[e.toString()],t}replacePoint(e,t){const n=this.clone();return delete n._points[e.toString()],n._points[t.toString()]=t,n}movePoint(e,t){if(t==r.default.None)return this;if(!this._points[e.str])return this;const n=e.stepTo(t);return n?n==e?this:this.replacePoint(e,n):this}toString(){return Object.keys(this._points).sort().join("")}}},"./dev/src/model/PointsRepo.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./dev/src/model/Point.ts"),o=n("./dev/src/model/Config.ts");class a{static points=[];static pointsByCodes={};static initialized=!1;static get(e,t){return a.initialized||a.init(),a.points[t][e]}static fromString(e){return a.initialized||a.init(),a.pointsByCodes[e]}static init(){for(let e=0;e<o.default.size;e++){a.points[e]||a.points.push([]);for(let t=0;t<o.default.size;t++)if(!a.points[e][t]){const n=new r.default(t,e);a.points[e].push(n),a.pointsByCodes[n.toString()]=n}}this.initialized=!0}}},"./dev/src/model/Room.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./dev/src/model/PointsRepo.ts"),o=n("./dev/src/model/PointSet.ts"),a=n("./dev/src/model/Config.ts");class i extends o.default{corners=new o.default;constructor(e){super(e);const t=this.getCorners();this.corners=new o.default(t)}getCorners(){const e=[];for(let t=0;t<a.default.size;t++)for(let n=0;n<a.default.size;n++){if(this.points[n.toString(36)+t.toString(36)])continue;const o=r.default.get(n,t),a=o.up,i=!a||!!this.hasPoint(a),l=o.down,s=!l||!!this.hasPoint(l),u=o.left,c=!u||!!this.hasPoint(u),d=o.right,f=!d||!!this.hasPoint(d);(i||s)&&(c||f)&&e.push(o)}return e}}},"./dev/src/model/Solver.ts":(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var r=n("./dev/src/model/BlockMovement.ts");class o{gameState;syncInterval;static debugTime=0;states={};_depth=0;_startTime=0;_endTime=0;_timeoutId=0;_active=!1;constructor(e,t=1e3){this.gameState=e,this.syncInterval=t}get depth(){return this._depth}get variants(){return Object.keys(this.states).length}get startTime(){return this._startTime}get totalTime(){if(!this._startTime)return 0;return(this._endTime||(new Date).getTime())-this._startTime}get active(){return!this._endTime}async solve(e){const t=this.gameState;if(t.check(),!t.player)return null;let n={};n[""]=t,this._startTime=(new Date).getTime(),this._active=!0;performance.now();for(;Object.keys(n).length&&this._depth<60;){const t=performance.now();this._depth++;const r=await this.asyncProcessDepth(n,e);if("string"==typeof r)return this._endTime=(new Date).getTime(),e(),this.gameState.getStatesFromPath(r);n=r,console.log("Вложенность: "+this._depth,"Состояний: ",Object.keys(n).length,"Всего состояний: ",this.variants,"Время: "+(performance.now()-t),"Общее время: "+this.totalTime)}if(this._endTime=(new Date).getTime(),e(),this._timeoutId)throw"Решение не найдено";return null}stop(){this._timeoutId&&window.clearTimeout(this._timeoutId),this._endTime=(new Date).getTime()}async asyncProcessDepth(e,t){let n={},r={...e};for(;Object.keys(r).length;){let e=await this.asyncProcessDepthChunk(r);if("string"==typeof e)return e;Object.assign(n,e.result),r=e.left,t()}return n}async asyncProcessDepthChunk(e){return new Promise(((t,n)=>{this._timeoutId=window.setTimeout((()=>{let n={};const r={...e},o=performance.now();for(let a in e){const i=e[a];if(i.isWin){t(a);break}const l=this.processState(a,i);if(delete r[a],Object.assign(n,l),performance.now()>o+this.syncInterval)return void t({result:n,left:r})}t({result:n,left:r})}))}))}processState(e,t){const n=t.nextStates(),o={};for(let t in n){const a=n[t];if(!a.player)continue;const i=e+t,l=a.boxes.toString(),s=a.player.toString();if(this.states[l]||(this.states[l]={}),!this.states[l][s]){const e=a.canReachTo;for(let t of Object.values(a.boxes.points))for(let n of[r.default.Up,r.default.Right,r.default.Down,r.default.Left]){const r=t.stepTo(n);r&&e[r.str]&&(this.states[l][r.str]=!0)}o[i]=a}}return o}}},"./node_modules/react-dom/cjs/react-dom-client.development.js":(e,t,n)=>{!function(){function e(e,t){for(e=e.memoizedState;null!==e&&0<t;)e=e.next,t--;return e}function r(e,t,n,o){if(n>=t.length)return o;var a=t[n],i=Kc(e)?e.slice():xc({},e);return i[a]=r(e[a],t,n+1,o),i}function o(e,t,n){if(t.length===n.length){for(var r=0;r<n.length-1;r++)if(t[r]!==n[r])return void console.warn("copyWithRename() expects paths to be the same except for the deepest key");return a(e,t,n,0)}console.warn("copyWithRename() expects paths of the same length")}function a(e,t,n,r){var o=t[r],i=Kc(e)?e.slice():xc({},e);return r+1===t.length?(i[n[r]]=i[o],Kc(i)?i.splice(o,1):delete i[o]):i[o]=a(e[o],t,n,r+1),i}function i(e,t,n){var r=t[n],o=Kc(e)?e.slice():xc({},e);return n+1===t.length?(Kc(o)?o.splice(r,1):delete o[r],o):(o[r]=i(e[r],t,n+1),o)}function l(){return!1}function s(){return null}function u(){}function c(){console.error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks")}function d(){console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")}function f(){}function p(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")}function h(e,t,n,r){return new Sn(e,t,n,r)}function m(e,t){e.context===dh&&(Gu(e.current,2,t,e,null,null),Rl())}function g(e,t){if(null!==fh){var n=t.staleFamilies;t=t.updatedFamilies,Gl(),wn(e.current,t,n),Rl()}}function y(e){fh=e}function b(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function v(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function k(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function w(e){if(v(e)!==e)throw Error("Unable to find node on an unmounted component.")}function S(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=S(e)))return t;e=e.sibling}return null}function x(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Qc&&e[Qc]||e["@@iterator"])?e:null}function _(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===Yc?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Cc:return"Fragment";case Pc:return"Profiler";case Rc:return"StrictMode";case Nc:return"Suspense";case zc:return"SuspenseList";case Mc:return"Activity"}if("object"==typeof e)switch("number"==typeof e.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),e.$$typeof){case Ec:return"Portal";case Dc:return(e.displayName||"Context")+".Provider";case Lc:return(e._context.displayName||"Context")+".Consumer";case Ic:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case Ac:return null!==(t=e.displayName||null)?t:_(e.type)||"Memo";case Fc:t=e._payload,e=e._init;try{return _(e(t))}catch(e){}}return null}function T(e){return"number"==typeof e.tag?E(e):"string"==typeof e.name?e.name:null}function E(e){var t=e.type;switch(e.tag){case 31:return"Activity";case 24:return"Cache";case 9:return(t._context.displayName||"Context")+".Consumer";case 10:return(t.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 26:case 27:case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return _(t);case 8:return t===Rc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;break;case 29:if(null!=(t=e._debugInfo))for(var n=t.length-1;0<=n;n--)if("string"==typeof t[n].name)return t[n].name;if(null!==e.return)return E(e.return)}return null}function C(e){return{current:e}}function R(e,t){0>td?console.error("Unexpected pop."):(t!==ed[td]&&console.error("Unexpected Fiber popped."),e.current=Zc[td],Zc[td]=null,ed[td]=null,td--)}function P(e,t,n){td++,Zc[td]=e.current,ed[td]=n,e.current=t}function O(e){return null===e&&console.error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."),e}function L(e,t){P(od,t,e),P(rd,e,e),P(nd,null,e);var n=t.nodeType;switch(n){case 9:case 11:n=9===n?"#document":"#fragment",t=(t=t.documentElement)&&(t=t.namespaceURI)?Zs(t):Uv;break;default:if(n=t.tagName,t=t.namespaceURI)t=eu(t=Zs(t),n);else switch(n){case"svg":t=Hv;break;case"math":t=Wv;break;default:t=Uv}}n={context:t,ancestorInfo:n=gt(null,n=n.toLowerCase())},R(nd,e),P(nd,n,e)}function D(e){R(nd,e),R(rd,e),R(od,e)}function I(){return O(nd.current)}function N(e){null!==e.memoizedState&&P(ad,e,e);var t=O(nd.current),n=e.type,r=eu(t.context,n);t!==(r={context:r,ancestorInfo:n=gt(t.ancestorInfo,n)})&&(P(rd,e,e),P(nd,r,e))}function z(e){rd.current===e&&(R(nd,e),R(rd,e)),ad.current===e&&(R(ad,e),Sk._currentValue=wk)}function A(e){return"function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object"}function F(e){try{return M(e),!1}catch(e){return!0}}function M(e){return""+e}function j(e,t){if(F(e))return console.error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",t,A(e)),M(e)}function U(e,t){if(F(e))return console.error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",t,A(e)),M(e)}function H(e){if(F(e))return console.error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",A(e)),M(e)}function W(e){if("function"==typeof bd&&vd(e),wd&&"function"==typeof wd.setStrictMode)try{wd.setStrictMode(kd,e)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}}function B(e){Sd=e}function V(){null!==Sd&&"function"==typeof Sd.markCommitStopped&&Sd.markCommitStopped()}function q(e){null!==Sd&&"function"==typeof Sd.markComponentRenderStarted&&Sd.markComponentRenderStarted(e)}function $(){null!==Sd&&"function"==typeof Sd.markComponentRenderStopped&&Sd.markComponentRenderStopped()}function Q(e){null!==Sd&&"function"==typeof Sd.markRenderStarted&&Sd.markRenderStarted(e)}function Y(){null!==Sd&&"function"==typeof Sd.markRenderStopped&&Sd.markRenderStopped()}function K(e,t){null!==Sd&&"function"==typeof Sd.markStateUpdateScheduled&&Sd.markStateUpdateScheduled(e,t)}function G(e){return 1&e?"SyncHydrationLane":2&e?"Sync":4&e?"InputContinuousHydration":8&e?"InputContinuous":16&e?"DefaultHydration":32&e?"Default":128&e?"TransitionHydration":4194048&e?"Transition":62914560&e?"Retry":67108864&e?"SelectiveHydration":134217728&e?"IdleHydration":268435456&e?"Idle":536870912&e?"Offscreen":1073741824&e?"Deferred":void 0}function X(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return console.error("Should have found matching lanes. This is a bug in React."),e}}function J(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var o=0,a=e.suspendedLanes,i=e.pingedLanes;e=e.warmLanes;var l=134217727&r;return 0!==l?0!==(r=l&~a)?o=X(r):0!==(i&=l)?o=X(i):n||0!==(n=l&~e)&&(o=X(n)):0!==(l=r&~a)?o=X(l):0!==i?o=X(i):n||0!==(n=r&~e)&&(o=X(n)),0===o?0:0!==t&&t!==o&&!(t&a)&&((a=o&-o)>=(n=t&-t)||32===a&&4194048&n)?t:o}function Z(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ee(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return console.error("Should have found matching lanes. This is a bug in React."),-1}}function te(){var e=Rd;return!(4194048&(Rd<<=1))&&(Rd=256),e}function ne(){var e=Pd;return!(62914560&(Pd<<=1))&&(Pd=4194304),e}function re(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function oe(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function ae(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-Td(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function ie(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Td(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function le(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function se(e,t,n){if(_d)for(e=e.pendingUpdatersLaneMap;0<n;){var r=31-Td(n),o=1<<r;e[r].add(t),n&=~o}}function ue(e,t){if(_d)for(var n=e.pendingUpdatersLaneMap,r=e.memoizedUpdaters;0<t;){var o=31-Td(t);e=1<<o,0<(o=n[o]).size&&(o.forEach((function(e){var t=e.alternate;null!==t&&r.has(t)||r.add(e)})),o.clear()),t&=~e}}function ce(e){return e&=-e,0!==Od&&Od<e?0!==Ld&&Ld<e?134217727&e?Dd:Id:Ld:Od}function de(){var e=Xc.p;return 0!==e?e:void 0===(e=window.event)?Dd:lc(e.type)}function fe(e){delete e[zd],delete e[Ad],delete e[Md],delete e[jd],delete e[Ud]}function pe(e){var t=e[zd];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Fd]||n[zd]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=wu(e);null!==e;){if(n=e[zd])return n;e=wu(e)}return t}n=(e=n).parentNode}return null}function he(e){if(e=e[zd]||e[Fd]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function me(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error("getNodeFromInstance: Invalid argument.")}function ge(e){var t=e[Hd];return t||(t=e[Hd]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function ye(e){e[Wd]=!0}function be(e,t){ve(e,t),ve(e+"Capture",t)}function ve(e,t){Vd[e]&&console.error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",e),Vd[e]=t;var n=e.toLowerCase();for(qd[n]=e,"onDoubleClick"===e&&(qd.ondblclick=e),e=0;e<t.length;e++)Bd.add(t[e])}function ke(e,t){$d[t.type]||t.onChange||t.onInput||t.readOnly||t.disabled||null==t.value||("select"===e?console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."):console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")),t.onChange||t.readOnly||t.disabled||null==t.checked||console.error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}function we(e){return!!id.call(Kd,e)||!id.call(Yd,e)&&(Qd.test(e)?Kd[e]=!0:(Yd[e]=!0,console.error("Invalid attribute name: `%s`",e),!1))}function Se(e,t,n){if(we(t)){if(!e.hasAttribute(t)){switch(typeof n){case"symbol":case"object":case"function":return n;case"boolean":if(!1===n)return n}return void 0===n?void 0:null}return""===(e=e.getAttribute(t))&&!0===n||(j(n,t),e===""+n?n:e)}}function xe(e,t,n){if(we(t))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}j(n,t),e.setAttribute(t,""+n)}}function _e(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}j(n,t),e.setAttribute(t,""+n)}}function Te(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}j(r,n),e.setAttributeNS(t,n,""+r)}}function Ee(){}function Ce(e){if(void 0===Xd)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Xd=t&&t[1]||"",Jd=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xd+e+Jd}function Re(e,t){if(!e||Zd)return"";var n=ef.get(e);if(void 0!==n)return n;Zd=!0,n=Error.prepareStackTrace,Error.prepareStackTrace=void 0;var r;r=Gc.H,Gc.H=null,function(){if(0===Gd){Uc=console.log,Hc=console.info,Wc=console.warn,Bc=console.error,Vc=console.group,qc=console.groupCollapsed,$c=console.groupEnd;var e={configurable:!0,enumerable:!0,value:Ee,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Gd++}();try{var o={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};o.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(o.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(o.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var i=o.DetermineComponentFrameRoot(),l=i[0],s=i[1];if(l&&s){var u=l.split("\n"),c=s.split("\n");for(i=a=0;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;for(;i<c.length&&!c[i].includes("DetermineComponentFrameRoot");)i++;if(a===u.length||i===c.length)for(a=u.length-1,i=c.length-1;1<=a&&0<=i&&u[a]!==c[i];)i--;for(;1<=a&&0<=i;a--,i--)if(u[a]!==c[i]){if(1!==a||1!==i)do{if(a--,0>--i||u[a]!==c[i]){var d="\n"+u[a].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),"function"==typeof e&&ef.set(e,d),d}}while(1<=a&&0<=i);break}}}finally{Zd=!1,Gc.H=r,function(){if(0==--Gd){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:xc({},e,{value:Uc}),info:xc({},e,{value:Hc}),warn:xc({},e,{value:Wc}),error:xc({},e,{value:Bc}),group:xc({},e,{value:Vc}),groupCollapsed:xc({},e,{value:qc}),groupEnd:xc({},e,{value:$c})})}0>Gd&&console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=n}return u=(u=e?e.displayName||e.name:"")?Ce(u):"","function"==typeof e&&ef.set(e,u),u}function Pe(e){var t=Error.prepareStackTrace;return Error.prepareStackTrace=void 0,e=e.stack,Error.prepareStackTrace=t,e.startsWith("Error: react-stack-top-frame\n")&&(e=e.slice(29)),-1!==(t=e.indexOf("\n"))&&(e=e.slice(t+1)),-1!==(t=e.indexOf("react-stack-bottom-frame"))&&(t=e.lastIndexOf("\n",t)),-1===t?"":e=e.slice(0,t)}function Oe(e){switch(e.tag){case 26:case 27:case 5:return Ce(e.type);case 16:return Ce("Lazy");case 13:return Ce("Suspense");case 19:return Ce("SuspenseList");case 0:case 15:return Re(e.type,!1);case 11:return Re(e.type.render,!1);case 1:return Re(e.type,!0);case 31:return Ce("Activity");default:return""}}function Le(e){try{var t="";do{t+=Oe(e);var n=e._debugInfo;if(n)for(var r=n.length-1;0<=r;r--){var o=n[r];if("string"==typeof o.name){var a=t,i=o.env;t=a+Ce(o.name+(i?" ["+i+"]":""))}}e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function De(e){return(e=e?e.displayName||e.name:"")?Ce(e):""}function Ie(){if(null===tf)return null;var e=tf._debugOwner;return null!=e?T(e):null}function Ne(){if(null===tf)return"";var e=tf;try{var t="";switch(6===e.tag&&(e=e.return),e.tag){case 26:case 27:case 5:t+=Ce(e.type);break;case 13:t+=Ce("Suspense");break;case 19:t+=Ce("SuspenseList");break;case 31:t+=Ce("Activity");break;case 30:case 0:case 15:case 1:e._debugOwner||""!==t||(t+=De(e.type));break;case 11:e._debugOwner||""!==t||(t+=De(e.type.render))}for(;e;)if("number"==typeof e.tag){var n=e;e=n._debugOwner;var r=n._debugStack;e&&r&&("string"!=typeof r&&(n._debugStack=r=Pe(r)),""!==r&&(t+="\n"+r))}else{if(null==e.debugStack)break;var o=e.debugStack;(e=e.owner)&&o&&(t+="\n"+Pe(o))}var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return a}function ze(e,t,n,r,o,a,i){var l=tf;Ae(e);try{return null!==e&&e._debugTask?e._debugTask.run(t.bind(null,n,r,o,a,i)):t(n,r,o,a,i)}finally{Ae(l)}throw Error("runWithFiberInDEV should never be called in production. This is a bug in React.")}function Ae(e){Gc.getCurrentStack=null===e?null:Ne,nf=!1,tf=e}function Fe(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":return e;case"object":return H(e),e;default:return""}}function Me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function je(e){e._valueTracker||(e._valueTracker=function(e){var t=Me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t);H(e[t]);var r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){H(e),r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){H(e),r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ue(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function He(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function We(e){return e.replace(rf,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function Be(e,t){void 0===t.checked||void 0===t.defaultChecked||af||(console.error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",Ie()||"A component",t.type),af=!0),void 0===t.value||void 0===t.defaultValue||of||(console.error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",Ie()||"A component",t.type),of=!0)}function Ve(e,t,n,r,o,a,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?(j(i,"type"),e.type=i):e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+Fe(t)):e.value!==""+Fe(t)&&(e.value=""+Fe(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?$e(e,i,Fe(t)):null!=n?$e(e,i,Fe(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?(j(l,"name"),e.name=""+Fe(l)):e.removeAttribute("name")}function qe(e,t,n,r,o,a,i,l){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(j(a,"type"),e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+Fe(n):"",t=null!=t?""+Fe(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(j(i,"name"),e.name=i)}function $e(e,t,n){"number"===t&&He(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function Qe(e,t){null==t.value&&("object"==typeof t.children&&null!==t.children?wc.Children.forEach(t.children,(function(e){null==e||"string"==typeof e||"number"==typeof e||"bigint"==typeof e||sf||(sf=!0,console.error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."))})):null==t.dangerouslySetInnerHTML||uf||(uf=!0,console.error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))),null==t.selected||lf||(console.error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),lf=!0)}function Ye(){var e=Ie();return e?"\n\nCheck the render method of `"+e+"`.":""}function Ke(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Fe(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ge(e,t){for(e=0;e<df.length;e++){var n=df[e];if(null!=t[n]){var r=Kc(t[n]);t.multiple&&!r?console.error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,Ye()):!t.multiple&&r&&console.error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,Ye())}}void 0===t.value||void 0===t.defaultValue||cf||(console.error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"),cf=!0)}function Xe(e,t){void 0===t.value||void 0===t.defaultValue||ff||(console.error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",Ie()||"A component"),ff=!0),null!=t.children&&null==t.value&&console.error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.")}function Je(e,t,n){null==t||((t=""+Fe(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+Fe(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function Ze(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(Kc(r)){if(1<r.length)throw Error("<textarea> can only have at most one child.");r=r[0]}n=r}null==n&&(n=""),t=n}n=Fe(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function et(e,t){return void 0===e.serverProps&&0===e.serverTail.length&&1===e.children.length&&3<e.distanceFromLeaf&&e.distanceFromLeaf>15-t?et(e.children[0],t):e}function tt(e){return"  "+"  ".repeat(e)}function nt(e){return"+ "+"  ".repeat(e)}function rt(e){return"- "+"  ".repeat(e)}function ot(e){switch(e.tag){case 26:case 27:case 5:return e.type;case 16:return"Lazy";case 13:return"Suspense";case 19:return"SuspenseList";case 0:case 15:case 1:return(e=e.type).displayName||e.name||null;case 11:return(e=e.type.render).displayName||e.name||null;default:return null}}function at(e,t){return pf.test(e)?(e=JSON.stringify(e)).length>t-2?8>t?'{"..."}':"{"+e.slice(0,t-7)+'..."}':"{"+e+"}":e.length>t?5>t?'{"..."}':e.slice(0,t-3)+"...":e}function it(e,t,n){var r=120-2*n;if(null===t)return nt(n)+at(e,r)+"\n";if("string"==typeof t){for(var o=0;o<t.length&&o<e.length&&t.charCodeAt(o)===e.charCodeAt(o);o++);return o>r-8&&10<o&&(e="..."+e.slice(o-8),t="..."+t.slice(o-8)),nt(n)+at(e,r)+"\n"+rt(n)+at(t,r)+"\n"}return tt(n)+at(e,r)+"\n"}function lt(e){return Object.prototype.toString.call(e).replace(/^\[object (.*)\]$/,(function(e,t){return t}))}function st(e,t){switch(typeof e){case"string":return(e=JSON.stringify(e)).length>t?5>t?'"..."':e.slice(0,t-4)+'..."':e;case"object":if(null===e)return"null";if(Kc(e))return"[...]";if(e.$$typeof===Tc)return(t=_(e.type))?"<"+t+">":"<...>";var n=lt(e);if("Object"===n){for(var r in n="",t-=2,e)if(e.hasOwnProperty(r)){var o=JSON.stringify(r);if(o!=='"'+r+'"'&&(r=o),t-=r.length-2,0>(t-=(o=st(e[r],15>t?t:15)).length)){n+=""===n?"...":", ...";break}n+=(""===n?"":",")+r+":"+o}return"{"+n+"}"}return n;case"function":return(t=e.displayName||e.name)?"function "+t:"function";default:return String(e)}}function ut(e,t){return"string"!=typeof e||pf.test(e)?"{"+st(e,t-2)+"}":e.length>t-2?5>t?'"..."':'"'+e.slice(0,t-5)+'..."':'"'+e+'"'}function ct(e,t,n){var r,o=120-n.length-e.length,a=[];for(r in t)if(t.hasOwnProperty(r)&&"children"!==r){var i=ut(t[r],120-n.length-r.length-1);o-=r.length+i.length+2,a.push(r+"="+i)}return 0===a.length?n+"<"+e+">\n":0<o?n+"<"+e+" "+a.join(" ")+">\n":n+"<"+e+"\n"+n+"  "+a.join("\n"+n+"  ")+"\n"+n+">\n"}function dt(e,t,n){var r,o="",a=xc({},t);for(r in e)if(e.hasOwnProperty(r)){delete a[r];var i=120-2*n-r.length-2,l=st(e[r],i);t.hasOwnProperty(r)?(i=st(t[r],i),o+=nt(n)+r+": "+l+"\n",o+=rt(n)+r+": "+i+"\n"):o+=nt(n)+r+": "+l+"\n"}for(var s in a)a.hasOwnProperty(s)&&(e=st(a[s],120-2*n-s.length-2),o+=rt(n)+s+": "+e+"\n");return o}function ft(e,t){var n=ot(e);if(null===n){for(n="",e=e.child;e;)n+=ft(e,t),e=e.sibling;return n}return tt(t)+"<"+n+">\n"}function pt(e,t){var n=et(e,t);if(n!==e&&(1!==e.children.length||e.children[0]!==n))return tt(t)+"...\n"+pt(n,t+1);n="";var r=e.fiber._debugInfo;if(r)for(var o=0;o<r.length;o++){var a=r[o].name;"string"==typeof a&&(n+=tt(t)+"<"+a+">\n",t++)}if(r="",o=e.fiber.pendingProps,6===e.fiber.tag)r=it(o,e.serverProps,t),t++;else if(null!==(a=ot(e.fiber)))if(void 0===e.serverProps){var i=120-2*(r=t)-a.length-2,l="";for(u in o)if(o.hasOwnProperty(u)&&"children"!==u){var s=ut(o[u],15);if(0>(i-=u.length+s.length+2)){l+=" ...";break}l+=" "+u+"="+s}r=tt(r)+"<"+a+l+">\n",t++}else null===e.serverProps?(r=ct(a,o,nt(t)),t++):"string"==typeof e.serverProps?console.error("Should not have matched a non HostText fiber to a Text node. This is a bug in React."):(r=function(e,t,n,r){var o="",a=new Map;for(u in n)n.hasOwnProperty(u)&&a.set(u.toLowerCase(),u);if(1===a.size&&a.has("children"))o+=ct(e,t,tt(r));else{for(var i in t)if(t.hasOwnProperty(i)&&"children"!==i){var l=120-2*(r+1)-i.length-1,s=a.get(i.toLowerCase());if(void 0!==s){a.delete(i.toLowerCase());var u=t[i];s=n[s];var c=ut(u,l);l=ut(s,l),"object"==typeof u&&null!==u&&"object"==typeof s&&null!==s&&"Object"===lt(u)&&"Object"===lt(s)&&(2<Object.keys(u).length||2<Object.keys(s).length||-1<c.indexOf("...")||-1<l.indexOf("..."))?o+=tt(r+1)+i+"={{\n"+dt(u,s,r+2)+tt(r+1)+"}}\n":(o+=nt(r+1)+i+"="+c+"\n",o+=rt(r+1)+i+"="+l+"\n")}else o+=tt(r+1)+i+"="+ut(t[i],l)+"\n"}a.forEach((function(e){if("children"!==e){var t=120-2*(r+1)-e.length-1;o+=rt(r+1)+e+"="+ut(n[e],t)+"\n"}})),o=""===o?tt(r)+"<"+e+">\n":tt(r)+"<"+e+"\n"+o+tt(r)+">\n"}return e=n.children,t=t.children,"string"==typeof e||"number"==typeof e||"bigint"==typeof e?(a="","string"!=typeof t&&"number"!=typeof t&&"bigint"!=typeof t||(a=""+t),o+=it(a,""+e,r+1)):"string"!=typeof t&&"number"!=typeof t&&"bigint"!=typeof t||(o=null==e?o+it(""+t,null,r+1):o+it(""+t,void 0,r+1)),o}(a,o,e.serverProps,t),t++);var u="";for(o=e.fiber.child,a=0;o&&a<e.children.length;)(i=e.children[a]).fiber===o?(u+=pt(i,t),a++):u+=ft(o,t),o=o.sibling;for(o&&0<e.children.length&&(u+=tt(t)+"...\n"),o=e.serverTail,null===e.serverProps&&t--,e=0;e<o.length;e++)u="string"==typeof(a=o[e])?u+(rt(t)+at(a,120-2*t)+"\n"):u+ct(a.type,a.props,rt(t));return n+r+u}function ht(e){try{return"\n\n"+pt(e,0)}catch(e){return""}}function mt(e,t,n){for(var r=t,o=null,a=0;r;)r===e&&(a=0),o={fiber:r,children:null!==o?[o]:[],serverProps:r===t?n:r===e?null:void 0,serverTail:[],distanceFromLeaf:a},a++,r=r.return;return null!==o?ht(o).replaceAll(/^[+-]/gm,">"):""}function gt(e,t){var n=xc({},e||bf),r={tag:t};return-1!==mf.indexOf(t)&&(n.aTagInScope=null,n.buttonTagInScope=null,n.nobrTagInScope=null),-1!==gf.indexOf(t)&&(n.pTagInButtonScope=null),-1!==hf.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(n.listItemTagAutoclosing=null,n.dlItemTagAutoclosing=null),n.current=r,"form"===t&&(n.formTag=r),"a"===t&&(n.aTagInScope=r),"button"===t&&(n.buttonTagInScope=r),"nobr"===t&&(n.nobrTagInScope=r),"p"===t&&(n.pTagInButtonScope=r),"li"===t&&(n.listItemTagAutoclosing=r),"dd"!==t&&"dt"!==t||(n.dlItemTagAutoclosing=r),"#document"===t||"html"===t?n.containerTagInScope=null:n.containerTagInScope||(n.containerTagInScope=r),null!==e||"#document"!==t&&"html"!==t&&"body"!==t?!0===n.implicitRootScope&&(n.implicitRootScope=!1):n.implicitRootScope=!0,n}function yt(e,t,n){switch(t){case"select":return"hr"===e||"option"===e||"optgroup"===e||"script"===e||"template"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":if(n)break;return"head"===e||"body"===e||"frameset"===e;case"frameset":return"frame"===e;case"#document":if(!n)return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===yf.indexOf(t);case"caption":case"col":case"colgroup":case"frameset":case"frame":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t;case"head":return n||null===t;case"html":return n&&"#document"===t||null===t;case"body":return n&&("#document"===t||"html"===t)||null===t}return!0}function bt(e,t){for(;e;){switch(e.tag){case 5:case 26:case 27:if(e.type===t)return e}e=e.return}return null}function vt(e,t){var n=(t=t||bf).current;if(t=(n=yt(e,n&&n.tag,t.implicitRootScope)?null:n)?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,t),!(t=n||t))return!0;var r=t.tag;if(t=String(!!n)+"|"+e+"|"+r,vf[t])return!1;vf[t]=!0;var o=(t=tf)?bt(t.return,r):null,a=null!==t&&null!==o?mt(o,t,null):"",i="<"+e+">";return n?(n="","table"===r&&"tr"===e&&(n+=" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),console.error("In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",i,r,n,a)):console.error("In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",i,r,a),t&&(e=t.return,null===o||null===e||o===e&&e._debugOwner===t._debugOwner||ze(o,(function(){console.error("<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",r,i)}))),!1}function kt(e,t,n){if(n||yt("#text",t,!1))return!0;if(vf[n="#text|"+t])return!1;vf[n]=!0;var r=(n=tf)?bt(n,t):null;return n=null!==n&&null!==r?mt(r,n,6!==n.tag?{children:null}:null):"",/\S/.test(e)?console.error("In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",t,n):console.error("In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",t,n),!1}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function St(e,t,n){var r=0===t.indexOf("--");r||(-1<t.indexOf("-")?Cf.hasOwnProperty(t)&&Cf[t]||(Cf[t]=!0,console.error("Unsupported style property %s. Did you mean %s?",t,t.replace(_f,"ms-").replace(Tf,(function(e,t){return t.toUpperCase()})))):xf.test(t)?Cf.hasOwnProperty(t)&&Cf[t]||(Cf[t]=!0,console.error("Unsupported vendor-prefixed style property %s. Did you mean %s?",t,t.charAt(0).toUpperCase()+t.slice(1))):!Ef.test(n)||Rf.hasOwnProperty(n)&&Rf[n]||(Rf[n]=!0,console.error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',t,n.replace(Ef,""))),"number"==typeof n&&(isNaN(n)?Pf||(Pf=!0,console.error("`NaN` is an invalid value for the `%s` css style property.",t)):isFinite(n)||Of||(Of=!0,console.error("`Infinity` is an invalid value for the `%s` css style property.",t)))),null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Lf.has(t)?"float"===t?e.cssFloat=n:(U(n,t),e[t]=(""+n).trim()):e[t]=n+"px"}function xt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");if(t&&Object.freeze(t),e=e.style,null!=n){if(t){var r={};if(n)for(var o in n)if(n.hasOwnProperty(o)&&!t.hasOwnProperty(o))for(var a=kf[o]||[o],i=0;i<a.length;i++)r[a[i]]=o;for(var l in t)if(t.hasOwnProperty(l)&&(!n||n[l]!==t[l]))for(o=kf[l]||[l],a=0;a<o.length;a++)r[o[a]]=l;for(var s in l={},t)for(o=kf[s]||[s],a=0;a<o.length;a++)l[o[a]]=s;for(var u in s={},r)if(o=r[u],(a=l[u])&&o!==a&&!s[i=o+","+a]){s[i]=!0,i=console;var c=t[o];i.error.call(i,"%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",null==c||"boolean"==typeof c||""===c?"Removing":"Updating",o,a)}}for(var d in n)!n.hasOwnProperty(d)||null!=t&&t.hasOwnProperty(d)||(0===d.indexOf("--")?e.setProperty(d,""):"float"===d?e.cssFloat="":e[d]="");for(var f in t)u=t[f],t.hasOwnProperty(f)&&n[f]!==u&&St(e,f,u)}else for(r in t)t.hasOwnProperty(r)&&St(e,r,t[r])}function _t(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Tt(e){return Nf.get(e)||e}function Et(e,t){if(id.call(Ff,t)&&Ff[t])return!0;if(jf.test(t)){if(e="aria-"+t.slice(4).toLowerCase(),null==(e=Af.hasOwnProperty(e)?e:null))return console.error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",t),Ff[t]=!0;if(t!==e)return console.error("Invalid ARIA attribute `%s`. Did you mean `%s`?",t,e),Ff[t]=!0}if(Mf.test(t)){if(e=t.toLowerCase(),null==(e=Af.hasOwnProperty(e)?e:null))return Ff[t]=!0,!1;t!==e&&(console.error("Unknown ARIA attribute `%s`. Did you mean `%s`?",t,e),Ff[t]=!0)}return!0}function Ct(e,t,n,r){if(id.call(Hf,t)&&Hf[t])return!0;var o=t.toLowerCase();if("onfocusin"===o||"onfocusout"===o)return console.error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),Hf[t]=!0;if("function"==typeof n&&("form"===e&&"action"===t||"input"===e&&"formAction"===t||"button"===e&&"formAction"===t))return!0;if(null!=r){if(e=r.possibleRegistrationNames,r.registrationNameDependencies.hasOwnProperty(t))return!0;if(null!=(r=e.hasOwnProperty(o)?e[o]:null))return console.error("Invalid event handler property `%s`. Did you mean `%s`?",t,r),Hf[t]=!0;if(Wf.test(t))return console.error("Unknown event handler property `%s`. It will be ignored.",t),Hf[t]=!0}else if(Wf.test(t))return Bf.test(t)&&console.error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",t),Hf[t]=!0;if(Vf.test(t)||qf.test(t))return!0;if("innerhtml"===o)return console.error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),Hf[t]=!0;if("aria"===o)return console.error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),Hf[t]=!0;if("is"===o&&null!=n&&"string"!=typeof n)return console.error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",typeof n),Hf[t]=!0;if("number"==typeof n&&isNaN(n))return console.error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",t),Hf[t]=!0;if(zf.hasOwnProperty(o)){if((o=zf[o])!==t)return console.error("Invalid DOM property `%s`. Did you mean `%s`?",t,o),Hf[t]=!0}else if(t!==o)return console.error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",t,o),Hf[t]=!0;switch(t){case"dangerouslySetInnerHTML":case"children":case"style":case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"innerText":case"textContent":return!0}switch(typeof n){case"boolean":switch(t){case"autoFocus":case"checked":case"multiple":case"muted":case"selected":case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":case"capture":case"download":case"inert":return!0;default:return"data-"===(o=t.toLowerCase().slice(0,5))||"aria-"===o||(n?console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',n,t,t,n,t):console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',n,t,t,n,t,t,t),Hf[t]=!0)}case"function":case"symbol":return Hf[t]=!0,!1;case"string":if("false"===n||"true"===n){switch(t){case"checked":case"selected":case"multiple":case"muted":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":case"inert":break;default:return!0}console.error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",n,t,"false"===n?"The browser will interpret it as a truthy value.":'Although this works, it will not work as expected if you pass the string "false".',t,n),Hf[t]=!0}}return!0}function Rt(e){return $f.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}function Pt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ot(e){var t=he(e);if(t&&(e=t.stateNode)){var n=e[Ad]||null;e:switch(e=t.stateNode,t.type){case"input":if(Ve(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(j(t,"name"),n=n.querySelectorAll('input[name="'+We(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[Ad]||null;if(!o)throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");Ve(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&Ue(r)}break e;case"textarea":Je(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&Ke(e,!!n.multiple,t,!1)}}}function Lt(e,t,n){if(Gf)return e(t,n);Gf=!0;try{return e(t)}finally{if(Gf=!1,(null!==Yf||null!==Kf)&&(Rl(),Yf&&(t=Yf,e=Kf,Kf=Yf=null,Ot(t),e)))for(t=0;t<e.length;t++)Ot(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Ad]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error("Expected `"+t+"` listener to be a function, instead got a value of `"+typeof n+"` type.");return n}function It(){if(ap)return ap;var e,t,n=op,r=n.length,o="value"in rp?rp.value:rp.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return ap=o.slice(e,1<t?1-t:void 0)}function Nt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function zt(){return!0}function At(){return!1}function Ft(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?zt:At,this.isPropagationStopped=At,this}return xc(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=zt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=zt)},persist:function(){},isPersistent:zt}),t}function Mt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kp[e])&&!!t[e]}function jt(){return Mt}function Ut(e,t){switch(e){case"keyup":return-1!==Cp.indexOf(t.keyCode);case"keydown":return t.keyCode!==Rp;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ht(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}function Wt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fp[e.type]:"textarea"===t}function Bt(e,t,n,r){Yf?Kf?Kf.push(r):Kf=[r]:Yf=r,0<(t=Os(t,"onChange")).length&&(n=new lp("onChange","change",null,n,r),e.push({event:n,listeners:t}))}function Vt(e){xs(e,0)}function qt(e){if(Ue(me(e)))return e}function $t(e,t){if("change"===e)return t}function Qt(){Mp&&(Mp.detachEvent("onpropertychange",Yt),jp=Mp=null)}function Yt(e){if("value"===e.propertyName&&qt(jp)){var t=[];Bt(t,jp,e,Pt(e)),Lt(Vt,t)}}function Kt(e,t,n){"focusin"===e?(Qt(),jp=n,(Mp=t).attachEvent("onpropertychange",Yt)):"focusout"===e&&Qt()}function Gt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qt(jp)}function Xt(e,t){if("click"===e)return qt(t)}function Jt(e,t){if("input"===e||"change"===e)return qt(t)}function Zt(e,t){if(Hp(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!id.call(t,o)||!Hp(e[o],t[o]))return!1}return!0}function en(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function tn(e,t){var n,r=en(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=en(r)}}function nn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?nn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function rn(e){for(var t=He((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=He((e=t.contentWindow).document)}return t}function on(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function an(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;$p||null==Bp||Bp!==He(r)||("selectionStart"in(r=Bp)&&on(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},qp&&Zt(qp,r)||(qp=r,0<(r=Os(Vp,"onSelect")).length&&(t=new lp("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Bp)))}function ln(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}function sn(e){if(Yp[e])return Yp[e];if(!Qp[e])return e;var t,n=Qp[e];for(t in n)if(n.hasOwnProperty(t)&&t in Kp)return Yp[e]=n[t];return e}function un(e,t){rh.set(e,t),be(t,[e])}function cn(e,t){if("object"==typeof e&&null!==e){var n=ah.get(e);return void 0!==n?n:(t={value:e,source:t,stack:Le(t)},ah.set(e,t),t)}return{value:e,source:t,stack:Le(t)}}function dn(){for(var e=uh,t=ch=uh=0;t<e;){var n=sh[t];sh[t++]=null;var r=sh[t];sh[t++]=null;var o=sh[t];sh[t++]=null;var a=sh[t];if(sh[t++]=null,null!==r&&null!==o){var i=r.pending;null===i?o.next=o:(o.next=i.next,i.next=o),r.pending=o}0!==a&&mn(n,o,a)}}function fn(e,t,n,r){sh[uh++]=e,sh[uh++]=t,sh[uh++]=n,sh[uh++]=r,ch|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function pn(e,t,n,r){return fn(e,t,n,r),gn(e)}function hn(e,t){return fn(e,null,null,t),gn(e)}function mn(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||e._visibility&ih||(o=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,o&&null!==t&&(o=31-Td(n),null===(r=(e=a.hiddenUpdates)[o])?e[o]=[t]:r.push(t),t.lane=536870912|n),a):null}function gn(e){if(Qb>$b)throw Jb=Qb=0,Zb=Yb=null,Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");Jb>Xb&&(Jb=0,Zb=null,console.error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.")),null===e.alternate&&4098&e.flags&&ss(e);for(var t=e,n=t.return;null!==n;)null===t.alternate&&!!(4098&t.flags)&&ss(e),n=(t=n).return;return 3===t.tag?t.stateNode:null}function yn(e){if(null===fh)return e;var t=fh(e);return void 0===t?e:t.current}function bn(e){if(null===fh)return e;var t=fh(e);return void 0===t?null!=e&&"function"==typeof e.render&&(t=yn(e.render),e.render!==t)?(t={$$typeof:Ic,render:t},void 0!==e.displayName&&(t.displayName=e.displayName),t):e:t.current}function vn(e,t){if(null===fh)return!1;var n=e.elementType,r=!1,o="object"==typeof(t=t.type)&&null!==t?t.$$typeof:null;switch(e.tag){case 1:"function"==typeof t&&(r=!0);break;case 0:("function"==typeof t||o===Fc)&&(r=!0);break;case 11:(o===Ic||o===Fc)&&(r=!0);break;case 14:case 15:(o===Ac||o===Fc)&&(r=!0);break;default:return!1}return!(!r||(e=fh(n),void 0===e||e!==fh(t)))}function kn(e){null!==fh&&"function"==typeof WeakSet&&(null===ph&&(ph=new WeakSet),ph.add(e))}function wn(e,t,n){var r=e.alternate,o=e.child,a=e.sibling,i=e.tag,l=e.type,s=null;switch(i){case 0:case 15:case 1:s=l;break;case 11:s=l.render}if(null===fh)throw Error("Expected resolveFamily to be set during hot reload.");var u=!1;l=!1,null!==s&&(void 0!==(s=fh(s))&&(n.has(s)?l=!0:t.has(s)&&(1===i?l=!0:u=!0))),null!==ph&&(ph.has(e)||null!==r&&ph.has(r))&&(l=!0),l&&(e._debugNeedsRemount=!0),(l||u)&&(null!==(r=hn(e,2))&&xl(r,e,2)),null===o||l||wn(o,t,n),null!==a&&wn(a,t,n)}function Sn(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null,this.actualDuration=-0,this.actualStartTime=-1.1,this.treeBaseDuration=this.selfBaseDuration=-0,this._debugTask=this._debugStack=this._debugOwner=this._debugInfo=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,kh||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}function xn(e){return!(!(e=e.prototype)||!e.isReactComponent)}function _n(e,t){var n=e.alternate;switch(null===n?((n=h(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugOwner=e._debugOwner,n._debugStack=e._debugStack,n._debugTask=e._debugTask,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null,n.actualDuration=-0,n.actualStartTime=-1.1),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext,_debugThenableState:t._debugThenableState},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugInfo=e._debugInfo,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case 0:case 15:case 1:n.type=yn(e.type);break;case 11:n.type=bn(e.type)}return n}function Tn(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext,_debugThenableState:t._debugThenableState},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration),e}function En(e,t,n,r,o,a){var i=0,l=e;if("function"==typeof e)xn(e)&&(i=1),l=yn(l);else if("string"==typeof e)i=function(e,t,n){var r=!n.ancestorInfo.containerTagInScope;if(n.context===Hv||null!=t.itemProp)return!r||null==t.itemProp||"meta"!==e&&"title"!==e&&"style"!==e&&"link"!==e&&"script"!==e||console.error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",e,e),!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href){r&&console.error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.');break}return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError){if("stylesheet"===t.rel&&"string"==typeof t.precedence){e=t.href;var o=t.onError,a=t.disabled;n=[],t.onLoad&&n.push("`onLoad`"),o&&n.push("`onError`"),null!=a&&n.push("`disabled`"),o=function(e,t){switch(e.length){case 0:return"";case 1:return e[0];case 2:return e[0]+" "+t+" "+e[1];default:return e.slice(0,-1).join(", ")+", "+t+" "+e[e.length-1]}}(n,"and"),o+=1===n.length?" prop":" props",a=1===n.length?"an "+o:"the "+o,n.length&&console.error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',e,a,o)}r&&("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href?console.error("Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"):(t.onError||t.onLoad)&&console.error("Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."));break}return"stylesheet"!==t.rel||(e=t.precedence,t=t.disabled,"string"!=typeof e&&r&&console.error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'),"string"==typeof e&&null==t);case"script":if(!(e=t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async)||t.onLoad||t.onError||!t.src||"string"!=typeof t.src){r&&(e?t.onLoad||t.onError?console.error("Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."):console.error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."):console.error('Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'));break}return!0;case"noscript":case"template":r&&console.error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",e)}return!1}(e,n,i=I())?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case Mc:return(t=h(31,n,t,o)).elementType=Mc,t.lanes=a,t;case Cc:return Rn(n.children,o,a,t);case Rc:i=8,o|=yh,o|=bh;break;case Pc:return r=o,"string"!=typeof(e=n).id&&console.error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',typeof e.id),(t=h(12,e,t,r|gh)).elementType=Pc,t.lanes=a,t.stateNode={effectDuration:0,passiveEffectDuration:0},t;case Nc:return(t=h(13,n,t,o)).elementType=Nc,t.lanes=a,t;case zc:return(t=h(19,n,t,o)).elementType=zc,t.lanes=a,t;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Oc:case Dc:i=10;break e;case Lc:i=9;break e;case Ic:i=11,l=bn(l);break e;case Ac:i=14;break e;case Fc:i=16,l=null;break e}l="",(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(l+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."),null===e?n="null":Kc(e)?n="array":void 0!==e&&e.$$typeof===Tc?(n="<"+(_(e.type)||"Unknown")+" />",l=" Did you accidentally export a JSX literal instead of a component?"):n=typeof e,(i=r?T(r):null)&&(l+="\n\nCheck the render method of `"+i+"`."),i=29,n=Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+n+"."+l),l=null}return(t=h(i,n,t,o)).elementType=e,t.type=l,t.lanes=a,t._debugOwner=r,t}function Cn(e,t,n){return(t=En(e.type,e.key,e.props,e._owner,t,n))._debugOwner=e._owner,t._debugStack=e._debugStack,t._debugTask=e._debugTask,t}function Rn(e,t,n,r){return(e=h(7,e,r,t)).lanes=n,e}function Pn(e,t,n){return(e=h(6,e,null,t)).lanes=n,e}function On(e,t,n){return(t=h(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ln(e,t){zn(),Sh[xh++]=Th,Sh[xh++]=_h,_h=e,Th=t}function Dn(e,t,n){zn(),Eh[Ch++]=Ph,Eh[Ch++]=Oh,Eh[Ch++]=Rh,Rh=e;var r=Ph;e=Oh;var o=32-Td(r)-1;r&=~(1<<o),n+=1;var a=32-Td(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Ph=1<<32-Td(t)+o|n<<o|r,Oh=a+e}else Ph=1<<a|n<<o|r,Oh=e}function In(e){zn(),null!==e.return&&(Ln(e,1),Dn(e,1,0))}function Nn(e){for(;e===_h;)_h=Sh[--xh],Sh[xh]=null,Th=Sh[--xh],Sh[xh]=null;for(;e===Rh;)Rh=Eh[--Ch],Eh[Ch]=null,Oh=Eh[--Ch],Eh[Ch]=null,Ph=Eh[--Ch],Eh[Ch]=null}function zn(){Ih||console.error("Expected to be hydrating. This is a bug in React. Please file an issue.")}function An(e,t){if(null===e.return){if(null===zh)zh={fiber:e,children:[],serverProps:void 0,serverTail:[],distanceFromLeaf:t};else{if(zh.fiber!==e)throw Error("Saw multiple hydration diff roots in a pass. This is a bug in React.");zh.distanceFromLeaf>t&&(zh.distanceFromLeaf=t)}return zh}var n=An(e.return,t+1).children;return 0<n.length&&n[n.length-1].fiber===e?((n=n[n.length-1]).distanceFromLeaf>t&&(n.distanceFromLeaf=t),n):(t={fiber:e,children:[],serverProps:void 0,serverTail:[],distanceFromLeaf:t},n.push(t),t)}function Fn(e,t){Nh||((e=An(e,0)).serverProps=null,null!==t&&(t=bu(t),e.serverTail.push(t)))}function Mn(e){var t="",n=zh;throw null!==n&&(zh=null,t=ht(n)),Vn(cn(Error("Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch"+t),e)),Mh}function jn(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[zd]=e,t[Ad]=r,Is(n,r),n){case"dialog":_s("cancel",t),_s("close",t);break;case"iframe":case"object":case"embed":_s("load",t);break;case"video":case"audio":for(n=0;n<fv.length;n++)_s(fv[n],t);break;case"source":_s("error",t);break;case"img":case"image":case"link":_s("error",t),_s("load",t);break;case"details":_s("toggle",t);break;case"input":ke("input",r),_s("invalid",t),Be(0,r),qe(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),je(t);break;case"option":Qe(0,r);break;case"select":ke("select",r),_s("invalid",t),Ge(t,r);break;case"textarea":ke("textarea",r),_s("invalid",t),Xe(0,r),Ze(t,r.value,r.defaultValue,r.children),je(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Ms(t.textContent,n)?(null!=r.popover&&(_s("beforetoggle",t),_s("toggle",t)),null!=r.onScroll&&_s("scroll",t),null!=r.onScrollEnd&&_s("scrollend",t),null!=r.onClick&&(t.onclick=js),t=!0):t=!1,t||Mn(e)}function Un(e){for(Lh=e.return;Lh;)switch(Lh.tag){case 5:case 13:return void(Fh=!1);case 27:case 3:return void(Fh=!0);default:Lh=Lh.return}}function Hn(e){if(e!==Lh)return!1;if(!Ih)return Un(e),Ih=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||tu(e.type,e.memoizedProps)),t=!t),t&&Dh){for(t=Dh;t;){var r=An(e,0),o=bu(t);r.serverTail.push(o),t="Suspense"===o.type?ku(t):yu(t.nextSibling)}Mn(e)}if(Un(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");Dh=ku(e)}else 27===n?(n=Dh,lu(e.type)?(e=Jv,Jv=null,Dh=e):Dh=n):Dh=Lh?yu(e.stateNode.nextSibling):null;return!0}function Wn(){Dh=Lh=null,Nh=Ih=!1}function Bn(){var e=Ah;return null!==e&&(null===Sb?Sb=e:Sb.push.apply(Sb,e),Ah=null),e}function Vn(e){null===Ah?Ah=[e]:Ah.push(e)}function qn(){var e=zh;if(null!==e){zh=null;for(var t=ht(e);0<e.children.length;)e=e.children[0];ze(e.fiber,(function(){console.error("A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s","https://react.dev/link/hydration-mismatch",t)}))}}function $n(){Qh=$h=null,Yh=!1}function Qn(e,t,n){P(Bh,t._currentValue,e),t._currentValue=n,P(Vh,t._currentRenderer,e),void 0!==t._currentRenderer&&null!==t._currentRenderer&&t._currentRenderer!==qh&&console.error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),t._currentRenderer=qh}function Yn(e,t){e._currentValue=Bh.current;var n=Vh.current;R(Vh,t),e._currentRenderer=n,R(Bh,t)}function Kn(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}e!==n&&console.error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.")}function Gn(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var i=o.child;a=a.firstContext;e:for(;null!==a;){var l=a;a=o;for(var s=0;s<t.length;s++)if(l.context===t[s]){a.lanes|=n,null!==(l=a.alternate)&&(l.lanes|=n),Kn(a.return,n,e),r||(i=null);break e}a=l.next}}else if(18===o.tag){if(null===(i=o.return))throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");i.lanes|=n,null!==(a=i.alternate)&&(a.lanes|=n),Kn(i,n,e),i=null}else i=o.child;if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Xn(e,t,n,r){e=null;for(var o=t,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var i=o.alternate;if(null===i)throw Error("Should have a current fiber. This is a bug in React.");if(null!==(i=i.memoizedProps)){var l=o.type;Hp(o.pendingProps.value,i.value)||(null!==e?e.push(l):e=[l])}}else if(o===ad.current){if(null===(i=o.alternate))throw Error("Should have a current fiber. This is a bug in React.");i.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Sk):e=[Sk])}o=o.return}null!==e&&Gn(t,e,n,r),t.flags|=262144}function Jn(e){for(e=e.firstContext;null!==e;){if(!Hp(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Zn(e){$h=e,Qh=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function er(e){return Yh&&console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."),nr($h,e)}function tr(e,t){return null===$h&&Zn(e),nr(e,t)}function nr(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===Qh){if(null===e)throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");Qh=t,e.dependencies={lanes:0,firstContext:t,_debugThenableState:null},e.flags|=524288}else Qh=Qh.next=t;return n}function rr(){return{controller:new Kh,data:new Map,refCount:0}}function or(e){e.controller.signal.aborted&&console.warn("A cache instance was retained after it was already freed. This likely indicates a bug in React."),e.refCount++}function ar(e){e.refCount--,0>e.refCount&&console.warn("A cache instance was released after it was already freed. This likely indicates a bug in React."),0===e.refCount&&Gh(Xh,(function(){e.controller.abort()}))}function ir(){var e=rm;return rm=0,e}function lr(e){var t=rm;return rm=e,t}function sr(e){var t=rm;return rm+=e,t}function ur(e){nm=Zh(),0>e.actualStartTime&&(e.actualStartTime=nm)}function cr(e){if(0<=nm){var t=Zh()-nm;e.actualDuration+=t,e.selfBaseDuration=t,nm=-1}}function dr(e){if(0<=nm){var t=Zh()-nm;e.actualDuration+=t,nm=-1}}function fr(){if(0<=nm){var e=Zh()-nm;nm=-1,rm+=e}}function pr(){nm=Zh()}function hr(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}function mr(){if(0==--lm&&null!==im){null!==um&&(um.status="fulfilled");var e=im;im=null,sm=0,um=null;for(var t=0;t<e.length;t++)(0,e[t])()}}function gr(){var e=dm.current;return null!==e?e:Gy.pooledCache}function yr(e,t){P(dm,null===t?dm.current:t.pool,e)}function br(){var e=gr();return null===e?null:{parent:Jh._currentValue,pool:e}}function vr(e){return"fulfilled"===(e=e.status)||"rejected"===e}function kr(){}function wr(e,t,n){null!==Gc.actQueue&&(Gc.didUsePromise=!0);var r=e.thenables;switch(void 0===(n=r[n])?r.push(t):n!==t&&(e.didWarnAboutUncachedPromise||(e.didWarnAboutUncachedPromise=!0,console.error("A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.")),t.then(kr,kr),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw xr(e=t.reason),e;default:if("string"==typeof t.status)t.then(kr,kr);else{if(null!==(e=Gy)&&100<e.shellSuspendCounter)throw Error("An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw xr(e=t.reason),e}throw Cm=t,Rm=!0,xm}}function Sr(){if(null===Cm)throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");var e=Cm;return Cm=null,Rm=!1,e}function xr(e){if(e===xm||e===Tm)throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.")}function _r(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Tr(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Er(e){return{lane:e,tag:Nm,payload:null,callback:null,next:null}}function Cr(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,Um===r&&!jm){var o=E(e);console.error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",o),jm=!0}return(Ky&Uy)!==jy?(null===(o=r.pending)?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=gn(e),mn(e,null,n),t):(fn(e,r,t,n),gn(e))}function Rr(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,ie(e,n)}}function Pr(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Or(){if(Hm){if(null!==um)throw um}}function Lr(e,t,n,r){Hm=!1;var o=e.updateQueue;Mm=!1,Um=o.shared;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&((l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s))}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var f=-536870913&l.lane,p=f!==l.lane;if(p?(Jy&f)===f:(r&f)===f){0!==f&&f===sm&&(Hm=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{f=e;var h=l,m=t,g=n;switch(h.tag){case zm:if("function"==typeof(h=h.payload)){Yh=!0;var y=h.call(g,d,m);if(f.mode&yh){W(!0);try{h.call(g,d,m)}finally{W(!1)}}Yh=!1,d=y;break e}d=h;break e;case Fm:f.flags=-65537&f.flags|128;case Nm:if("function"==typeof(y=h.payload)){if(Yh=!0,h=y.call(g,d,m),f.mode&yh){W(!0);try{y.call(g,d,m)}finally{W(!1)}}Yh=!1}else h=y;if(null==h)break e;d=xc({},d,h);break e;case Am:Mm=!0}}null!==(f=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[f]:p.push(f))}else p={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),gb|=i,e.lanes=i,e.memoizedState=d}Um=null}function Dr(e,t){if("function"!=typeof e)throw Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function Ir(e,t){var n=e.shared.hiddenCallbacks;if(null!==n)for(e.shared.hiddenCallbacks=null,e=0;e<n.length;e++)Dr(n[e],t)}function Nr(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Dr(n[e],t)}function zr(e,t){var n=hb;P(Bm,n,e),P(Wm,t,e),hb=n|t.baseLanes}function Ar(e){P(Bm,hb,e),P(Wm,Wm.current,e)}function Fr(e){hb=Bm.current,R(Wm,e),R(Bm,e)}function Mr(){var e=ig;null===lg?lg=[e]:lg.push(e)}function jr(){var e=ig;if(null!==lg&&(sg++,lg[sg]!==e)){var t=E(Km);if(!Vm.has(t)&&(Vm.add(t),null!==lg)){for(var n="",r=0;r<=sg;r++){var o=lg[r],a=r===sg?e:o;for(o=r+1+". "+o;30>o.length;)o+=" ";n+=o+=a+"\n"}console.error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,n)}}}function Ur(e){null==e||Kc(e)||console.error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",ig,typeof e)}function Hr(){var e=E(Km);Qm.has(e)||(Qm.add(e),console.error("ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",e))}function Wr(){throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.")}function Br(e,t){if(ug)return!1;if(null===t)return console.error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",ig),!1;e.length!==t.length&&console.error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",ig,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var n=0;n<t.length&&n<e.length;n++)if(!Hp(e[n],t[n]))return!1;return!0}function Vr(e,t,n,r,o,a){Ym=a,Km=t,lg=null!==e?e._debugHookTypes:null,sg=-1,ug=null!==e&&e.type!==t.type,"[object AsyncFunction]"!==Object.prototype.toString.call(n)&&"[object AsyncGeneratorFunction]"!==Object.prototype.toString.call(n)||(a=E(Km),$m.has(a)||($m.add(a),console.error("%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",null===a?"An unknown Component":"<"+a+">"))),t.memoizedState=null,t.updateQueue=null,t.lanes=0,Gc.H=null!==e&&null!==e.memoizedState?pg:null!==lg?fg:dg,eg=a=(t.mode&yh)!==hh;var i=kg(n,r,o);if(eg=!1,Zm&&(i=$r(t,n,r,o)),a){W(!0);try{i=$r(t,n,r,o)}finally{W(!1)}}return qr(e,t),i}function qr(e,t){t._debugHookTypes=lg,null===t.dependencies?null!==rg&&(t.dependencies={lanes:0,firstContext:null,_debugThenableState:rg}):t.dependencies._debugThenableState=rg,Gc.H=cg;var n=null!==Gm&&null!==Gm.next;if(Ym=0,lg=ig=Xm=Gm=Km=null,sg=-1,null!==e&&(65011712&e.flags)!=(65011712&t.flags)&&console.error("Internal React error: Expected static flag was missing. Please notify the React team."),Jm=!1,ng=0,rg=null,n)throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");null===e||py||null!==(e=e.dependencies)&&Jn(e)&&(py=!0),Rm?(Rm=!1,e=!0):e=!1,e&&(t=E(t)||"Unknown",qm.has(t)||$m.has(t)||(qm.add(t),console.error("`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.")))}function $r(e,t,n,r){Km=e;var o=0;do{if(Zm&&(rg=null),ng=0,Zm=!1,o>=ag)throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");if(o+=1,ug=!1,Xm=Gm=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}sg=-1,Gc.H=hg,a=kg(t,n,r)}while(Zm);return a}function Qr(){var e=Gc.H,t=e.useState()[0];return t="function"==typeof t.then?Zr(t):t,e=e.useState()[0],(null!==Gm?Gm.memoizedState:null)!==e&&(Km.flags|=1024),t}function Yr(){var e=0!==tg;return tg=0,e}function Kr(e,t,n){t.updateQueue=e.updateQueue,t.flags=(t.mode&bh)!==hh?-402655237&t.flags:-2053&t.flags,e.lanes&=~n}function Gr(e){if(Jm){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}Jm=!1}Ym=0,lg=Xm=Gm=Km=null,sg=-1,ig=null,Zm=!1,ng=tg=0,rg=null}function Xr(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xm?Km.memoizedState=Xm=e:Xm=Xm.next=e,Xm}function Jr(){if(null===Gm){var e=Km.alternate;e=null!==e?e.memoizedState:null}else e=Gm.next;var t=null===Xm?Km.memoizedState:Xm.next;if(null!==t)Xm=t,Gm=e;else{if(null===e){if(null===Km.alternate)throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");throw Error("Rendered more hooks than during the previous render.")}e={memoizedState:(Gm=e).memoizedState,baseState:Gm.baseState,baseQueue:Gm.baseQueue,queue:Gm.queue,next:null},null===Xm?Km.memoizedState=Xm=e:Xm=Xm.next=e}return Xm}function Zr(e){var t=ng;return ng+=1,null===rg&&(rg={didWarnAboutUncachedPromise:!1,thenables:[]}),e=wr(rg,e,t),t=Km,null===(null===Xm?t.memoizedState:Xm.next)&&(t=t.alternate,Gc.H=null!==t&&null!==t.memoizedState?pg:dg),e}function eo(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Zr(e);if(e.$$typeof===Dc)return er(e)}throw Error("An unsupported type was passed to use(): "+String(e))}function to(e){var t=null,n=Km.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Km.alternate;null!==r&&(null!==(r=r.updateQueue)&&(null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})))}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Km.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index])||ug)for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=jc;else n.length!==e&&console.error("Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",n.length,e);return t.index++,n}function no(e,t){return"function"==typeof t?t(e):t}function ro(e,t,n){var r=Xr();if(void 0!==n){var o=n(t);if(eg){W(!0);try{n(t)}finally{W(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=sa.bind(null,Km,e),[r.memoizedState,e]}function oo(e){return ao(Jr(),Gm,e)}function ao(e,t,n){var r=e.queue;if(null===r)throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");r.lastRenderedReducer=n;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}t.baseQueue!==o&&console.error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."),t.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var l=i=null,s=null,u=t=o.next,c=!1;do{var d=-536870913&u.lane;if(d!==u.lane?(Jy&d)===d:(Ym&d)===d){var f=u.revertLane;if(0===f)null!==s&&(s=s.next={lane:0,revertLane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),d===sm&&(c=!0);else{if((Ym&f)===f){u=u.next,f===sm&&(c=!0);continue}d={lane:0,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===s?(l=s=d,i=a):s=s.next=d,Km.lanes|=f,gb|=f}d=u.action,eg&&n(a,d),a=u.hasEagerState?u.eagerState:n(a,d)}else f={lane:d,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===s?(l=s=f,i=a):s=s.next=f,Km.lanes|=d,gb|=d;u=u.next}while(null!==u&&u!==t);if(null===s?i=a:s.next=l,!Hp(a,e.memoizedState)&&(py=!0,c&&null!==(n=um)))throw n;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function io(e){var t=Jr(),n=t.queue;if(null===n)throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);Hp(a,t.memoizedState)||(py=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function lo(e,t,n){var r=Km,o=Xr();if(Ih){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");var a=n();Sm||a===n()||(console.error("The result of getServerSnapshot should be cached to avoid an infinite loop"),Sm=!0)}else{if(a=t(),Sm||(n=t(),Hp(a,n)||(console.error("The result of getSnapshot should be cached to avoid an infinite loop"),Sm=!0)),null===Gy)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");124&Jy||uo(r,t,a)}return o.memoizedState=a,n={value:a,getSnapshot:t},o.queue=n,Fo(fo.bind(null,r,n,e),[e]),r.flags|=2048,Io(Om|Im,{destroy:void 0,resource:void 0},co.bind(null,r,n,a,t),null),a}function so(e,t,n){var r=Km,o=Jr(),a=Ih;if(a){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");n=n()}else if(n=t(),!Sm){var i=t();Hp(n,i)||(console.error("The result of getSnapshot should be cached to avoid an infinite loop"),Sm=!0)}(i=!Hp((Gm||o).memoizedState,n))&&(o.memoizedState=n,py=!0),o=o.queue;var l=fo.bind(null,r,o,e);if(Ao(2048,Im,l,[e]),o.getSnapshot!==t||i||null!==Xm&&Xm.memoizedState.tag&Om){if(r.flags|=2048,Io(Om|Im,{destroy:void 0,resource:void 0},co.bind(null,r,o,n,t),null),null===Gy)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");a||124&Ym||uo(r,t,n)}return n}function uo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Km.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Km.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function co(e,t,n,r){t.value=n,t.getSnapshot=r,po(t)&&ho(e)}function fo(e,t,n){return n((function(){po(t)&&ho(e)}))}function po(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Hp(e,n)}catch(e){return!0}}function ho(e){var t=hn(e,2);null!==t&&xl(t,e,2)}function mo(e){var t=Xr();if("function"==typeof e){var n=e;if(e=n(),eg){W(!0);try{n()}finally{W(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:no,lastRenderedState:e},t}function go(e){var t=(e=mo(e)).queue,n=ua.bind(null,Km,t);return t.dispatch=n,[e.memoizedState,n]}function yo(e){var t=Xr();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=da.bind(null,Km,!0,n),n.dispatch=t,[e,t]}function bo(e,t){return vo(Jr(),Gm,e,t)}function vo(e,t,n,r){return e.baseState=n,ao(e,Gm,"function"==typeof r?r:no)}function ko(e,t){var n=Jr();return null!==Gm?vo(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])}function wo(e,t,n,r,o){if(fa(e))throw Error("Cannot update form state while rendering.");if(null!==(e=t.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==Gc.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,So(t,a)):(a.next=n.next,t.pending=n.next=a)}}function So(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var a=Gc.T,i={};Gc.T=i,Gc.T._updatedFibers=new Set;try{var l=n(o,r),s=Gc.S;null!==s&&s(i,l),xo(e,t,l)}catch(n){To(e,t,n)}finally{Gc.T=a,null===a&&i._updatedFibers&&(e=i._updatedFibers.size,i._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."))}}else try{xo(e,t,i=n(o,r))}catch(n){To(e,t,n)}}function xo(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?(n.then((function(n){_o(e,t,n)}),(function(n){return To(e,t,n)})),t.isTransition||console.error("An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop.")):_o(e,t,n)}function _o(e,t,n){t.status="fulfilled",t.value=n,Eo(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,So(e,n)))}function To(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Eo(t),t=t.next}while(t!==r)}e.action=null}function Eo(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Co(e,t){return t}function Ro(e,t){if(Ih){var n=Gy.formState;if(null!==n){e:{var r=Km;if(Ih){if(Dh){t:{for(var o=Dh,a=Fh;8!==o.nodeType;){if(!a){o=null;break t}if(null===(o=yu(o.nextSibling))){o=null;break t}}o=(a=o.data)===Av||a===Fv?o:null}if(o){Dh=yu(o.nextSibling),r=o.data===Av;break e}}Mn(r)}r=!1}r&&(t=n[0])}}return(n=Xr()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Co,lastRenderedState:t},n.queue=r,n=ua.bind(null,Km,r),r.dispatch=n,r=mo(!1),a=da.bind(null,Km,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=Xr()).queue=o,n=wo.bind(null,Km,o,a,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function Po(e){return Oo(Jr(),Gm,e)}function Oo(e,t,n){if(t=ao(e,t,Co)[0],e=oo(no)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Zr(t)}catch(e){if(e===xm)throw Tm;throw e}else r=t;var o=(t=Jr()).queue,a=o.dispatch;return n!==t.memoizedState&&(Km.flags|=2048,Io(Om|Im,{destroy:void 0,resource:void 0},Lo.bind(null,o,n),null)),[r,a,e]}function Lo(e,t){e.action=t}function Do(e){var t=Jr(),n=Gm;if(null!==n)return Oo(t,n,e);Jr(),t=t.memoizedState;var r=(n=Jr()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Io(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=Km.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Km.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function No(e){return e={current:e},Xr().memoizedState=e}function zo(e,t,n,r){var o=Xr();r=void 0===r?null:r,Km.flags|=e,o.memoizedState=Io(Om|t,{destroy:void 0,resource:void 0},n,r)}function Ao(e,t,n,r){var o=Jr();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==Gm&&null!==r&&Br(r,Gm.memoizedState.deps)?o.memoizedState=Io(t,a,n,r):(Km.flags|=e,o.memoizedState=Io(Om|t,a,n,r))}function Fo(e,t){(Km.mode&bh)!==hh&&(Km.mode&vh)===hh?zo(276826112,Im,e,t):zo(8390656,Im,e,t)}function Mo(e,t){var n=4194308;return(Km.mode&bh)!==hh&&(n|=134217728),zo(n,Dm,e,t)}function jo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return t.hasOwnProperty("current")||console.error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(t).join(", ")+"}"),e=e(),t.current=e,function(){t.current=null}}function Uo(e,t,n){"function"!=typeof t&&console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null"),n=null!=n?n.concat([e]):null;var r=4194308;(Km.mode&bh)!==hh&&(r|=134217728),zo(r,Dm,jo.bind(null,t,e),n)}function Ho(e,t,n){"function"!=typeof t&&console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null"),n=null!=n?n.concat([e]):null,Ao(4,Dm,jo.bind(null,t,e),n)}function Wo(e,t){return Xr().memoizedState=[e,void 0===t?null:t],e}function Bo(e,t){var n=Jr();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Br(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Vo(e,t){var n=Xr();t=void 0===t?null:t;var r=e();if(eg){W(!0);try{e()}finally{W(!1)}}return n.memoizedState=[r,t],r}function qo(e,t){var n=Jr();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Br(t,r[1]))return r[0];if(r=e(),eg){W(!0);try{e()}finally{W(!1)}}return n.memoizedState=[r,t],r}function $o(e,t){return Ko(Xr(),e,t)}function Qo(e,t){return Go(Jr(),Gm.memoizedState,e,t)}function Yo(e,t){var n=Jr();return null===Gm?Ko(n,e,t):Go(n,Gm.memoizedState,e,t)}function Ko(e,t,n){return void 0===n||1073741824&Ym?e.memoizedState=t:(e.memoizedState=n,e=Sl(),Km.lanes|=e,gb|=e,n)}function Go(e,t,n,r){return Hp(n,t)?n:null!==Wm.current?(e=Ko(e,n,r),Hp(e,t)||(py=!0),e):42&Ym?(e=Sl(),Km.lanes|=e,gb|=e,t):(py=!0,e.memoizedState=n)}function Xo(e,t,n,r,o){var a=Xc.p;Xc.p=0!==a&&a<Ld?a:Ld;var i,l,s,u=Gc.T,c={};Gc.T=c,da(e,!1,t,n),c._updatedFibers=new Set;try{var d=o(),f=Gc.S;if(null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then)ca(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),wl(e));else ca(e,t,r,wl(e))}catch(n){ca(e,t,{then:function(){},status:"rejected",reason:n},wl(e))}finally{Xc.p=a,Gc.T=u,null===u&&c._updatedFibers&&(e=c._updatedFibers.size,c._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."))}}function Jo(e,t,n,r){if(5!==e.tag)throw Error("Expected the form instance to be a HostComponent. This is a bug in React.");var o=Zo(e).queue;Xo(e,o,t,wk,null===n?f:function(){return ea(e),n(r)})}function Zo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:wk,baseState:wk,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:no,lastRenderedState:wk},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:no,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function ea(e){null===Gc.T&&console.error("requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."),ca(e,Zo(e).next.queue,{},wl(e))}function ta(){var e=mo(!1);return e=Xo.bind(null,Km,e.queue,!0,!1),Xr().memoizedState=e,[!1,e]}function na(){var e=oo(no)[0],t=Jr().memoizedState;return["boolean"==typeof e?e:Zr(e),t]}function ra(){var e=io(no)[0],t=Jr().memoizedState;return["boolean"==typeof e?e:Zr(e),t]}function oa(){return er(Sk)}function aa(){var e=Xr(),t=Gy.identifierPrefix;if(Ih){var n=Oh;t="«"+t+"R"+(n=(Ph&~(1<<32-Td(Ph)-1)).toString(32)+n),0<(n=tg++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=og++).toString(32)+"»";return e.memoizedState=t}function ia(){return Xr().memoizedState=la.bind(null,Km)}function la(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var r=wl(n),o=Cr(n,e=Er(r),r);return null!==o&&(xl(o,n,r),Rr(o,n,r)),n=rr(),null!=t&&null!==o&&console.error("The seed argument is not enabled outside experimental channels."),void(e.payload={cache:n})}n=n.return}}function sa(e,t,n){var r=arguments;"function"==typeof r[3]&&console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var o={lane:r=wl(e),revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};fa(e)?pa(t,o):null!==(o=pn(e,t,o,r))&&(xl(o,e,r),ha(o,t,r)),K(e,r)}function ua(e,t,n){var r=arguments;"function"==typeof r[3]&&console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."),ca(e,t,n,r=wl(e)),K(e,r)}function ca(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(fa(e))pa(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer)){var i=Gc.H;Gc.H=gg;try{var l=t.lastRenderedState,s=a(l,n);if(o.hasEagerState=!0,o.eagerState=s,Hp(s,l))return fn(e,t,o,0),null===Gy&&dn(),!1}catch(e){}finally{Gc.H=i}}if(null!==(n=pn(e,t,o,r)))return xl(n,e,r),ha(n,t,r),!0}return!1}function da(e,t,n,r){if(null===Gc.T&&0===sm&&console.error("An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."),r={lane:2,revertLane:vs(),action:r,hasEagerState:!1,eagerState:null,next:null},fa(e)){if(t)throw Error("Cannot update optimistic state while rendering.");console.error("Cannot call startTransition while rendering.")}else null!==(t=pn(e,n,r,2))&&xl(t,e,2);K(e,2)}function fa(e){var t=e.alternate;return e===Km||null!==t&&t===Km}function pa(e,t){Zm=Jm=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ha(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,ie(e,n)}}function ma(e){var t=jg;return null!=e&&(jg=null===t?e:t.concat(e)),t}function ga(e,t,n){for(var r=Object.keys(e.props),o=0;o<r.length;o++){var a=r[o];if("children"!==a&&"key"!==a){null===t&&((t=Cn(e,n.mode,0))._debugInfo=jg,t.return=n),ze(t,(function(e){console.error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",e)}),a);break}}}function ya(e){var t=Mg;return Mg+=1,null===Fg&&(Fg={didWarnAboutUncachedPromise:!1,thenables:[]}),wr(Fg,e,t)}function ba(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function va(e,t){if(t.$$typeof===_c)throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');throw e=Object.prototype.toString.call(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.")}function ka(e,t){var n=E(e)||"Component";Wg[n]||(Wg[n]=!0,t=t.displayName||t.name||"Component",3===e.tag?console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",t,t,t):console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",t,t,n,t,n))}function wa(e,t){var n=E(e)||"Component";Bg[n]||(Bg[n]=!0,t=String(t),3===e.tag?console.error("Symbols are not valid as a React child.\n  root.render(%s)",t):console.error("Symbols are not valid as a React child.\n  <%s>%s</%s>",n,t,n))}function Sa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=_n(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Pn(n,e.mode,r)).return=e,t._debugOwner=e,t._debugTask=e._debugTask,t._debugInfo=jg,t):((t=o(t,n)).return=e,t._debugInfo=jg,t)}function s(e,t,n,r){var a=n.type;return a===Cc?(ga(n,t=d(e,t,n.props.children,r,n.key),e),t):null!==t&&(t.elementType===a||vn(t,n)||"object"==typeof a&&null!==a&&a.$$typeof===Fc&&Ag(a)===t.type)?(ba(t=o(t,n.props),n),t.return=e,t._debugOwner=n._owner,t._debugInfo=jg,t):(ba(t=Cn(n,e.mode,r),n),t.return=e,t._debugInfo=jg,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=On(n,e.mode,r)).return=e,t._debugInfo=jg,t):((t=o(t,n.children||[])).return=e,t._debugInfo=jg,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Rn(n,e.mode,r,a)).return=e,t._debugOwner=e,t._debugTask=e._debugTask,t._debugInfo=jg,t):((t=o(t,n)).return=e,t._debugInfo=jg,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Pn(""+t,e.mode,n)).return=e,t._debugOwner=e,t._debugTask=e._debugTask,t._debugInfo=jg,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Tc:return ba(n=Cn(t,e.mode,n),t),n.return=e,e=ma(t._debugInfo),n._debugInfo=jg,jg=e,n;case Ec:return(t=On(t,e.mode,n)).return=e,t._debugInfo=jg,t;case Fc:var r=ma(t._debugInfo);return e=f(e,t=Ag(t),n),jg=r,e}if(Kc(t)||x(t))return(n=Rn(t,e.mode,n,null)).return=e,n._debugOwner=e,n._debugTask=e._debugTask,e=ma(t._debugInfo),n._debugInfo=jg,jg=e,n;if("function"==typeof t.then)return r=ma(t._debugInfo),e=f(e,ya(t),n),jg=r,e;if(t.$$typeof===Dc)return f(e,tr(e,t),n);va(e,t)}return"function"==typeof t&&ka(e,t),"symbol"==typeof t&&wa(e,t),null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Tc:return n.key===o?(o=ma(n._debugInfo),e=s(e,t,n,r),jg=o,e):null;case Ec:return n.key===o?c(e,t,n,r):null;case Fc:return o=ma(n._debugInfo),e=p(e,t,n=Ag(n),r),jg=o,e}if(Kc(n)||x(n))return null!==o?null:(o=ma(n._debugInfo),e=d(e,t,n,r,null),jg=o,e);if("function"==typeof n.then)return o=ma(n._debugInfo),e=p(e,t,ya(n),r),jg=o,e;if(n.$$typeof===Dc)return p(e,t,tr(e,n),r);va(e,n)}return"function"==typeof n&&ka(e,n),"symbol"==typeof n&&wa(e,n),null}function m(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Tc:return n=e.get(null===r.key?n:r.key)||null,e=ma(r._debugInfo),t=s(t,n,r,o),jg=e,t;case Ec:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case Fc:var a=ma(r._debugInfo);return t=m(e,t,n,r=Ag(r),o),jg=a,t}if(Kc(r)||x(r))return n=e.get(n)||null,e=ma(r._debugInfo),t=d(t,n,r,o,null),jg=e,t;if("function"==typeof r.then)return a=ma(r._debugInfo),t=m(e,t,n,ya(r),o),jg=a,t;if(r.$$typeof===Dc)return m(e,t,n,tr(t,r),o);va(t,r)}return"function"==typeof r&&ka(t,r),"symbol"==typeof r&&wa(t,r),null}function g(e,t,n,r){if("object"!=typeof n||null===n)return r;switch(n.$$typeof){case Tc:case Ec:u(e,t,n);var o=n.key;if("string"!=typeof o)break;if(null===r){(r=new Set).add(o);break}if(!r.has(o)){r.add(o);break}ze(t,(function(){console.error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",o)}));break;case Fc:g(e,t,n=Ag(n),r)}return r}function y(l,s,u,c){if("object"==typeof u&&null!==u&&u.type===Cc&&null===u.key&&(ga(u,null,l),u=u.props.children),"object"==typeof u&&null!==u){switch(u.$$typeof){case Tc:var d=ma(u._debugInfo);e:{for(var h=u.key;null!==s;){if(s.key===h){if((h=u.type)===Cc){if(7===s.tag){n(l,s.sibling),(c=o(s,u.props.children)).return=l,c._debugOwner=u._owner,c._debugInfo=jg,ga(u,c,l),l=c;break e}}else if(s.elementType===h||vn(s,u)||"object"==typeof h&&null!==h&&h.$$typeof===Fc&&Ag(h)===s.type){n(l,s.sibling),ba(c=o(s,u.props),u),c.return=l,c._debugOwner=u._owner,c._debugInfo=jg,l=c;break e}n(l,s);break}t(l,s),s=s.sibling}u.type===Cc?((c=Rn(u.props.children,l.mode,c,u.key)).return=l,c._debugOwner=l,c._debugTask=l._debugTask,c._debugInfo=jg,ga(u,c,l),l=c):(ba(c=Cn(u,l.mode,c),u),c.return=l,c._debugInfo=jg,l=c)}return l=i(l),jg=d,l;case Ec:e:{for(u=(d=u).key;null!==s;){if(s.key===u){if(4===s.tag&&s.stateNode.containerInfo===d.containerInfo&&s.stateNode.implementation===d.implementation){n(l,s.sibling),(c=o(s,d.children||[])).return=l,l=c;break e}n(l,s);break}t(l,s),s=s.sibling}(c=On(d,l.mode,c)).return=l,l=c}return i(l);case Fc:return d=ma(u._debugInfo),l=y(l,s,u=Ag(u),c),jg=d,l}if(Kc(u))return d=ma(u._debugInfo),l=function(o,i,l,s){for(var u=null,c=null,d=null,h=i,y=i=0,b=null;null!==h&&y<l.length;y++){h.index>y?(b=h,h=null):b=h.sibling;var v=p(o,h,l[y],s);if(null===v){null===h&&(h=b);break}u=g(o,v,l[y],u),e&&h&&null===v.alternate&&t(o,h),i=a(v,i,y),null===d?c=v:d.sibling=v,d=v,h=b}if(y===l.length)return n(o,h),Ih&&Ln(o,y),c;if(null===h){for(;y<l.length;y++)null!==(h=f(o,l[y],s))&&(u=g(o,h,l[y],u),i=a(h,i,y),null===d?c=h:d.sibling=h,d=h);return Ih&&Ln(o,y),c}for(h=r(h);y<l.length;y++)null!==(b=m(h,o,y,l[y],s))&&(u=g(o,b,l[y],u),e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),i=a(b,i,y),null===d?c=b:d.sibling=b,d=b);return e&&h.forEach((function(e){return t(o,e)})),Ih&&Ln(o,y),c}(l,s,u,c),jg=d,l;if(x(u)){if(d=ma(u._debugInfo),"function"!=typeof(h=x(u)))throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");var b=h.call(u);return b===u?0===l.tag&&"[object GeneratorFunction]"===Object.prototype.toString.call(l.type)&&"[object Generator]"===Object.prototype.toString.call(b)||(Ug||console.error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."),Ug=!0):u.entries!==h||bg||(console.error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),bg=!0),l=function(o,i,l,s){if(null==l)throw Error("An iterable object provided no iterator.");for(var u=null,c=null,d=i,h=i=0,y=null,b=null,v=l.next();null!==d&&!v.done;h++,v=l.next()){d.index>h?(y=d,d=null):y=d.sibling;var k=p(o,d,v.value,s);if(null===k){null===d&&(d=y);break}b=g(o,k,v.value,b),e&&d&&null===k.alternate&&t(o,d),i=a(k,i,h),null===c?u=k:c.sibling=k,c=k,d=y}if(v.done)return n(o,d),Ih&&Ln(o,h),u;if(null===d){for(;!v.done;h++,v=l.next())null!==(d=f(o,v.value,s))&&(b=g(o,d,v.value,b),i=a(d,i,h),null===c?u=d:c.sibling=d,c=d);return Ih&&Ln(o,h),u}for(d=r(d);!v.done;h++,v=l.next())null!==(y=m(d,o,h,v.value,s))&&(b=g(o,y,v.value,b),e&&null!==y.alternate&&d.delete(null===y.key?h:y.key),i=a(y,i,h),null===c?u=y:c.sibling=y,c=y);return e&&d.forEach((function(e){return t(o,e)})),Ih&&Ln(o,h),u}(l,s,b,c),jg=d,l}if("function"==typeof u.then)return d=ma(u._debugInfo),l=y(l,s,ya(u),c),jg=d,l;if(u.$$typeof===Dc)return y(l,s,tr(l,u),c);va(l,u)}return"string"==typeof u&&""!==u||"number"==typeof u||"bigint"==typeof u?(d=""+u,null!==s&&6===s.tag?(n(l,s.sibling),(c=o(s,d)).return=l,l=c):(n(l,s),(c=Pn(d,l.mode,c)).return=l,c._debugOwner=l,c._debugTask=l._debugTask,c._debugInfo=jg,l=c),i(l)):("function"==typeof u&&ka(l,u),"symbol"==typeof u&&wa(l,u),n(l,s))}return function(e,t,n,r){var o=jg;jg=null;try{Mg=0;var a=y(e,t,n,r);return Fg=null,a}catch(t){if(t===xm||t===Tm)throw t;var i=h(29,t,null,e.mode);i.lanes=r,i.return=e;var l=i._debugInfo=jg;if(i._debugOwner=e._debugOwner,i._debugTask=e._debugTask,null!=l)for(var s=l.length-1;0<=s;s--)if("string"==typeof l[s].stack){i._debugOwner=l[s],i._debugTask=l[s].debugTask;break}return i}finally{jg=o}}}function xa(e){var t=e.alternate;P(Gg,Gg.current&Yg,e),P($g,e,e),null===Qg&&(null===t||null!==Wm.current||null!==t.memoizedState)&&(Qg=e)}function _a(e){if(22===e.tag){if(P(Gg,Gg.current,e),P($g,e,e),null===Qg){var t=e.alternate;null!==t&&null!==t.memoizedState&&(Qg=e)}}else Ta(e)}function Ta(e){P(Gg,Gg.current,e),P($g,$g.current,e)}function Ea(e){R($g,e),Qg===e&&(Qg=null),R(Gg,e)}function Ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Lv||gu(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ra(e){if(null!==e&&"function"!=typeof e){var t=String(e);ly.has(t)||(ly.add(t),console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.",e))}}function Pa(e,t,n,r){var o=e.memoizedState,a=n(r,o);if(e.mode&yh){W(!0);try{a=n(r,o)}finally{W(!1)}}void 0===a&&(t=_(t)||"Component",ry.has(t)||(ry.add(t),console.error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",t))),o=null==a?o:xc({},o,a),e.memoizedState=o,0===e.lanes&&(e.updateQueue.baseState=o)}function Oa(e,t,n,r,o,a,i){var l=e.stateNode;if("function"==typeof l.shouldComponentUpdate){if(n=l.shouldComponentUpdate(r,a,i),e.mode&yh){W(!0);try{n=l.shouldComponentUpdate(r,a,i)}finally{W(!1)}}return void 0===n&&console.error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",_(t)||"Component"),n}return!t.prototype||!t.prototype.isPureReactComponent||(!Zt(n,r)||!Zt(o,a))}function La(e,t,n,r){var o=t.state;"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==o&&(e=E(e)||"Component",Jg.has(e)||(Jg.add(e),console.error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",e)),sy.enqueueReplaceState(t,t.state,null))}function Da(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=xc({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}function Ia(e){uy(e),console.warn("%s\n\n%s\n",cy?"An error occurred in the <"+cy+"> component.":"An error occurred in one of your React components.","Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries.")}function Na(e){var t=cy?"The above error occurred in the <"+cy+"> component.":"The above error occurred in one of your React components.",n="React will try to recreate this component tree from scratch using the error boundary you provided, "+(dy||"Anonymous")+".";if("object"==typeof e&&null!==e&&"string"==typeof e.environmentName){var r=e.environmentName;"string"==typeof(e=["%o\n\n%s\n\n%s\n",e,t,n].slice(0))[0]?e.splice(0,1,xk+e[0],_k,Ek+r+Ek,Tk):e.splice(0,0,xk,_k,Ek+r+Ek,Tk),e.unshift(console),(r=Ck.apply(console.error,e))()}else console.error("%o\n\n%s\n\n%s\n",e,t,n)}function za(e){uy(e)}function Aa(e,t){try{cy=t.source?E(t.source):null,dy=null;var n=t.value;if(null!==Gc.actQueue)Gc.thrownErrors.push(n);else(0,e.onUncaughtError)(n,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Fa(e,t,n){try{cy=n.source?E(n.source):null,dy=E(t),(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Ma(e,t,n){return(n=Er(n)).tag=Fm,n.payload={element:null},n.callback=function(){ze(t.source,Aa,e,t)},n}function ja(e){return(e=Er(e)).tag=Fm,e}function Ua(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){kn(n),ze(r.source,Fa,t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){kn(n),ze(r.source,Fa,t,n,r),"function"!=typeof o&&(null===Pb?Pb=new Set([this]):Pb.add(this)),Rg(this,r),"function"==typeof o||!(2&n.lanes)&&console.error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",E(n)||"Unknown")})}function Ha(e,t,n,r){t.child=null===e?qg(t,null,n,r):Vg(t,e.child,n,r)}function Wa(e,t,n,r,o){n=n.render;var a=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return Zn(t),q(t),r=Vr(e,t,n,i,a,o),l=Yr(),$(),null===e||py?(Ih&&l&&In(t),t.flags|=1,Ha(e,t,r,o),t.child):(Kr(e,t,o),ui(e,t,o))}function Ba(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||xn(a)||void 0!==a.defaultProps||null!==n.compare?((e=En(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(n=yn(a),t.tag=15,t.type=n,Ja(t,a),Va(e,t,n,r,o))}if(a=e.child,!ci(e,o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:Zt)(i,r)&&e.ref===t.ref)return ui(e,t,o)}return t.flags|=1,(e=_n(a,r)).ref=t.ref,e.return=t,t.child=e}function Va(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(Zt(a,r)&&e.ref===t.ref&&t.type===e.type){if(py=!1,t.pendingProps=r=a,!ci(e,o))return t.lanes=e.lanes,ui(e,t,o);131072&e.flags&&(py=!0)}}return Ya(e,t,n,r,o)}function qa(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(o=t.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return $a(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,$a(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&yr(t,null!==a?a.cachePool:null),null!==a?zr(t,a):Ar(t),_a(t)}else null!==a?(yr(t,a.cachePool),zr(t,a),Ta(t),t.memoizedState=null):(null!==e&&yr(t,null),Ar(t),Ta(t));return Ha(e,t,o,n),t.child}function $a(e,t,n,r){var o=gr();return o=null===o?null:{parent:Jh._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&yr(t,null),Ar(t),_a(t),null!==e&&Xn(e,t,r,!0),null}function Qa(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");null!==e&&e.ref===n||(t.flags|=4194816)}}function Ya(e,t,n,r,o){if(n.prototype&&"function"==typeof n.prototype.render){var a=_(n)||"Unknown";hy[a]||(console.error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",a,a),hy[a]=!0)}return t.mode&yh&&fm.recordLegacyContextWarning(t,null),null===e&&(Ja(t,t.type),n.contextTypes&&(a=_(n)||"Unknown",gy[a]||(gy[a]=!0,console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",a)))),Zn(t),q(t),n=Vr(e,t,n,r,void 0,o),r=Yr(),$(),null===e||py?(Ih&&r&&In(t),t.flags|=1,Ha(e,t,n,o),t.child):(Kr(e,t,o),ui(e,t,o))}function Ka(e,t,n,r,o,a){return Zn(t),q(t),sg=-1,ug=null!==e&&e.type!==t.type,t.updateQueue=null,n=$r(t,r,n,o),qr(e,t),r=Yr(),$(),null===e||py?(Ih&&r&&In(t),t.flags|=1,Ha(e,t,n,a),t.child):(Kr(e,t,a),ui(e,t,a))}function Ga(e,t,n,r,o){switch(s(t)){case!1:var a=t.stateNode,i=new t.type(t.memoizedProps,a.context).state;a.updater.enqueueSetState(a,i,null);break;case!0:t.flags|=128,t.flags|=65536,a=Error("Simulated error coming from DevTools");var l=o&-o;if(t.lanes|=l,null===(i=Gy))throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");Ua(l=ja(l),i,t,cn(a,t)),Pr(t,l)}if(Zn(t),null===t.stateNode){if(i=dh,a=n.contextType,"contextType"in n&&null!==a&&(void 0===a||a.$$typeof!==Dc)&&!iy.has(n)&&(iy.add(n),l=void 0===a?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof a?" However, it is set to a "+typeof a+".":a.$$typeof===Lc?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(a).join(", ")+"}.",console.error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",_(n)||"Component",l)),"object"==typeof a&&null!==a&&(i=er(a)),a=new n(r,i),t.mode&yh){W(!0);try{a=new n(r,i)}finally{W(!1)}}if(i=t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=sy,t.stateNode=a,a._reactInternals=t,a._reactInternalInstance=Xg,"function"==typeof n.getDerivedStateFromProps&&null===i&&(i=_(n)||"Component",Zg.has(i)||(Zg.add(i),console.error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",i,null===a.state?"null":"undefined",i))),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate){var u=l=i=null;if("function"==typeof a.componentWillMount&&!0!==a.componentWillMount.__suppressDeprecationWarning?i="componentWillMount":"function"==typeof a.UNSAFE_componentWillMount&&(i="UNSAFE_componentWillMount"),"function"==typeof a.componentWillReceiveProps&&!0!==a.componentWillReceiveProps.__suppressDeprecationWarning?l="componentWillReceiveProps":"function"==typeof a.UNSAFE_componentWillReceiveProps&&(l="UNSAFE_componentWillReceiveProps"),"function"==typeof a.componentWillUpdate&&!0!==a.componentWillUpdate.__suppressDeprecationWarning?u="componentWillUpdate":"function"==typeof a.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==i||null!==l||null!==u){a=_(n)||"Component";var c="function"==typeof n.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";ty.has(a)||(ty.add(a),console.error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",a,c,null!==i?"\n  "+i:"",null!==l?"\n  "+l:"",null!==u?"\n  "+u:""))}}a=t.stateNode,i=_(n)||"Component",a.render||(n.prototype&&"function"==typeof n.prototype.render?console.error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?",i):console.error("No `render` method found on the %s instance: you may have forgotten to define `render`.",i)),!a.getInitialState||a.getInitialState.isReactClassApproved||a.state||console.error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",i),a.getDefaultProps&&!a.getDefaultProps.isReactClassApproved&&console.error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",i),a.contextType&&console.error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",i),n.childContextTypes&&!ay.has(n)&&(ay.add(n),console.error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",i)),n.contextTypes&&!oy.has(n)&&(oy.add(n),console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",i)),"function"==typeof a.componentShouldUpdate&&console.error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",i),n.prototype&&n.prototype.isPureReactComponent&&void 0!==a.shouldComponentUpdate&&console.error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",_(n)||"A pure component"),"function"==typeof a.componentDidUnmount&&console.error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",i),"function"==typeof a.componentDidReceiveProps&&console.error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",i),"function"==typeof a.componentWillRecieveProps&&console.error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",i),"function"==typeof a.UNSAFE_componentWillRecieveProps&&console.error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",i),l=a.props!==r,void 0!==a.props&&l&&console.error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",i),a.defaultProps&&console.error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",i,i),"function"!=typeof a.getSnapshotBeforeUpdate||"function"==typeof a.componentDidUpdate||ey.has(n)||(ey.add(n),console.error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",_(n))),"function"==typeof a.getDerivedStateFromProps&&console.error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",i),"function"==typeof a.getDerivedStateFromError&&console.error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",i),"function"==typeof n.getSnapshotBeforeUpdate&&console.error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",i),(l=a.state)&&("object"!=typeof l||Kc(l))&&console.error("%s.state: must be set to an object or null",i),"function"==typeof a.getChildContext&&"object"!=typeof n.childContextTypes&&console.error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",i),(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},_r(t),i=n.contextType,a.context="object"==typeof i&&null!==i?er(i):dh,a.state===r&&(i=_(n)||"Component",ny.has(i)||(ny.add(i),console.error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",i))),t.mode&yh&&fm.recordLegacyContextWarning(t,a),fm.recordUnsafeLifecycleWarnings(t,a),a.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Pa(t,n,i,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(i=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),i!==a.state&&(console.error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",E(t)||"Component"),sy.enqueueReplaceState(a,a.state,null)),Lr(t,r,a,o),Or(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728),a=!0}else if(null===e){a=t.stateNode;var d=t.memoizedProps;l=Da(n,d),a.props=l;var f=a.context;u=n.contextType,i=dh,"object"==typeof u&&null!==u&&(i=er(u)),u="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate,d=t.pendingProps!==d,u||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(d||f!==i)&&La(t,a,r,i),Mm=!1;var p=t.memoizedState;a.state=p,Lr(t,r,a,o),Or(),f=t.memoizedState,d||p!==f||Mm?("function"==typeof c&&(Pa(t,n,c,r),f=t.memoizedState),(l=Mm||Oa(t,n,l,r,p,f,i))?(u||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=i,a=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&bh)!==hh&&(t.flags|=134217728),a=!1)}else{a=t.stateNode,Tr(e,t),u=Da(n,i=t.memoizedProps),a.props=u,c=t.pendingProps,p=a.context,f=n.contextType,l=dh,"object"==typeof f&&null!==f&&(l=er(f)),(f="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==c||p!==l)&&La(t,a,r,l),Mm=!1,p=t.memoizedState,a.state=p,Lr(t,r,a,o),Or();var h=t.memoizedState;i!==c||p!==h||Mm||null!==e&&null!==e.dependencies&&Jn(e.dependencies)?("function"==typeof d&&(Pa(t,n,d,r),h=t.memoizedState),(u=Mm||Oa(t,n,u,r,p,h,l)||null!==e&&null!==e.dependencies&&Jn(e.dependencies))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,a=u):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),a=!1)}if(l=a,Qa(e,t),i=!!(128&t.flags),l||i){if(l=t.stateNode,Ae(t),i&&"function"!=typeof n.getDerivedStateFromError)n=null,nm=-1;else{if(q(t),n=Sg(l),t.mode&yh){W(!0);try{Sg(l)}finally{W(!1)}}$()}t.flags|=1,null!==e&&i?(t.child=Vg(t,e.child,null,o),t.child=Vg(t,null,n,o)):Ha(e,t,n,o),t.memoizedState=l.state,e=t.child}else e=ui(e,t,o);return o=t.stateNode,a&&o.props!==r&&(by||console.error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",E(t)||"a component"),by=!0),e}function Xa(e,t,n,r){return Wn(),t.flags|=256,Ha(e,t,n,r),t.child}function Ja(e,t){t&&t.childContextTypes&&console.error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",t.displayName||t.name||"Component"),"function"==typeof t.getDerivedStateFromProps&&(e=_(t)||"Unknown",yy[e]||(console.error("%s: Function components do not support getDerivedStateFromProps.",e),yy[e]=!0)),"object"==typeof t.contextType&&null!==t.contextType&&(t=_(t)||"Unknown",my[t]||(console.error("%s: Function components do not support contextType.",t),my[t]=!0))}function Za(e){return{baseLanes:e,cachePool:br()}}function ei(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=vb),e}function ti(e,t,n){var r,o=t.pendingProps;l(t)&&(t.flags|=128);var a=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(Gg.current&Kg)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Ih){if(a?xa(t):Ta(t),Ih){var s,u=Dh;if(!(s=!u)){e:{var c=u;for(s=Fh;8!==c.nodeType;){if(!s){s=null;break e}if(null===(c=yu(c.nextSibling))){s=null;break e}}s=c}null!==s?(zn(),t.memoizedState={dehydrated:s,treeContext:null!==Rh?{id:Ph,overflow:Oh}:null,retryLane:536870912,hydrationErrors:null},(c=h(18,null,null,hh)).stateNode=s,c.return=t,t.child=c,Lh=t,Dh=null,s=!0):s=!1,s=!s}s&&(Fn(t,u),Mn(t))}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return gu(u)?t.lanes=32:t.lanes=536870912,null;Ea(t)}return u=o.children,o=o.fallback,a?(Ta(t),u=ri({mode:"hidden",children:u},a=t.mode),o=Rn(o,a,n,null),u.return=t,o.return=t,u.sibling=o,t.child=u,(a=t.child).memoizedState=Za(n),a.childLanes=ei(e,r,n),t.memoizedState=wy,o):(xa(t),ni(t,u))}var d=e.memoizedState;if(null!==d&&null!==(u=d.dehydrated)){if(i)256&t.flags?(xa(t),t.flags&=-257,t=oi(e,t,n)):null!==t.memoizedState?(Ta(t),t.child=e.child,t.flags|=128,t=null):(Ta(t),a=o.fallback,u=t.mode,o=ri({mode:"visible",children:o.children},u),(a=Rn(a,u,n,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,Vg(t,e.child,null,n),(o=t.child).memoizedState=Za(n),o.childLanes=ei(e,r,n),t.memoizedState=wy,t=a);else if(xa(t),Ih&&console.error("We should not be hydrating here. This is a bug in React. Please file a bug."),gu(u)){if(r=u.nextSibling&&u.nextSibling.dataset){s=r.dgst;var f=r.msg;c=r.stck;var p=r.cstck}r=s,o=c,s=a=p,(a=(u=f)?Error(u):Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.")).stack=o||"",a.digest=r,o={value:a,source:null,stack:r=void 0===s?null:s},"string"==typeof r&&ah.set(a,o),Vn(o),t=oi(e,t,n)}else if(py||Xn(e,t,n,!1),r=!!(n&e.childLanes),py||r){if(null!==(r=Gy)&&(0!==(o=(o=42&(o=n&-n)?1:le(o))&(r.suspendedLanes|n)?0:o)&&o!==d.retryLane))throw d.retryLane=o,hn(e,o),xl(r,e,o),fy;u.data===Lv||Nl(),t=oi(e,t,n)}else u.data===Lv?(t.flags|=192,t.child=e.child,t=null):(e=d.treeContext,Dh=yu(u.nextSibling),Lh=t,Ih=!0,Ah=null,Nh=!1,zh=null,Fh=!1,null!==e&&(zn(),Eh[Ch++]=Ph,Eh[Ch++]=Oh,Eh[Ch++]=Rh,Ph=e.id,Oh=e.overflow,Rh=t),(t=ni(t,o.children)).flags|=4096);return t}return a?(Ta(t),a=o.fallback,u=t.mode,c=(s=e.child).sibling,(o=_n(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?a=_n(c,a):(a=Rn(a,u,n,null)).flags|=2,a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,null===(u=e.child.memoizedState)?u=Za(n):(null!==(s=u.cachePool)?(c=Jh._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=br(),u={baseLanes:u.baseLanes|n,cachePool:s}),a.memoizedState=u,a.childLanes=ei(e,r,n),t.memoizedState=wy,o):(xa(t),e=(n=e.child).sibling,(n=_n(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ni(e,t){return(t=ri({mode:"visible",children:t},e.mode)).return=e,e.child=t}function ri(e,t){return(e=h(22,e,null,t)).lanes=0,e.stateNode={_visibility:ih,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function oi(e,t,n){return Vg(t,e.child,null,n),(e=ni(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ai(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Kn(e.return,t,n)}function ii(e,t){var n=Kc(e);return e=!n&&"function"==typeof x(e),!n&&!e||(n=n?"array":"iterable",console.error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",n,t,n),!1)}function li(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function si(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(r=r.children,void 0!==o&&"forwards"!==o&&"backwards"!==o&&"together"!==o&&!vy[o])if(vy[o]=!0,"string"==typeof o)switch(o.toLowerCase()){case"together":case"forwards":case"backwards":console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',o,o.toLowerCase());break;case"forward":case"backward":console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',o,o.toLowerCase());break;default:console.error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',o)}else console.error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',o);void 0===a||ky[a]||("collapsed"!==a&&"hidden"!==a?(ky[a]=!0,console.error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',a)):"forwards"!==o&&"backwards"!==o&&(ky[a]=!0,console.error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',a)));e:if(("forwards"===o||"backwards"===o)&&null!=r&&!1!==r)if(Kc(r)){for(var i=0;i<r.length;i++)if(!ii(r[i],i))break e}else if(i=x(r),"function"==typeof i){if(i=i.call(r))for(var l=i.next(),s=0;!l.done;l=i.next()){if(!ii(l.value,s))break e;s++}}else console.error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',o);if(Ha(e,t,r,n),(r=Gg.current)&Kg)r=r&Yg|Kg,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ai(e,n,t);else if(19===e.tag)ai(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=Yg}switch(P(Gg,r,t),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ca(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),li(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ca(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}li(t,!0,n,null,a);break;case"together":li(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ui(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),nm=-1,gb|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Xn(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error("Resuming work not yet implemented.");if(null!==t.child){for(n=_n(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=_n(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function ci(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Jn(e))}function di(e,t,n){if(t._debugNeedsRemount&&null!==e){(n=En(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes))._debugStack=t._debugStack,n._debugTask=t._debugTask;var r=t.return;if(null===r)throw Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,n._debugInfo=t._debugInfo,t===r.child)r.child=n;else{var o=r.child;if(null===o)throw Error("Expected parent to have a child.");for(;o.sibling!==t;)if(null===(o=o.sibling))throw Error("Expected to find the previous sibling.");o.sibling=n}return null===(t=r.deletions)?(r.deletions=[e],r.flags|=16):t.push(e),n.flags|=2,n}if(null!==e)if(e.memoizedProps!==t.pendingProps||t.type!==e.type)py=!0;else{if(!(ci(e,n)||128&t.flags))return py=!1,function(e,t,n){switch(t.tag){case 3:L(t,t.stateNode.containerInfo),Qn(t,Jh,e.memoizedState.cache),Wn();break;case 27:case 5:N(t);break;case 4:L(t,t.stateNode.containerInfo);break;case 10:Qn(t,t.type,t.memoizedProps.value);break;case 12:n&t.childLanes&&(t.flags|=4),t.flags|=2048;var r=t.stateNode;r.effectDuration=-0,r.passiveEffectDuration=-0;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(t),t.flags|=128,null):n&t.child.childLanes?ti(e,t,n):(xa(t),null!==(e=ui(e,t,n))?e.sibling:null);xa(t);break;case 19:var o=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Xn(e,t,n,!1),r=!!(n&t.childLanes)),o){if(r)return si(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),P(Gg,Gg.current,t),r)break;return null;case 22:case 23:return t.lanes=0,qa(e,t,n);case 24:Qn(t,Jh,e.memoizedState.cache)}return ui(e,t,n)}(e,t,n);py=!!(131072&e.flags)}else py=!1,(r=Ih)&&(zn(),r=!!(1048576&t.flags)),r&&(r=t.index,zn(),Dn(t,Th,r));switch(t.lanes=0,t.tag){case 16:e:{if(r=t.pendingProps,e=Ag(t.elementType),t.type=e,"function"!=typeof e){if(null!=e){if((o=e.$$typeof)===Ic){t.tag=11,t.type=e=bn(e),t=Wa(null,t,e,r,n);break e}if(o===Ac){t.tag=14,t=Ba(null,t,e,r,n);break e}}throw t="",null!==e&&"object"==typeof e&&e.$$typeof===Fc&&(t=" Did you wrap a component in React.lazy() more than once?"),e=_(e)||e,Error("Element type is invalid. Received a promise that resolves to: "+e+". Lazy element type must resolve to a class or function."+t)}xn(e)?(r=Da(e,r),t.tag=1,t.type=e=yn(e),t=Ga(null,t,e,r,n)):(t.tag=0,Ja(t,e),t.type=e=yn(e),t=Ya(null,t,e,r,n))}return t;case 0:return Ya(e,t,t.type,t.pendingProps,n);case 1:return Ga(e,t,r=t.type,o=Da(r,t.pendingProps),n);case 3:e:{if(L(t,t.stateNode.containerInfo),null===e)throw Error("Should have a current fiber. This is a bug in React.");r=t.pendingProps;var a=t.memoizedState;o=a.element,Tr(e,t),Lr(t,r,null,n);var i=t.memoizedState;if(r=i.cache,Qn(t,Jh,r),r!==a.cache&&Gn(t,[Jh],n,!0),Or(),r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Xa(e,t,r,n);break e}if(r!==o){Vn(o=cn(Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."),t)),t=Xa(e,t,r,n);break e}if(9===(e=t.stateNode.containerInfo).nodeType)e=e.body;else e="HTML"===e.nodeName?e.ownerDocument.body:e;for(Dh=yu(e.firstChild),Lh=t,Ih=!0,Ah=null,Nh=!1,zh=null,Fh=!0,e=qg(t,null,r,n),t.child=e;e;)e.flags=-3&e.flags|4096,e=e.sibling}else{if(Wn(),r===o){t=ui(e,t,n);break e}Ha(e,t,r,n)}t=t.child}return t;case 26:return Qa(e,t),null===e?(e=Pu(t.type,null,t.pendingProps,null))?t.memoizedState=e:Ih||(e=t.type,n=t.pendingProps,(r=Js(r=O(od.current)).createElement(e))[zd]=t,r[Ad]=n,Ws(r,e,n),ye(r),t.stateNode=r):t.memoizedState=Pu(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return N(t),null===e&&Ih&&(r=O(od.current),o=I(),r=t.stateNode=_u(t.type,t.pendingProps,r,o,!1),Nh||null!==(o=Xs(r,t.type,t.pendingProps,o))&&(An(t,0).serverProps=o),Lh=t,Fh=!0,o=Dh,lu(t.type)?(Jv=o,Dh=yu(r.firstChild)):Dh=o),Ha(e,t,t.pendingProps.children,n),Qa(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&Ih&&(a=I(),r=vt(t.type,a.ancestorInfo),(i=!(o=Dh))||(null!==(i=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Wd])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;j(o.name,"name");var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=yu(e.nextSibling)))break}return null}(o,t.type,t.pendingProps,Fh))?(t.stateNode=i,Nh||null!==(a=Xs(i,t.type,t.pendingProps,a))&&(An(t,0).serverProps=a),Lh=t,Dh=yu(i.firstChild),Fh=!1,a=!0):a=!1,i=!a),i&&(r&&Fn(t,o),Mn(t))),N(t),o=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,tu(o,a)?r=null:null!==i&&tu(o,i)&&(t.flags|=32),null!==t.memoizedState&&(o=Vr(e,t,Qr,null,null,n),Sk._currentValue=o),Qa(e,t),Ha(e,t,r,n),t.child;case 6:return null===e&&Ih&&(e=t.pendingProps,e=null==(r=(n=I()).ancestorInfo.current)||kt(e,r.tag,n.ancestorInfo.implicitRootScope),(r=!(n=Dh))||(null!==(r=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yu(e.nextSibling)))return null}return e}(n,t.pendingProps,Fh))?(t.stateNode=r,Lh=t,Dh=null,r=!0):r=!1,r=!r),r&&(e&&Fn(t,n),Mn(t))),null;case 13:return ti(e,t,n);case 4:return L(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Vg(t,null,r,n):Ha(e,t,r,n),t.child;case 11:return Wa(e,t,t.type,t.pendingProps,n);case 7:return Ha(e,t,t.pendingProps,n),t.child;case 8:return Ha(e,t,t.pendingProps.children,n),t.child;case 12:return t.flags|=4,t.flags|=2048,(r=t.stateNode).effectDuration=-0,r.passiveEffectDuration=-0,Ha(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.type,a=(o=t.pendingProps).value,"value"in o||Sy||(Sy=!0,console.error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?")),Qn(t,r,a),Ha(e,t,o.children,n),t.child;case 9:return o=t.type._context,"function"!=typeof(r=t.pendingProps.children)&&console.error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),Zn(t),o=er(o),q(t),r=kg(r,o,void 0),$(),t.flags|=1,Ha(e,t,r,n),t.child;case 14:return Ba(e,t,t.type,t.pendingProps,n);case 15:return Va(e,t,t.type,t.pendingProps,n);case 19:return si(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((e=ri(r,n)).ref=t.ref,t.child=e,e.return=t,t=e):((e=_n(e.child,r)).ref=t.ref,t.child=e,e.return=t,t=e),t;case 22:return qa(e,t,n);case 24:return Zn(t),r=er(Jh),null===e?(null===(o=gr())&&(o=Gy,a=rr(),o.pooledCache=a,or(a),null!==a&&(o.pooledCacheLanes|=n),o=a),t.memoizedState={parent:r,cache:o},_r(t),Qn(t,Jh,o)):(!!(e.lanes&n)&&(Tr(e,t),Lr(t,null,null,n),Or()),o=e.memoizedState,a=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),Qn(t,Jh,r)):(r=a.cache,Qn(t,Jh,r),r!==o.cache&&Gn(t,[Jh],n,!0))),Ha(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function fi(e){e.flags|=4}function pi(e,t){if("stylesheet"!==t.type||(t.state.loading&rk)!==Zv)e.flags&=-16777217;else if(e.flags|=16777216,!Wu(t)){if(null!==(t=$g.current)&&((4194048&Jy)===Jy?null!==Qg:(62914560&Jy)!==Jy&&!(536870912&Jy)||t!==Qg))throw Cm=Em,_m;e.flags|=8192}}function hi(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ne():536870912,e.lanes|=t,kb|=t)}function mi(e,t){if(!Ih)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function gi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)if((e.mode&gh)!==hh){for(var o=e.selfBaseDuration,a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,o+=a.treeBaseDuration,a=a.sibling;e.treeBaseDuration=o}else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else if((e.mode&gh)!==hh){o=e.actualDuration,a=e.selfBaseDuration;for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,o+=i.actualDuration,a+=i.treeBaseDuration,i=i.sibling;e.actualDuration=o,e.treeBaseDuration=a}else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function yi(e,t,n){var r=t.pendingProps;switch(Nn(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return gi(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),Yn(Jh,t),D(t),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Hn(t)?(qn(),fi(t)):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,Bn())),gi(t),null;case 26:return n=t.memoizedState,null===e?(fi(t),null!==n?(gi(t),pi(t,n)):(gi(t),t.flags&=-16777217)):n?n!==e.memoizedState?(fi(t),gi(t),pi(t,n)):(gi(t),t.flags&=-16777217):(e.memoizedProps!==r&&fi(t),gi(t),t.flags&=-16777217),null;case 27:z(t),n=O(od.current);var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&fi(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return gi(t),null}e=I(),Hn(t)?jn(t):(e=_u(o,r,n,e,!0),t.stateNode=e,fi(t))}return gi(t),null;case 5:if(z(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&fi(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return gi(t),null}if(o=I(),Hn(t))jn(t);else{switch(e=O(od.current),vt(n,o.ancestorInfo),o=o.context,e=Js(e),o){case Hv:e=e.createElementNS(If,n);break;case Wv:e=e.createElementNS(Df,n);break;default:switch(n){case"svg":e=e.createElementNS(If,n);break;case"math":e=e.createElementNS(Df,n);break;case"script":(e=e.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?e.createElement("select",{is:r.is}):e.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?e.createElement(n,{is:r.is}):e.createElement(n),-1===n.indexOf("-")&&(n!==n.toLowerCase()&&console.error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",n),"[object HTMLUnknownElement]"!==Object.prototype.toString.call(e)||id.call(qv,n)||(qv[n]=!0,console.error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",n)))}}e[zd]=t,e[Ad]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(Ws(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&fi(t)}}return gi(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&fi(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");if(e=O(od.current),n=I(),Hn(t)){e=t.stateNode,n=t.memoizedProps,o=!Nh,r=null;var a=Lh;if(null!==a)switch(a.tag){case 3:o&&(null!==(o=vu(e,n,r))&&(An(t,0).serverProps=o));break;case 27:case 5:r=a.memoizedProps,o&&(null!==(o=vu(e,n,r))&&(An(t,0).serverProps=o))}e[zd]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Ms(e.nodeValue,n)))||Mn(t)}else null!=(o=n.ancestorInfo.current)&&kt(r,o.tag,n.ancestorInfo.implicitRootScope),(e=Js(e).createTextNode(r))[zd]=t,t.stateNode=e}return gi(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=Hn(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");o[zd]=t,gi(t),(t.mode&gh)!==hh&&null!==r&&(null!==(o=t.child)&&(t.treeBaseDuration-=o.treeBaseDuration))}else qn(),Wn(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4,gi(t),(t.mode&gh)!==hh&&null!==r&&(null!==(o=t.child)&&(t.treeBaseDuration-=o.treeBaseDuration));o=!1}else o=Bn(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&t.flags?(Ea(t),t):(Ea(t),null)}return Ea(t),128&t.flags?(t.lanes=n,(t.mode&gh)!==hh&&hr(t),t):(n=null!==r,e=null!==e&&null!==e.memoizedState,n&&(o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool),a=null,null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)),n!==e&&n&&(t.child.flags|=8192),hi(t,t.updateQueue),gi(t),(t.mode&gh)!==hh&&n&&(null!==(e=t.child)&&(t.treeBaseDuration-=e.treeBaseDuration)),null);case 4:return D(t),null===e&&Es(t.stateNode.containerInfo),gi(t),null;case 10:return Yn(t.type,t),gi(t),null;case 19:if(R(Gg,t),null===(o=t.memoizedState))return gi(t),null;if(r=!!(128&t.flags),null===(a=o.rendering))if(r)mi(o,!1);else{if(mb!==Wy||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=Ca(e))){for(t.flags|=128,mi(o,!1),e=a.updateQueue,t.updateQueue=e,hi(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Tn(n,e),n=n.sibling;return P(Gg,Gg.current&Yg|Kg,t),t.child}e=e.sibling}null!==o.tail&&dd()>Eb&&(t.flags|=128,r=!0,mi(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Ca(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,hi(t,e),mi(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!Ih)return gi(t),null}else 2*dd()-o.renderingStartTime>Eb&&536870912!==n&&(t.flags|=128,r=!0,mi(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=o.last)?e.sibling=a:t.child=a,o.last=a)}return null!==o.tail?(e=o.tail,o.rendering=e,o.tail=e.sibling,o.renderingStartTime=dd(),e.sibling=null,n=Gg.current,P(Gg,n=r?n&Yg|Kg:n&Yg,t),e):(gi(t),null);case 22:case 23:return Ea(t),Fr(t),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(gi(t),6&t.subtreeFlags&&(t.flags|=8192)):gi(t),null!==(n=t.updateQueue)&&hi(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&R(dm,t),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),Yn(Jh,t),gi(t),null;case 25:case 30:return null}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function bi(e,t){switch(Nn(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&gh)!==hh&&hr(t),t):null;case 3:return Yn(Jh,t),D(t),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return z(t),null;case 13:if(Ea(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");Wn()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&gh)!==hh&&hr(t),t):null;case 19:return R(Gg,t),null;case 4:return D(t),null;case 10:return Yn(t.type,t),null;case 22:case 23:return Ea(t),Fr(t),null!==e&&R(dm,t),65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&gh)!==hh&&hr(t),t):null;case 24:return Yn(Jh,t),null;default:return null}}function vi(e,t){switch(Nn(t),t.tag){case 3:Yn(Jh,t),D(t);break;case 26:case 27:case 5:z(t);break;case 4:D(t);break;case 13:Ea(t);break;case 19:R(Gg,t);break;case 10:Yn(t.type,t);break;case 22:case 23:Ea(t),Fr(t),null!==e&&R(dm,t);break;case 24:Yn(Jh,t)}}function ki(e){return(e.mode&gh)!==hh}function wi(e,t){ki(e)?(pr(),xi(t,e),fr()):xi(t,e)}function Si(e,t,n){ki(e)?(pr(),_i(n,e,t),fr()):_i(n,e,t)}function xi(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e&&((e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectMountStarted&&Sd.markComponentPassiveEffectMountStarted(t):(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectMountStarted&&Sd.markComponentLayoutEffectMountStarted(t),r=void 0,(e&Lm)!==Pm&&(ev=!0),r=ze(t,Dg,n),(e&Lm)!==Pm&&(ev=!1),(e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectMountStopped&&Sd.markComponentPassiveEffectMountStopped():(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectMountStopped&&Sd.markComponentLayoutEffectMountStopped(),void 0!==r&&"function"!=typeof r)){var a;a=n.tag&Dm?"useLayoutEffect":n.tag&Lm?"useInsertionEffect":"useEffect";ze(t,(function(e,t){console.error("%s must not return anything besides a function, which is used for clean-up.%s",e,t)}),a,null===r?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof r.then?"\n\nIt looks like you wrote "+a+"(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n"+a+"(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching":" You returned: "+r)}n=n.next}while(n!==o)}}catch(e){Zl(t,t.return,e)}}function _i(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;void 0!==l&&(i.destroy=void 0,(e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectUnmountStarted&&Sd.markComponentPassiveEffectUnmountStarted(t):(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectUnmountStarted&&Sd.markComponentLayoutEffectUnmountStarted(t),(e&Lm)!==Pm&&(ev=!0),ze(o=t,Ng,o,n,l),(e&Lm)!==Pm&&(ev=!1),(e&Im)!==Pm?null!==Sd&&"function"==typeof Sd.markComponentPassiveEffectUnmountStopped&&Sd.markComponentPassiveEffectUnmountStopped():(e&Dm)!==Pm&&null!==Sd&&"function"==typeof Sd.markComponentLayoutEffectUnmountStopped&&Sd.markComponentLayoutEffectUnmountStopped())}r=r.next}while(r!==a)}}catch(e){Zl(t,t.return,e)}}function Ti(e,t){ki(e)?(pr(),xi(t,e),fr()):xi(t,e)}function Ei(e,t,n){ki(e)?(pr(),_i(n,e,t),fr()):_i(n,e,t)}function Ci(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;e.type.defaultProps||"ref"in e.memoizedProps||by||(n.props!==e.memoizedProps&&console.error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",E(e)||"instance"),n.state!==e.memoizedState&&console.error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",E(e)||"instance"));try{ze(e,Nr,t,n)}catch(t){Zl(e,e.return,t)}}}function Ri(e,t,n){return e.getSnapshotBeforeUpdate(t,n)}function Pi(e,t){var n=t.memoizedProps,r=t.memoizedState;t=e.stateNode,e.type.defaultProps||"ref"in e.memoizedProps||by||(t.props!==e.memoizedProps&&console.error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",E(e)||"instance"),t.state!==e.memoizedState&&console.error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",E(e)||"instance"));try{var o=Da(e.type,n,(e.elementType,e.type)),a=ze(e,Ri,t,o,r);n=xy,void 0!==a||n.has(e.type)||(n.add(e.type),ze(e,(function(){console.error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",E(e))}))),t.__reactInternalSnapshotBeforeUpdate=a}catch(t){Zl(e,e.return,t)}}function Oi(e,t,n){n.props=Da(e.type,e.memoizedProps),n.state=e.memoizedState,ki(e)?(pr(),ze(e,Og,e,t,n),fr()):ze(e,Og,e,t,n)}function Li(e){var t=e.ref;if(null!==t){switch(e.tag){case 26:case 27:case 5:var n=e.stateNode;break;default:n=e.stateNode}if("function"==typeof t)if(ki(e))try{pr(),e.refCleanup=t(n)}finally{fr()}else e.refCleanup=t(n);else"string"==typeof t?console.error("String refs are no longer supported."):t.hasOwnProperty("current")||console.error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",E(e)),t.current=n}}function Di(e,t){try{ze(e,Li,e)}catch(n){Zl(e,t,n)}}function Ii(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{if(ki(e))try{pr(),ze(e,r)}finally{fr()}else ze(e,r)}catch(n){Zl(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{if(ki(e))try{pr(),ze(e,n,null)}finally{fr()}else ze(e,n,null)}catch(n){Zl(e,t,n)}else n.current=null}function Ni(e,t,n,r){var o=e.memoizedProps,a=o.id,i=o.onCommit;o=o.onRender,t=null===t?"mount":"update",om&&(t="nested-update"),"function"==typeof o&&o(a,t,e.actualDuration,e.treeBaseDuration,e.actualStartTime,n),"function"==typeof i&&i(e.memoizedProps.id,t,r,n)}function zi(e,t,n,r){var o=e.memoizedProps;e=o.id,o=o.onPostCommit,t=null===t?"mount":"update",om&&(t="nested-update"),"function"==typeof o&&o(e,t,r,n)}function Ai(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{ze(e,ru,r,t,n,e)}catch(t){Zl(e,e.return,t)}}function Fi(e,t,n){try{ze(e,ou,e.stateNode,e.type,n,t,e)}catch(t){Zl(e,e.return,t)}}function Mi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&lu(e.type)||4===e.tag}function ji(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Mi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&lu(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Ui(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=js));else if(4!==r&&(27===r&&lu(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(Ui(e,t,n),e=e.sibling;null!==e;)Ui(e,t,n),e=e.sibling}function Hi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&lu(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(Hi(e,t,n),e=e.sibling;null!==e;)Hi(e,t,n),e=e.sibling}function Wi(e){for(var t,n=e.return;null!==n;){if(Mi(n)){t=n;break}n=n.return}if(null==t)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");switch(t.tag){case 27:t=t.stateNode,Hi(e,n=ji(e),t);break;case 5:n=t.stateNode,32&t.flags&&(au(n),t.flags&=-33),Hi(e,t=ji(e),n);break;case 3:case 4:t=t.stateNode.containerInfo,Ui(e,n=ji(e),t);break;default:throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}}function Bi(e){var t=e.stateNode,n=e.memoizedProps;try{ze(e,Tu,e.type,n,t,e)}catch(t){Zl(e,e.return,t)}}function Vi(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:el(e,n),4&r&&wi(n,Dm|Om);break;case 1:if(el(e,n),4&r)if(e=n.stateNode,null===t)n.type.defaultProps||"ref"in n.memoizedProps||by||(e.props!==n.memoizedProps&&console.error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",E(n)||"instance"),e.state!==n.memoizedState&&console.error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",E(n)||"instance")),ki(n)?(pr(),ze(n,_g,n,e),fr()):ze(n,_g,n,e);else{var o=Da(n.type,t.memoizedProps);t=t.memoizedState,n.type.defaultProps||"ref"in n.memoizedProps||by||(e.props!==n.memoizedProps&&console.error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",E(n)||"instance"),e.state!==n.memoizedState&&console.error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",E(n)||"instance")),ki(n)?(pr(),ze(n,Eg,n,e,o,t,e.__reactInternalSnapshotBeforeUpdate),fr()):ze(n,Eg,n,e,o,t,e.__reactInternalSnapshotBeforeUpdate)}64&r&&Ci(n),512&r&&Di(n,n.return);break;case 3:if(t=ir(),el(e,n),64&r&&null!==(r=n.updateQueue)){if(o=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:o=n.child.stateNode}try{ze(n,Nr,r,o)}catch(e){Zl(n,n.return,e)}}e.effectDuration+=lr(t);break;case 27:null===t&&4&r&&Bi(n);case 26:case 5:el(e,n),null===t&&4&r&&Ai(n),512&r&&Di(n,n.return);break;case 12:if(4&r){r=ir(),el(e,n),(e=n.stateNode).effectDuration+=sr(r);try{ze(n,Ni,n,t,tm,e.effectDuration)}catch(e){Zl(n,n.return,e)}}else el(e,n);break;case 13:el(e,n),4&r&&Yi(e,n),64&r&&(null!==(e=n.memoizedState)&&(null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if(e.data!==Lv||n.readyState===Mv)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=rs.bind(null,n))));break;case 22:if(!(r=null!==n.memoizedState||_y)){t=null!==t&&null!==t.memoizedState||Ty,o=_y;var a=Ty;_y=r,(Ty=t)&&!a?ol(e,n,!!(8772&n.subtreeFlags)):el(e,n),_y=o,Ty=a}break;case 30:break;default:el(e,n)}}function qi(e){var t=e.alternate;null!==t&&(e.alternate=null,qi(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&fe(t)),e.stateNode=null,e._debugOwner=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function $i(e,t,n){for(n=n.child;null!==n;)Qi(e,t,n),n=n.sibling}function Qi(e,t,n){if(wd&&"function"==typeof wd.onCommitFiberUnmount)try{wd.onCommitFiberUnmount(kd,n)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}switch(n.tag){case 26:Ty||Ii(n,t),$i(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ty||Ii(n,t);var r=Ly,o=Dy;lu(n.type)&&(Ly=n.stateNode,Dy=!1),$i(e,t,n),ze(n,Eu,n.stateNode),Ly=r,Dy=o;break;case 5:Ty||Ii(n,t);case 6:if(r=Ly,o=Dy,Ly=null,$i(e,t,n),Dy=o,null!==(Ly=r))if(Dy)try{ze(n,uu,Ly,n.stateNode)}catch(e){Zl(n,t,e)}else try{ze(n,su,Ly,n.stateNode)}catch(e){Zl(n,t,e)}break;case 18:null!==Ly&&(Dy?(cu(9===(e=Ly).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),gc(e)):cu(Ly,n.stateNode));break;case 4:r=Ly,o=Dy,Ly=n.stateNode.containerInfo,Dy=!0,$i(e,t,n),Ly=r,Dy=o;break;case 0:case 11:case 14:case 15:Ty||_i(Lm,n,t),Ty||Si(n,t,Dm),$i(e,t,n);break;case 1:Ty||(Ii(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Oi(n,t,r)),$i(e,t,n);break;case 21:$i(e,t,n);break;case 22:Ty=(r=Ty)||null!==n.memoizedState,$i(e,t,n),Ty=r;break;default:$i(e,t,n)}}function Yi(e,t){if(null===t.memoizedState&&(null!==(e=t.alternate)&&(null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))))try{ze(t,xu,e)}catch(e){Zl(t,t.return,e)}}function Ki(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new Cy),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new Cy),t;default:throw Error("Unexpected Suspense handler tag ("+e.tag+"). This is a bug in React.")}}(e);t.forEach((function(t){var r=os.bind(null,e,t);if(!n.has(t)){if(n.add(t),_d){if(null===Py||null===Oy)throw Error("Expected finished root and lanes to be set. This is a bug in React.");us(Oy,Py)}t.then(r,r)}}))}function Gi(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=e,a=t,i=n[r],l=a;e:for(;null!==l;){switch(l.tag){case 27:if(lu(l.type)){Ly=l.stateNode,Dy=!1;break e}break;case 5:Ly=l.stateNode,Dy=!1;break e;case 3:case 4:Ly=l.stateNode.containerInfo,Dy=!0;break e}l=l.return}if(null===Ly)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");Qi(o,a,i),Ly=null,Dy=!1,null!==(a=(o=i).alternate)&&(a.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Xi(t,e),t=t.sibling}function Xi(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Gi(t,e),Ji(e),4&r&&(_i(Lm|Om,e,e.return),xi(Lm|Om,e),Si(e,e.return,Dm|Om));break;case 1:Gi(t,e),Ji(e),512&r&&(Ty||null===n||Ii(n,n.return)),64&r&&_y&&(null!==(e=e.updateQueue)&&(null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r))));break;case 26:var o=Iy;if(Gi(t,e),Ji(e),512&r&&(Ty||null===n||Ii(n,n.return)),4&r)if(t=null!==n?n.memoizedState:null,r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,t=o.ownerDocument||o;t:switch(r){case"title":(!(o=t.getElementsByTagName("title")[0])||o[Wd]||o[zd]||o.namespaceURI===If||o.hasAttribute("itemprop"))&&(o=t.createElement(r),t.head.insertBefore(o,t.querySelector("head > title"))),Ws(o,r,n),o[zd]=e,ye(o),r=o;break e;case"link":var a=Uu("link","href",t).get(r+(n.href||""));if(a)for(var i=0;i<a.length;i++)if((o=a[i]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){a.splice(i,1);break t}Ws(o=t.createElement(r),r,n),t.head.appendChild(o);break;case"meta":if(a=Uu("meta","content",t).get(r+(n.content||"")))for(i=0;i<a.length;i++)if(o=a[i],j(n.content,"content"),o.getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){a.splice(i,1);break t}Ws(o=t.createElement(r),r,n),t.head.appendChild(o);break;default:throw Error('getNodesForType encountered a type it did not expect: "'+r+'". This is a bug in React.')}o[zd]=e,ye(o),r=o}e.stateNode=r}else Hu(o,e.type,e.stateNode);else e.stateNode=Au(o,r,e.memoizedProps);else t!==r?(null===t?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):t.count--,null===r?Hu(o,e.type,e.stateNode):Au(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Fi(e,e.memoizedProps,n.memoizedProps);break;case 27:Gi(t,e),Ji(e),512&r&&(Ty||null===n||Ii(n,n.return)),null!==n&&4&r&&Fi(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Gi(t,e),Ji(e),512&r&&(Ty||null===n||Ii(n,n.return)),32&e.flags){t=e.stateNode;try{ze(e,au,t)}catch(t){Zl(e,e.return,t)}}4&r&&null!=e.stateNode&&Fi(e,t=e.memoizedProps,null!==n?n.memoizedProps:t),1024&r&&(Ey=!0,"form"!==e.type&&console.error("Unexpected host component type. Expected a form. This is a bug in React."));break;case 6:if(Gi(t,e),Ji(e),4&r){if(null===e.stateNode)throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");r=e.memoizedProps,n=null!==n?n.memoizedProps:r,t=e.stateNode;try{ze(e,iu,t,n,r)}catch(t){Zl(e,e.return,t)}}break;case 3:if(o=ir(),yk=null,a=Iy,Iy=Cu(t.containerInfo),Gi(t,e),Iy=a,Ji(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{ze(e,Su,t.containerInfo)}catch(t){Zl(e,e.return,t)}Ey&&(Ey=!1,Zi(e)),t.effectDuration+=lr(o);break;case 4:r=Iy,Iy=Cu(e.stateNode.containerInfo),Gi(t,e),Ji(e),Iy=r;break;case 12:r=ir(),Gi(t,e),Ji(e),e.stateNode.effectDuration+=sr(r);break;case 13:Gi(t,e),Ji(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(_b=dd()),4&r&&(null!==(r=e.updateQueue)&&(e.updateQueue=null,Ki(e,r)));break;case 22:o=null!==e.memoizedState;var l=null!==n&&null!==n.memoizedState,s=_y,u=Ty;if(_y=s||o,Ty=u||l,Gi(t,e),Ty=u,_y=s,Ji(e),8192&r)e:for(t=e.stateNode,t._visibility=o?t._visibility&~ih:t._visibility|ih,o&&(null===n||l||_y||Ty||nl(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){l=n=t;try{a=l.stateNode,o?ze(l,du,a):ze(l,pu,l.stateNode,l.memoizedProps)}catch(e){Zl(l,l.return,e)}}}else if(6===t.tag){if(null===n){l=t;try{i=l.stateNode,o?ze(l,fu,i):ze(l,hu,i,l.memoizedProps)}catch(e){Zl(l,l.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&(null!==(r=e.updateQueue)&&(null!==(n=r.retryQueue)&&(r.retryQueue=null,Ki(e,n))));break;case 19:Gi(t,e),Ji(e),4&r&&(null!==(r=e.updateQueue)&&(e.updateQueue=null,Ki(e,r)));break;case 30:case 21:break;default:Gi(t,e),Ji(e)}}function Ji(e){var t=e.flags;if(2&t){try{ze(e,Wi,e)}catch(t){Zl(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Zi(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Zi(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function el(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Vi(e,t.alternate,t),t=t.sibling}function tl(e){switch(e.tag){case 0:case 11:case 14:case 15:Si(e,e.return,Dm),nl(e);break;case 1:Ii(e,e.return);var t=e.stateNode;"function"==typeof t.componentWillUnmount&&Oi(e,e.return,t),nl(e);break;case 27:ze(e,Eu,e.stateNode);case 26:case 5:Ii(e,e.return),nl(e);break;case 22:null===e.memoizedState&&nl(e);break;default:nl(e)}}function nl(e){for(e=e.child;null!==e;)tl(e),e=e.sibling}function rl(e,t,n,r){var o=n.flags;switch(n.tag){case 0:case 11:case 15:ol(e,n,r),wi(n,Dm);break;case 1:if(ol(e,n,r),"function"==typeof(t=n.stateNode).componentDidMount&&ze(n,_g,n,t),null!==(t=n.updateQueue)){e=n.stateNode;try{ze(n,Ir,t,e)}catch(e){Zl(n,n.return,e)}}r&&64&o&&Ci(n),Di(n,n.return);break;case 27:Bi(n);case 26:case 5:ol(e,n,r),r&&null===t&&4&o&&Ai(n),Di(n,n.return);break;case 12:if(r&&4&o){o=ir(),ol(e,n,r),(r=n.stateNode).effectDuration+=sr(o);try{ze(n,Ni,n,t,tm,r.effectDuration)}catch(e){Zl(n,n.return,e)}}else ol(e,n,r);break;case 13:ol(e,n,r),r&&4&o&&Yi(e,n);break;case 22:null===n.memoizedState&&ol(e,n,r),Di(n,n.return);break;case 30:break;default:ol(e,n,r)}}function ol(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;)rl(e,t.alternate,t,n),t=t.sibling}function al(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&or(e),null!=n&&ar(n))}function il(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(or(t),null!=e&&ar(e))}function ll(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)sl(e,t,n,r),t=t.sibling}function sl(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:ll(e,t,n,r),2048&o&&Ti(t,Im|Om);break;case 1:case 13:default:ll(e,t,n,r);break;case 3:var a=ir();ll(e,t,n,r),2048&o&&(n=null,null!==t.alternate&&(n=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==n&&(or(t),null!=n&&ar(n))),e.passiveEffectDuration+=lr(a);break;case 12:if(2048&o){o=ir(),ll(e,t,n,r),(e=t.stateNode).passiveEffectDuration+=sr(o);try{ze(t,zi,t,t.alternate,tm,e.passiveEffectDuration)}catch(e){Zl(t,t.return,e)}}else ll(e,t,n,r);break;case 23:break;case 22:a=t.stateNode;var i=t.alternate;null!==t.memoizedState?a._visibility&lh?ll(e,t,n,r):dl(e,t):a._visibility&lh?ll(e,t,n,r):(a._visibility|=lh,ul(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&al(i,t);break;case 24:ll(e,t,n,r),2048&o&&il(t.alternate,t)}}function ul(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;)cl(e,t,n,r,o),t=t.sibling}function cl(e,t,n,r,o){var a=t.flags;switch(t.tag){case 0:case 11:case 15:ul(e,t,n,r,o),Ti(t,Im);break;case 23:break;case 22:var i=t.stateNode;null!==t.memoizedState?i._visibility&lh?ul(e,t,n,r,o):dl(e,t):(i._visibility|=lh,ul(e,t,n,r,o)),o&&2048&a&&al(t.alternate,t);break;case 24:ul(e,t,n,r,o),o&&2048&a&&il(t.alternate,t);break;default:ul(e,t,n,r,o)}}function dl(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:dl(n,r),2048&o&&al(r.alternate,r);break;case 24:dl(n,r),2048&o&&il(r.alternate,r);break;default:dl(n,r)}t=t.sibling}}function fl(e){if(e.subtreeFlags&Ny)for(e=e.child;null!==e;)pl(e),e=e.sibling}function pl(e){switch(e.tag){case 26:fl(e),e.flags&Ny&&null!==e.memoizedState&&function(e,t,n){if(null===bk)throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");var r=bk;if("stylesheet"===t.type&&("string"!=typeof n.media||!1!==matchMedia(n.media).matches)&&(t.state.loading&rk)===Zv){if(null===t.instance){var o=Lu(n.href),a=e.querySelector(Du(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Vu.bind(r),e.then(r,r)),t.state.loading|=rk,t.instance=a,void ye(a);a=e.ownerDocument||e,n=Iu(n),(o=ok.get(o))&&Mu(n,o),ye(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Ws(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&(t.state.loading&nk)===Zv&&(r.count++,t=Vu.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Iy,e.memoizedState,e.memoizedProps);break;case 5:default:fl(e);break;case 3:case 4:var t=Iy;Iy=Cu(e.stateNode.containerInfo),fl(e),Iy=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Ny,Ny=16777216,fl(e),Ny=t):fl(e))}}function hl(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function ml(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Ry=r,vl(r,e)}hl(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)gl(e),e=e.sibling}function gl(e){switch(e.tag){case 0:case 11:case 15:ml(e),2048&e.flags&&Ei(e,e.return,Im|Om);break;case 3:var t=ir();ml(e),e.stateNode.passiveEffectDuration+=lr(t);break;case 12:t=ir(),ml(e),e.stateNode.passiveEffectDuration+=sr(t);break;case 22:t=e.stateNode,null!==e.memoizedState&&t._visibility&lh&&(null===e.return||13!==e.return.tag)?(t._visibility&=~lh,yl(e)):ml(e);break;default:ml(e)}}function yl(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Ry=r,vl(r,e)}hl(e)}for(e=e.child;null!==e;)bl(e),e=e.sibling}function bl(e){switch(e.tag){case 0:case 11:case 15:Ei(e,e.return,Im),yl(e);break;case 22:var t=e.stateNode;t._visibility&lh&&(t._visibility&=~lh,yl(e));break;default:yl(e)}}function vl(e,t){for(;null!==Ry;){var n=Ry,r=n;switch(r.tag){case 0:case 11:case 15:Ei(r,t,Im);break;case 23:case 22:null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(null!=(r=r.memoizedState.cachePool.pool)&&or(r));break;case 24:ar(r.memoizedState.cache)}if(null!==(r=n.child))r.return=n,Ry=r;else e:for(n=e;null!==Ry;){var o=(r=Ry).sibling,a=r.return;if(qi(r),r===n){Ry=null;break e}if(null!==o){o.return=a,Ry=o;break e}Ry=a}}}function kl(){var e="undefined"!=typeof IS_REACT_ACT_ENVIRONMENT?IS_REACT_ACT_ENVIRONMENT:void 0;return e||null===Gc.actQueue||console.error("The current testing environment is not configured to support act(...)"),e}function wl(e){if((Ky&Uy)!==jy&&0!==Jy)return Jy&-Jy;var t=Gc.T;return null!==t?(t._updatedFibers||(t._updatedFibers=new Set),t._updatedFibers.add(e),0!==(e=sm)?e:vs()):de()}function Sl(){0===vb&&(vb=536870912&Jy&&!Ih?536870912:te());var e=$g.current;return null!==e&&(e.flags|=32),vb}function xl(e,t,n){if(ev&&console.error("useInsertionEffect must not schedule updates."),Kb&&(Gb=!0),(e!==Gy||ub!==tb&&ub!==sb)&&null===e.cancelPendingCommit||(Ol(e,0),Cl(e,Jy,vb,!1)),oe(e,n),Ky&Uy&&e===Gy){if(nf)switch(t.tag){case 0:case 11:case 15:e=Xy&&E(Xy)||"Unknown",rv.has(e)||(rv.add(e),t=E(t)||"Unknown",console.error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",t,e,e));break;case 1:nv||(console.error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),nv=!0)}}else _d&&se(e,t,n),function(e){kl()&&null===Gc.actQueue&&ze(e,(function(){console.error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",E(e))}))}(t),e===Gy&&((Ky&Uy)===jy&&(yb|=n),mb===$y&&Cl(e,Jy,vb,!1)),cs(e)}function _l(e,t,n){if((Ky&(Uy|Hy))!==jy)throw Error("Should not already be working.");for(var r=!n&&!(124&t)&&!(t&e.expiredLanes)||Z(e,t),o=r?function(e,t){var n=Ky;Ky|=Uy;var r=Dl(),o=Il();if(Gy!==e||Jy!==t){if(_d){var a=e.memoizedUpdaters;0<a.size&&(us(e,Jy),a.clear()),ue(e,t)}Rb=null,Eb=dd()+Cb,Ol(e,t)}else fb=Z(e,t);Q(t);e:for(;;)try{if(ub!==Zy&&null!==Xy)t:switch(t=Xy,a=cb,ub){case eb:ub=Zy,cb=null,Hl(e,t,a,eb);break;case tb:case sb:if(vr(a)){ub=Zy,cb=null,jl(t);break}t=function(){ub!==tb&&ub!==sb||Gy!==e||(ub=ib),cs(e)},a.then(t,t);break e;case nb:ub=ib;break e;case rb:ub=ob;break e;case ib:vr(a)?(ub=Zy,cb=null,jl(t)):(ub=Zy,cb=null,Hl(e,t,a,ib));break;case ob:var i=null;switch(Xy.tag){case 26:i=Xy.memoizedState;case 5:case 27:var l=Xy;if(!i||Wu(i)){ub=Zy,cb=null;var s=l.sibling;if(null!==s)Xy=s;else{var u=l.return;null!==u?(Xy=u,Wl(u)):Xy=null}break t}break;default:console.error("Unexpected type of fiber triggered a suspensey commit. This is a bug in React.")}ub=Zy,cb=null,Hl(e,t,a,ob);break;case ab:ub=Zy,cb=null,Hl(e,t,a,ab);break;case lb:Pl(),mb=Qy;break e;default:throw Error("Unexpected SuspendedReason. This is a bug in React.")}null!==Gc.actQueue?Al():Fl();break}catch(t){Ll(e,t)}return $n(),Gc.H=r,Gc.A=o,Ky=n,null!==Xy?(null!==Sd&&"function"==typeof Sd.markRenderYielded&&Sd.markRenderYielded(),Wy):(Y(),Gy=null,Jy=0,dn(),mb)}(e,t):zl(e,t,!0),a=r;;){if(o===Wy){fb&&!r&&Cl(e,t,0,!1);break}if(n=e.current.alternate,!a||El(n)){if(o===Vy){if(a=t,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!==(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var l=i;i=wb;var s=(o=e).current.memoizedState.isDehydrated;if(s&&(Ol(o,l).flags|=256),(l=zl(o,l,!1))!==Vy){if(pb&&!s){o.errorRecoveryDisabledLanes|=a,yb|=a,o=$y;break e}o=Sb,Sb=i,null!==o&&(null===Sb?Sb=o:Sb.push.apply(Sb,o))}o=l}if(a=!1,o!==Vy)continue}}if(o===By){Ol(e,0),Cl(e,t,0,!0);break}e:{switch(r=e,o){case Wy:case By:throw Error("Root did not complete. This is a bug in React.");case $y:if((4194048&t)!==t)break;case Qy:Cl(r,t,vb,!db);break e;case Vy:Sb=null;break;case qy:case Yy:break;default:throw Error("Unknown root exit status.")}if(null!==Gc.actQueue)Vl(r,n,t,Sb,Rb,xb,vb,yb,kb);else{if((62914560&t)===t&&10<(a=_b+Tb-dd())){if(Cl(r,t,vb,!db),0!==J(r,0,!0))break e;r.timeoutHandle=Qv(Tl.bind(null,r,n,Sb,Rb,xb,t,vb,yb,kb,db,o,Db,em,0),a);break e}Tl(r,n,Sb,Rb,xb,t,vb,yb,kb,db,o,Ob,em,0)}}break}o=zl(e,t,!1),a=!1}cs(e)}function Tl(e,t,n,r,o,a,i,l,s,u,c,d,f,p){if(e.timeoutHandle=Kv,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(bk={stylesheets:null,count:0,unsuspend:Bu},pl(t),null!==(d=function(){if(null===bk)throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");var e=bk;return e.stylesheets&&0===e.count&&qu(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&qu(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(Vl.bind(null,e,t,a,n,r,o,i,l,s,c,Lb,f,p)),void Cl(e,a,i,!u);Vl(e,t,a,n,r,o,i,l,s)}function El(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&(null!==(n=t.updateQueue)&&null!==(n=n.stores)))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Hp(a(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Cl(e,t,n,r){t&=~bb,t&=~yb,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var a=31-Td(o),i=1<<a;r[a]=-1,o&=~i}0!==n&&ae(e,n,t)}function Rl(){return(Ky&(Uy|Hy))!==jy||(ds(0,!1),!1)}function Pl(){if(null!==Xy){if(ub===Zy)var e=Xy.return;else e=Xy,$n(),Gr(e),Fg=null,Mg=0,e=Xy;for(;null!==e;)vi(e.alternate,e),e=e.return;Xy=null}}function Ol(e,t){var n=e.timeoutHandle;n!==Kv&&(e.timeoutHandle=Kv,Yv(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Pl(),Gy=e,Xy=n=_n(e.current,null),Jy=t,ub=Zy,cb=null,db=!1,fb=Z(e,t),pb=!1,mb=Wy,kb=vb=bb=yb=gb=0,Sb=wb=null,xb=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-Td(r),a=1<<o;t|=e[o],r&=~a}return hb=t,dn(),1e3<(t=Hh())-jh&&(Gc.recentlyCreatedOwnerStacks=0,jh=t),fm.discardPendingWarnings(),n}function Ll(e,t){Km=null,Gc.H=cg,Gc.getCurrentStack=null,nf=!1,tf=null,t===xm||t===Tm?(t=Sr(),ub=nb):t===_m?(t=Sr(),ub=rb):ub=t===fy?lb:null!==t&&"object"==typeof t&&"function"==typeof t.then?ab:eb,cb=t;var n=Xy;if(null===n)mb=By,Aa(e,cn(t,e.current));else switch(n.mode&gh&&cr(n),$(),ub){case eb:null!==Sd&&"function"==typeof Sd.markComponentErrored&&Sd.markComponentErrored(n,t,Jy);break;case tb:case sb:case nb:case ab:case ib:null!==Sd&&"function"==typeof Sd.markComponentSuspended&&Sd.markComponentSuspended(n,t,Jy)}}function Dl(){var e=Gc.H;return Gc.H=cg,null===e?cg:e}function Il(){var e=Gc.A;return Gc.A=zy,e}function Nl(){mb=$y,db||(4194048&Jy)!==Jy&&null!==$g.current||(fb=!0),!(134217727&gb)&&!(134217727&yb)||null===Gy||Cl(Gy,Jy,vb,!1)}function zl(e,t,n){var r=Ky;Ky|=Uy;var o=Dl(),a=Il();if(Gy!==e||Jy!==t){if(_d){var i=e.memoizedUpdaters;0<i.size&&(us(e,Jy),i.clear()),ue(e,t)}Rb=null,Ol(e,t)}Q(t),t=!1,i=mb;e:for(;;)try{if(ub!==Zy&&null!==Xy){var l=Xy,s=cb;switch(ub){case lb:Pl(),i=Qy;break e;case nb:case tb:case sb:case ab:null===$g.current&&(t=!0);var u=ub;if(ub=Zy,cb=null,Hl(e,l,s,u),n&&fb){i=Wy;break e}break;default:u=ub,ub=Zy,cb=null,Hl(e,l,s,u)}}Al(),i=mb;break}catch(t){Ll(e,t)}return t&&e.shellSuspendCounter++,$n(),Ky=r,Gc.H=o,Gc.A=a,Y(),null===Xy&&(Gy=null,Jy=0,dn()),i}function Al(){for(;null!==Xy;)Ml(Xy)}function Fl(){for(;null!==Xy&&!ud();)Ml(Xy)}function Ml(e){var t=e.alternate;(e.mode&gh)!==hh?(ur(e),t=ze(e,di,t,e,hb),cr(e)):t=ze(e,di,t,e,hb),e.memoizedProps=e.pendingProps,null===t?Wl(e):Xy=t}function jl(e){var t=ze(e,Ul,e);e.memoizedProps=e.pendingProps,null===t?Wl(e):Xy=t}function Ul(e){var t=e.alternate,n=(e.mode&gh)!==hh;switch(n&&ur(e),e.tag){case 15:case 0:t=Ka(t,e,e.pendingProps,e.type,void 0,Jy);break;case 11:t=Ka(t,e,e.pendingProps,e.type.render,e.ref,Jy);break;case 5:Gr(e);default:vi(t,e),t=di(t,e=Xy=Tn(e,hb),hb)}return n&&cr(e),t}function Hl(e,t,n,r){$n(),Gr(t),Fg=null,Mg=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,_d&&us(e,o),null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Xn(t,n,o,!0),Ih&&(Nh=!0),null!==(n=$g.current)){switch(n.tag){case 13:return null===Qg?Nl():null===n.alternate&&mb===Wy&&(mb=qy),n.flags&=-257,n.flags|=65536,n.lanes=o,r===Em?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),es(e,r,o)),!1;case 22:return n.flags|=65536,r===Em?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),es(e,r,o)),!1}throw Error("Unexpected Suspense handler tag ("+n.tag+"). This is a bug in React.")}return es(e,r,o),Nl(),!1}if(Ih)return Nh=!0,null!==(t=$g.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==Mh&&Vn(cn(Error("There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",{cause:r}),n))):(r!==Mh&&Vn(cn(Error("There was an error while hydrating but React was able to recover by instead client rendering the entire root.",{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=cn(r,n),Pr(e,o=Ma(e.stateNode,r,o)),mb!==$y&&(mb=Vy)),!1;var a=cn(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",{cause:r}),n);if(null===wb?wb=[a]:wb.push(a),mb!==$y&&(mb=Vy),null===t)return!0;r=cn(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,Pr(n,e=Ma(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Pb&&Pb.has(a))))return n.flags|=65536,o&=-o,n.lanes|=o,Ua(o=ja(o),e,n,r),Pr(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,Jy))return mb=By,Aa(e,cn(n,e.current)),void(Xy=null)}catch(t){if(null!==o)throw Xy=o,t;return mb=By,Aa(e,cn(n,e.current)),void(Xy=null)}32768&t.flags?(Ih||r===eb?e=!0:fb||536870912&Jy?e=!1:(db=e=!0,(r===tb||r===sb||r===nb||r===ab)&&(null!==(r=$g.current)&&13===r.tag&&(r.flags|=16384))),Bl(t,e)):Wl(t)}function Wl(e){var t=e;do{if(32768&t.flags)return void Bl(t,db);var n=t.alternate;if(e=t.return,ur(t),n=ze(t,yi,n,t,hb),(t.mode&gh)!==hh&&dr(t),null!==n)return void(Xy=n);if(null!==(t=t.sibling))return void(Xy=t);Xy=t=e}while(null!==t);mb===Wy&&(mb=Yy)}function Bl(e,t){do{var n=bi(e.alternate,e);if(null!==n)return n.flags&=32767,void(Xy=n);if((e.mode&gh)!==hh){dr(e),n=e.actualDuration;for(var r=e.child;null!==r;)n+=r.actualDuration,r=r.sibling;e.actualDuration=n}if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(Xy=e);Xy=e=n}while(null!==e);mb=Qy,Xy=null}function Vl(e,t,n,r,o,a,i,l,s){e.cancelPendingCommit=null;do{Gl()}while(jb!==Ib);if(fm.flushLegacyContextWarning(),fm.flushPendingUnsafeLifecycleWarnings(),(Ky&(Uy|Hy))!==jy)throw Error("Should not already be working.");if(null!==Sd&&"function"==typeof Sd.markCommitStarted&&Sd.markCommitStarted(n),null===t)V();else{if(0===n&&console.error("finishedLanes should not be empty during a commit. This is a bug in React."),t===e.current)throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");if(a=t.lanes|t.childLanes,function(e,t,n,r,o,a){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=i&~n;0<n;){var c=31-Td(n),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&ae(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(i&~t))}(e,n,a|=ch,i,l,s),e===Gy&&(Xy=Gy=null,Jy=0),Hb=t,Ub=e,Wb=n,Bb=a,Vb=o,qb=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,u=md,c=function(){return Xl(),null},null!==(d=Gc.actQueue)?d.push(c):ld(u,c)):(e.callbackNode=null,e.callbackPriority=0),tm=Zh(),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=Gc.T,Gc.T=null,o=Xc.p,Xc.p=Od,i=Ky,Ky|=Hy;try{!function(e,t){if(e=e.containerInfo,Bv=Ok,on(e=rn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,l=-1,s=-1,u=0,c=0,d=e,f=null;t:for(;;){for(var p;d!==n||0!==o&&3!==d.nodeType||(l=i+o),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===e)break t;if(f===n&&++u===o&&(l=i),f===a&&++c===r&&(s=i),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Vv={focusedElem:e,selectionRange:n},Ok=!1,Ry=t;null!==Ry;)if(e=(t=Ry).child,1024&t.subtreeFlags&&null!==e)e.return=t,Ry=e;else for(;null!==Ry;){switch(n=(e=t=Ry).alternate,o=e.flags,e.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:1024&o&&null!==n&&Pi(e,n);break;case 3:if(1024&o)if(9===(n=(e=e.stateNode.containerInfo).nodeType))mu(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":mu(e);break;default:e.textContent=""}break;default:if(1024&o)throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}if(null!==(e=t.sibling)){e.return=t.return,Ry=e;break}Ry=t.return}}(e,t)}finally{Ky=i,Xc.p=o,Gc.T=r}}jb=Nb,ql(),$l(),Ql()}var u,c,d}function ql(){if(jb===Nb){jb=Ib;var e=Ub,t=Hb,n=Wb,r=!!(13878&t.flags);if(13878&t.subtreeFlags||r){r=Gc.T,Gc.T=null;var o=Xc.p;Xc.p=Od;var a=Ky;Ky|=Hy;try{Py=n,Oy=e,Xi(t,e),Oy=Py=null,n=Vv;var i=rn(e.containerInfo),l=n.focusedElem,s=n.selectionRange;if(i!==l&&l&&l.ownerDocument&&nn(l.ownerDocument.documentElement,l)){if(null!==s&&on(l)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in l)l.selectionStart=u,l.selectionEnd=Math.min(c,l.value.length);else{var d=l.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var p=f.getSelection(),h=l.textContent.length,m=Math.min(s.start,h),g=void 0===s.end?m:Math.min(s.end,h);!p.extend&&m>g&&(i=g,g=m,m=i);var y=tn(l,m),b=tn(l,g);if(y&&b&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==b.node||p.focusOffset!==b.offset)){var v=d.createRange();v.setStart(y.node,y.offset),p.removeAllRanges(),m>g?(p.addRange(v),p.extend(b.node,b.offset)):(v.setEnd(b.node,b.offset),p.addRange(v))}}}}for(d=[],p=l;p=p.parentNode;)1===p.nodeType&&d.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof l.focus&&l.focus(),l=0;l<d.length;l++){var k=d[l];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}Ok=!!Bv,Vv=Bv=null}finally{Ky=a,Xc.p=o,Gc.T=r}}e.current=t,jb=zb}}function $l(){if(jb===zb){jb=Ib;var e=Ub,t=Hb,n=Wb,r=!!(8772&t.flags);if(8772&t.subtreeFlags||r){r=Gc.T,Gc.T=null;var o=Xc.p;Xc.p=Od;var a=Ky;Ky|=Hy;try{null!==Sd&&"function"==typeof Sd.markLayoutEffectsStarted&&Sd.markLayoutEffectsStarted(n),Py=n,Oy=e,Vi(e,t.alternate,t),Oy=Py=null,null!==Sd&&"function"==typeof Sd.markLayoutEffectsStopped&&Sd.markLayoutEffectsStopped()}finally{Ky=a,Xc.p=o,Gc.T=r}}jb=Ab}}function Ql(){if(jb===Fb||jb===Ab){jb=Ib,cd();var e=Ub,t=Hb,n=Wb,r=qb,o=!!(10256&t.subtreeFlags)||!!(10256&t.flags);o?jb=Mb:(jb=Ib,Hb=Ub=null,Kl(e,e.pendingLanes),Jb=0,Zb=null);var a=e.pendingLanes;if(0===a&&(Pb=null),o||ls(e),o=ce(n),t=t.stateNode,wd&&"function"==typeof wd.onCommitFiberRoot)try{var i=!(128&~t.current.flags);switch(o){case Od:var l=pd;break;case Ld:l=hd;break;case Dd:l=md;break;case Id:l=yd;break;default:l=md}wd.onCommitFiberRoot(kd,t,l,i)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}if(_d&&e.memoizedUpdaters.clear(),Fy.forEach((function(e){return e()})),null!==r){i=Gc.T,l=Xc.p,Xc.p=Od,Gc.T=null;try{var s=e.onRecoverableError;for(t=0;t<r.length;t++){var u=r[t],c=Yl(u.stack);ze(u.source,s,u.value,c)}}finally{Gc.T=i,Xc.p=l}}3&Wb&&Gl(),cs(e),a=e.pendingLanes,4194090&n&&42&a?(am=!0,e===Yb?Qb++:(Qb=0,Yb=e)):Qb=0,ds(0,!1),V()}}function Yl(e){return e={componentStack:e},Object.defineProperty(e,"digest",{get:function(){console.error('You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.')}}),e}function Kl(e,t){0==(e.pooledCacheLanes&=t)&&(null!=(t=e.pooledCache)&&(e.pooledCache=null,ar(t)))}function Gl(e){return ql(),$l(),Ql(),Xl()}function Xl(){if(jb!==Mb)return!1;var e=Ub,t=Bb;Bb=0;var n=ce(Wb),r=0===Dd||Dd>n?Dd:n;n=Gc.T;var o=Xc.p;try{Xc.p=r,Gc.T=null,r=Vb,Vb=null;var a=Ub,i=Wb;if(jb=Ib,Hb=Ub=null,Wb=0,(Ky&(Uy|Hy))!==jy)throw Error("Cannot flush passive effects while already rendering.");Kb=!0,Gb=!1,null!==Sd&&"function"==typeof Sd.markPassiveEffectsStarted&&Sd.markPassiveEffectsStarted(i);var l=Ky;if(Ky|=Hy,gl(a.current),sl(a,a.current,i,r),null!==Sd&&"function"==typeof Sd.markPassiveEffectsStopped&&Sd.markPassiveEffectsStopped(),ls(a),Ky=l,ds(0,!1),Gb?a===Zb?Jb++:(Jb=0,Zb=a):Jb=0,Gb=Kb=!1,wd&&"function"==typeof wd.onPostCommitFiberRoot)try{wd.onPostCommitFiberRoot(kd,a)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}var s=a.current.stateNode;return s.effectDuration=0,s.passiveEffectDuration=0,!0}finally{Xc.p=o,Gc.T=n,Kl(e,t)}}function Jl(e,t,n){t=cn(n,t),null!==(e=Cr(e,t=Ma(e.stateNode,t,2),2))&&(oe(e,2),cs(e))}function Zl(e,t,n){if(ev=!1,3===e.tag)Jl(e,e,n);else{for(;null!==t;){if(3===t.tag)return void Jl(t,e,n);if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Pb||!Pb.has(r)))return e=cn(n,e),void(null!==(r=Cr(t,n=ja(2),2))&&(Ua(n,r,t,e),oe(r,2),cs(r)))}t=t.return}console.error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",n)}}function es(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new My;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(pb=!0,o.add(n),r=ts.bind(null,e,t,n),_d&&us(e,n),t.then(r,r))}function ts(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,kl()&&null===Gc.actQueue&&console.error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"),Gy===e&&(Jy&n)===n&&(mb===$y||mb===qy&&(62914560&Jy)===Jy&&dd()-_b<Tb?(Ky&Uy)===jy&&Ol(e,0):bb|=n,kb===Jy&&(kb=0)),cs(e)}function ns(e,t){0===t&&(t=ne()),null!==(e=hn(e,t))&&(oe(e,t),cs(e))}function rs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ns(e,n)}function os(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.")}null!==r&&r.delete(t),ns(e,n)}function as(e,t,n){if(67117056&t.subtreeFlags)for(t=t.child;null!==t;){var r=e,o=t,a=o.type===Rc;a=n||a,22!==o.tag?67108864&o.flags?a&&ze(o,is,r,o,(o.mode&vh)===hh):as(r,o,a):null===o.memoizedState&&(a&&8192&o.flags?ze(o,is,r,o):67108864&o.subtreeFlags&&ze(o,as,r,o,a)),t=t.sibling}}function is(e,t){var n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2];W(!0);try{tl(t),n&&bl(t),rl(e,t.alternate,t,!1),n&&cl(e,t,0,null,!1)}finally{W(!1)}}function ls(e){var t=!0;e.current.mode&(yh|bh)||(t=!1),as(e,e.current,t)}function ss(e){if((Ky&Uy)===jy){var t=e.tag;if(3===t||1===t||0===t||11===t||14===t||15===t){if(t=E(e)||"ReactComponent",null!==tv){if(tv.has(t))return;tv.add(t)}else tv=new Set([t]);ze(e,(function(){console.error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.")}))}}}function us(e,t){_d&&e.memoizedUpdaters.forEach((function(n){se(e,n,t)}))}function cs(e){e!==av&&null===e.next&&(null===av?ov=av=e:av=av.next=e),sv=!0,null!==Gc.actQueue?lv||(lv=!0,bs()):iv||(iv=!0,bs())}function ds(e,t){if(!uv&&sv){uv=!0;do{for(var n=!1,r=ov;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var i=r.suspendedLanes,l=r.pingedLanes;a=(1<<31-Td(42|e)+1)-1,a=201326741&(a&=o&~(i&~l))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,gs(r,a))}else a=Jy,!(3&(a=J(r,r===Gy?a:0,null!==r.cancelPendingCommit||r.timeoutHandle!==Kv)))||Z(r,a)||(n=!0,gs(r,a));r=r.next}}while(n);uv=!1}}function fs(){ps()}function ps(){sv=lv=iv=!1;var e=0;0!==cv&&(function(){var e=window.event;if(e&&"popstate"===e.type)return e!==$v&&($v=e,!0);return $v=null,!1}()&&(e=cv),cv=0);for(var t=dd(),n=null,r=ov;null!==r;){var o=r.next,a=hs(r,t);0===a?(r.next=null,null===n?ov=o:n.next=o,null===o&&(av=n)):(n=r,(0!==e||3&a)&&(sv=!0)),r=o}ds(e,!1)}function hs(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var i=31-Td(a),l=1<<i,s=o[i];-1===s?l&n&&!(l&r)||(o[i]=ee(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}if(n=Jy,n=J(e,e===(t=Gy)?n:0,null!==e.cancelPendingCommit||e.timeoutHandle!==Kv),r=e.callbackNode,0===n||e===t&&(ub===tb||ub===sb)||null!==e.cancelPendingCommit)return null!==r&&ys(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Z(e,n)){if((t=n&-n)===e.callbackPriority&&(null===Gc.actQueue||r===dv))return t;switch(ys(r),ce(n)){case Od:case Ld:n=hd;break;case Dd:n=md;break;case Id:n=yd;break;default:n=md}return r=ms.bind(null,e),null!==Gc.actQueue?(Gc.actQueue.push(r),n=dv):n=ld(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&ys(r),e.callbackPriority=2,e.callbackNode=null,2}function ms(e,t){if(am=om=!1,jb!==Ib&&jb!==Mb)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(Gl()&&e.callbackNode!==n)return null;var r=Jy;return 0===(r=J(e,e===Gy?r:0,null!==e.cancelPendingCommit||e.timeoutHandle!==Kv))?null:(_l(e,r,t),hs(e,dd()),null!=e.callbackNode&&e.callbackNode===n?ms.bind(null,e):null)}function gs(e,t){if(Gl())return null;om=am,am=!1,_l(e,t,!0)}function ys(e){e!==dv&&null!==e&&sd(e)}function bs(){null!==Gc.actQueue&&Gc.actQueue.push((function(){return ps(),null})),Xv((function(){(Ky&(Uy|Hy))!==jy?ld(pd,fs):ps()}))}function vs(){return 0===cv&&(cv=te()),cv}function ks(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:(j(e,"action"),Rt(""+e))}function ws(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}function Ss(e,t,n){e.currentTarget=n;try{t(e)}catch(e){uy(e)}e.currentTarget=null}function xs(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n];e:{var o=void 0,a=r.event;if(r=r.listeners,t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;null!==s?ze(s,Ss,a,l,u):Ss(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;null!==s?ze(s,Ss,a,l,u):Ss(a,l,u),o=s}}}}function _s(e,t){pv.has(e)||console.error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',e);var n=t[Md];void 0===n&&(n=t[Md]=new Set);var r=e+"__bubble";n.has(r)||(Cs(t,e,2,!1),n.add(r))}function Ts(e,t,n){pv.has(e)&&!t&&console.error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',e);var r=0;t&&(r|=4),Cs(n,e,r,t)}function Es(e){if(!e[hv]){e[hv]=!0,Bd.forEach((function(t){"selectionchange"!==t&&(pv.has(t)||Ts(t,!1,e),Ts(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[hv]||(t[hv]=!0,Ts("selectionchange",!1,t))}}function Cs(e,t,n,r){switch(lc(t)){case Od:var o=nc;break;case Ld:o=rc;break;default:o=oc}n=o.bind(null,t,n,e),o=void 0,!Jf||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rs(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&i.stateNode.containerInfo===o)return;i=i.return}for(;null!==l;){if(null===(i=pe(l)))return;if(5===(s=i.tag)||6===s||26===s||27===s){r=a=i;continue e}l=l.parentNode}}r=r.return}Lt((function(){var r=a,o=Pt(n),i=[];e:{var l=rh.get(e);if(void 0!==l){var s=lp,u=e;switch(e){case"keypress":if(0===Nt(n))break e;case"keydown":case"keyup":s=wp;break;case"focusin":u="focus",s=pp;break;case"focusout":u="blur",s=pp;break;case"beforeblur":case"afterblur":s=pp;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=dp;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=fp;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=xp;break;case Gp:case Xp:case Jp:s=hp;break;case nh:s=_p;break;case"scroll":case"scrollend":s=up;break;case"wheel":s=Tp;break;case"copy":case"cut":case"paste":s=mp;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Sp;break;case"toggle":case"beforetoggle":s=Ep}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===f||null!=(m=Dt(h,f))&&c.push(Ps(h,m,p)),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Qf||!(u=n.relatedTarget||n.fromElement)||!pe(u)&&!u[Fd])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?pe(u):null)&&(d=v(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(s=null,u=r),s!==u)){if(c=dp,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Sp,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:me(s),p=null==u?l:me(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,pe(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=Ls(p))h++;for(p=0,m=f;m;m=Ls(m))p++;for(;0<h-p;)c=Ls(c),h--;for(;0<p-h;)f=Ls(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Ls(c),f=Ls(f)}c=null}else c=null;null!==s&&Ds(i,l,s,c,!1),null!==u&&null!==d&&Ds(i,d,u,c,!0)}if("select"===(s=(l=r?me(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=$t;else if(Wt(l))if(Up)g=Jt;else{g=Gt;var y=Kt}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&_t(r.elementType)&&(g=$t):g=Xt;switch(g&&(g=g(e,r))?Bt(i,g,n,o):(y&&y(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&$e(l,"number",l.value)),y=r?me(r):window,e){case"focusin":(Wt(y)||"true"===y.contentEditable)&&(Bp=y,Vp=r,qp=null);break;case"focusout":qp=Vp=Bp=null;break;case"mousedown":$p=!0;break;case"contextmenu":case"mouseup":case"dragend":$p=!1,an(i,n,o);break;case"selectionchange":if(Wp)break;case"keydown":case"keyup":an(i,n,o)}var b;if(Pp)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else Ap?Ut(e,n)&&(k="onCompositionEnd"):"keydown"===e&&n.keyCode===Rp&&(k="onCompositionStart");k&&(Dp&&"ko"!==n.locale&&(Ap||"onCompositionStart"!==k?"onCompositionEnd"===k&&Ap&&(b=It()):(op="value"in(rp=o)?rp.value:rp.textContent,Ap=!0)),0<(y=Os(r,k)).length&&(k=new gp(k,e,null,n,o),i.push({event:k,listeners:y}),b?k.data=b:null!==(b=Ht(n))&&(k.data=b))),(b=Lp?function(e,t){switch(e){case"compositionend":return Ht(t);case"keypress":return t.which!==Ip?null:(zp=!0,Np);case"textInput":return(e=t.data)===Np&&zp?null:e;default:return null}}(e,n):function(e,t){if(Ap)return"compositionend"===e||!Pp&&Ut(e,t)?(e=It(),ap=op=rp=null,Ap=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dp&&"ko"!==t.locale?null:t.data}}(e,n))&&(0<(k=Os(r,"onBeforeInput")).length&&(y=new yp("onBeforeInput","beforeinput",null,n,o),i.push({event:y,listeners:k}),y.data=b)),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var a=ks((o[Ad]||null).action),i=r.submitter;i&&null!==(t=(t=i[Ad]||null)?ks(t.formAction):i.getAttribute("formAction"))&&(a=t,i=null);var l=new lp("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==cv){var e=i?ws(o,i):new FormData(o),t={pending:!0,data:e,method:o.method,action:a};Object.freeze(t),Jo(n,t,null,e)}}else"function"==typeof a&&(l.preventDefault(),t={pending:!0,data:e=i?ws(o,i):new FormData(o),method:o.method,action:a},Object.freeze(t),Jo(n,t,a,e))},currentTarget:o}]})}}(i,e,r,n,o)}xs(i,t)}))}function Ps(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Os(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=Dt(e,n))&&r.unshift(Ps(e,o,a)),null!=(o=Dt(e,t))&&r.push(Ps(e,o,a))),3===e.tag)return r;e=e.return}return[]}function Ls(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Ds(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=Dt(n,a))&&i.unshift(Ps(n,u,s)):o||null!=(u=Dt(n,a))&&i.push(Ps(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Is(e,t){!function(e,t){var n,r=[];for(n in t)Et(e,n)||r.push(n);t=r.map((function(e){return"`"+e+"`"})).join(", "),1===r.length?console.error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",t,e):1<r.length&&console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",t,e)}(e,t),"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Uf||(Uf=!0,"select"===e&&t.multiple?console.error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",e):console.error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",e));var n={registrationNameDependencies:Vd,possibleRegistrationNames:qd};_t(e)||"string"==typeof t.is||function(e,t,n){var r,o=[];for(r in t)Ct(e,r,t[r],n)||o.push(r);t=o.map((function(e){return"`"+e+"`"})).join(", "),1===o.length?console.error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",t,e):1<o.length&&console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",t,e)}(e,t,n),t.contentEditable&&!t.suppressContentEditableWarning&&null!=t.children&&console.error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.")}function Ns(e,t,n,r){t!==n&&(n=Fs(n),Fs(t)!==n&&(r[e]=t))}function zs(e,t){!1===t?console.error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",e,e,e):console.error("Expected `%s` listener to be a function, instead got a value of `%s` type.",e,typeof t)}function As(e,t){return(e=e.namespaceURI===Df||e.namespaceURI===If?e.ownerDocument.createElementNS(e.namespaceURI,e.tagName):e.ownerDocument.createElement(e.tagName)).innerHTML=t,e.innerHTML}function Fs(e){return F(e)&&(console.error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",A(e)),M(e)),("string"==typeof e?e:""+e).replace(xv,"\n").replace(_v,"")}function Ms(e,t){return t=Fs(t),Fs(e)===t}function js(){}function Us(e,t,n,r,o,a){switch(n){case"children":"string"==typeof r?(kt(r,t,!1),"body"===t||"textarea"===t&&""===r||wt(e,r)):"number"!=typeof r&&"bigint"!=typeof r||(kt(""+r,t,!1),"body"!==t&&wt(e,""+r));break;case"className":_e(e,"class",r);break;case"tabIndex":_e(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":_e(e,n,r);break;case"style":xt(e,r,a);break;case"data":if("object"!==t){_e(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){"src"===n?console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',n,n):console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',n,n),e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}j(r,n),r=Rt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if(null!=r&&("form"===t?"formAction"===n?console.error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."):"function"==typeof r&&(null==o.encType&&null==o.method||kv||(kv=!0,console.error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.")),null==o.target||vv||(vv=!0,console.error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."))):"input"===t||"button"===t?"action"===n?console.error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."):"input"!==t||"submit"===o.type||"image"===o.type||yv?"button"!==t||null==o.type||"submit"===o.type||yv?"function"==typeof r&&(null==o.name||bv||(bv=!0,console.error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.')),null==o.formEncType&&null==o.formMethod||kv||(kv=!0,console.error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.")),null==o.formTarget||vv||(vv=!0,console.error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."))):(yv=!0,console.error('A button can only specify a formAction along with type="submit" or no type.')):(yv=!0,console.error('An input can only specify a formAction along with type="submit" or type="image".')):"action"===n?console.error("You can only pass the action prop to <form>."):console.error("You can only pass the formAction prop to <input> or <button>.")),"function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Us(e,t,"name",o.name,o,null),Us(e,t,"formEncType",o.formEncType,o,null),Us(e,t,"formMethod",o.formMethod,o,null),Us(e,t,"formTarget",o.formTarget,o,null)):(Us(e,t,"encType",o.encType,o,null),Us(e,t,"method",o.method,o,null),Us(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}j(r,n),r=Rt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&("function"!=typeof r&&zs(n,r),e.onclick=js);break;case"onScroll":null!=r&&("function"!=typeof r&&zs(n,r),_s("scroll",e));break;case"onScrollEnd":null!=r&&("function"!=typeof r&&zs(n,r),_s("scrollend",e));break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");if(null!=(n=r.__html)){if(null!=o.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}j(r,n),n=Rt(""+r),e.setAttributeNS(Tv,"xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?(j(r,n),e.setAttribute(n,""+r)):e.removeAttribute(n);break;case"inert":""!==r||Sv[n]||(Sv[n]=!0,console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",n));case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?(j(r,n),e.setAttribute(n,r)):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?(j(r,n),e.setAttribute(n,r)):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):(j(r,n),e.setAttribute(n,r));break;case"popover":_s("beforetoggle",e),_s("toggle",e),xe(e,"popover",r);break;case"xlinkActuate":Te(e,Tv,"xlink:actuate",r);break;case"xlinkArcrole":Te(e,Tv,"xlink:arcrole",r);break;case"xlinkRole":Te(e,Tv,"xlink:role",r);break;case"xlinkShow":Te(e,Tv,"xlink:show",r);break;case"xlinkTitle":Te(e,Tv,"xlink:title",r);break;case"xlinkType":Te(e,Tv,"xlink:type",r);break;case"xmlBase":Te(e,Ev,"xml:base",r);break;case"xmlLang":Te(e,Ev,"xml:lang",r);break;case"xmlSpace":Te(e,Ev,"xml:space",r);break;case"is":null!=a&&console.error('Cannot update the "is" prop after it has been initialized.'),xe(e,"is",r);break;case"innerText":case"textContent":break;case"popoverTarget":wv||null==r||"object"!=typeof r||(wv=!0,console.error("The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",r));default:!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1]?xe(e,n=Tt(n),r):Vd.hasOwnProperty(n)&&null!=r&&"function"!=typeof r&&zs(n,r)}}function Hs(e,t,n,r,o,a){switch(n){case"style":xt(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");if(null!=(n=r.__html)){if(null!=o.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&("function"!=typeof r&&zs(n,r),_s("scroll",e));break;case"onScrollEnd":null!=r&&("function"!=typeof r&&zs(n,r),_s("scrollend",e));break;case"onClick":null!=r&&("function"!=typeof r&&zs(n,r),e.onclick=js);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Vd.hasOwnProperty(n)?null!=r&&"function"!=typeof r&&zs(n,r):"o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Ad]||null)?a[n]:null)&&e.removeEventListener(t,a,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):xe(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o))}}function Ws(e,t,n){switch(Is(t,n),t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":_s("error",e),_s("load",e);var r,o=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Us(e,t,r,i,n,null)}}return a&&Us(e,t,"srcSet",n.srcSet,n,null),void(o&&Us(e,t,"src",n.src,n,null));case"input":ke("input",n),_s("invalid",e);var l=r=i=a=null,s=null,u=null;for(o in n)if(n.hasOwnProperty(o)){var c=n[o];if(null!=c)switch(o){case"name":a=c;break;case"type":i=c;break;case"checked":s=c;break;case"defaultChecked":u=c;break;case"value":r=c;break;case"defaultValue":l=c;break;case"children":case"dangerouslySetInnerHTML":if(null!=c)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:Us(e,t,o,c,n,null)}}return Be(0,n),qe(e,r,l,s,u,i,a,!1),void je(e);case"select":for(a in ke("select",n),_s("invalid",e),o=i=r=null,n)if(n.hasOwnProperty(a)&&null!=(l=n[a]))switch(a){case"value":r=l;break;case"defaultValue":i=l;break;case"multiple":o=l;default:Us(e,t,a,l,n,null)}return Ge(e,n),t=r,n=i,e.multiple=!!o,void(null!=t?Ke(e,!!o,t,!1):null!=n&&Ke(e,!!o,n,!0));case"textarea":for(i in ke("textarea",n),_s("invalid",e),r=a=o=null,n)if(n.hasOwnProperty(i)&&null!=(l=n[i]))switch(i){case"value":o=l;break;case"defaultValue":a=l;break;case"children":r=l;break;case"dangerouslySetInnerHTML":if(null!=l)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");break;default:Us(e,t,i,l,n,null)}return Xe(0,n),Ze(e,o,a,r),void je(e);case"option":for(s in Qe(0,n),n)if(n.hasOwnProperty(s)&&null!=(o=n[s]))if("selected"===s)e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o;else Us(e,t,s,o,n,null);return;case"dialog":_s("beforetoggle",e),_s("toggle",e),_s("cancel",e),_s("close",e);break;case"iframe":case"object":_s("load",e);break;case"video":case"audio":for(o=0;o<fv.length;o++)_s(fv[o],e);break;case"image":_s("error",e),_s("load",e);break;case"details":_s("toggle",e);break;case"embed":case"source":case"link":_s("error",e),_s("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(u in n)if(n.hasOwnProperty(u)&&null!=(o=n[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Us(e,t,u,o,n,null)}return;default:if(_t(t)){for(c in n)n.hasOwnProperty(c)&&(void 0!==(o=n[c])&&Hs(e,t,c,o,n,void 0));return}}for(l in n)n.hasOwnProperty(l)&&(null!=(o=n[l])&&Us(e,t,l,o,n,null))}function Bs(e){switch(e){case"class":return"className";case"for":return"htmlFor";default:return e}}function Vs(e){var t={};e=e.style;for(var n=0;n<e.length;n++){var r=e[n];t[r]=e.getPropertyValue(r)}return t}function qs(e,t,n){if(null!=t&&"object"!=typeof t)console.error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");else{var r,o,a=r="";for(o in t)if(t.hasOwnProperty(o)){var i=t[o];null!=i&&"boolean"!=typeof i&&""!==i&&(0===o.indexOf("--")?(U(i,o),r+=a+o+":"+(""+i).trim()):"number"!=typeof i||0===i||Lf.has(o)?(U(i,o),r+=a+o.replace(wf,"-$1").toLowerCase().replace(Sf,"-ms-")+":"+(""+i).trim()):r+=a+o.replace(wf,"-$1").toLowerCase().replace(Sf,"-ms-")+":"+i+"px",a=";")}r=r||null,(t=e.getAttribute("style"))!==r&&(r=Fs(r),Fs(t)!==r&&(n.style=Vs(e)))}}function $s(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(j(r,t),e===""+r)return}Ns(t,e,r,a)}function Qs(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n))){switch(typeof r){case"function":case"symbol":return}if(!r)return}else switch(typeof r){case"function":case"symbol":break;default:if(r)return}Ns(t,e,r,a)}function Ys(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":return}else if(null!=r)switch(typeof r){case"function":case"symbol":break;default:if(j(r,n),e===""+r)return}Ns(t,e,r,a)}function Ks(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return;default:if(isNaN(r))return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(!isNaN(r)&&(j(r,t),e===""+r))return}Ns(t,e,r,a)}function Gs(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(j(r,t),e===(n=Rt(""+r)))return}Ns(t,e,r,a)}function Xs(e,t,n,r){for(var o={},a=new Set,i=e.attributes,l=0;l<i.length;l++)switch(i[l].name.toLowerCase()){case"value":case"checked":case"selected":break;default:a.add(i[l].name)}if(_t(t)){for(var s in n)if(n.hasOwnProperty(s)){var u=n[s];if(null!=u)if(Vd.hasOwnProperty(s))"function"!=typeof u&&zs(s,u);else if(!0!==n.suppressHydrationWarning)switch(s){case"children":"string"!=typeof u&&"number"!=typeof u||Ns("children",e.textContent,u,o);continue;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":continue;case"dangerouslySetInnerHTML":i=e.innerHTML,null!=(u=u?u.__html:void 0)&&Ns(s,i,u=As(e,u),o);continue;case"style":a.delete(s),qs(e,u,o);continue;case"offsetParent":case"offsetTop":case"offsetLeft":case"offsetWidth":case"offsetHeight":case"isContentEditable":case"outerText":case"outerHTML":a.delete(s.toLowerCase()),console.error("Assignment to read-only property will result in a no-op: `%s`",s);continue;case"className":a.delete("class"),Ns("className",i=Se(e,"class",u),u,o);continue;default:r.context===Uv&&"svg"!==t&&"math"!==t?a.delete(s.toLowerCase()):a.delete(s),Ns(s,i=Se(e,s,u),u,o)}}}else for(u in n)if(n.hasOwnProperty(u)&&null!=(s=n[u]))if(Vd.hasOwnProperty(u))"function"!=typeof s&&zs(u,s);else if(!0!==n.suppressHydrationWarning)switch(u){case"children":"string"!=typeof s&&"number"!=typeof s||Ns("children",e.textContent,s,o);continue;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"value":case"checked":case"selected":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":continue;case"dangerouslySetInnerHTML":i=e.innerHTML,null!=(s=s?s.__html:void 0)&&(i!==(s=As(e,s))&&(o[u]={__html:i}));continue;case"className":$s(e,u,"class",s,a,o);continue;case"tabIndex":$s(e,u,"tabindex",s,a,o);continue;case"style":a.delete(u),qs(e,s,o);continue;case"multiple":a.delete(u),Ns(u,e.multiple,s,o);continue;case"muted":a.delete(u),Ns(u,e.muted,s,o);continue;case"autoFocus":a.delete("autofocus"),Ns(u,e.autofocus,s,o);continue;case"data":if("object"!==t){a.delete(u),Ns(u,i=e.getAttribute("data"),s,o);continue}case"src":case"href":if(!(""!==s||"a"===t&&"href"===u||"object"===t&&"data"===u)){"src"===u?console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',u,u):console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',u,u);continue}Gs(e,u,u,s,a,o);continue;case"action":case"formAction":if(i=e.getAttribute(u),"function"==typeof s){a.delete(u.toLowerCase()),"formAction"===u?(a.delete("name"),a.delete("formenctype"),a.delete("formmethod"),a.delete("formtarget")):(a.delete("enctype"),a.delete("method"),a.delete("target"));continue}if(i===Cv){a.delete(u.toLowerCase()),Ns(u,"function",s,o);continue}Gs(e,u,u.toLowerCase(),s,a,o);continue;case"xlinkHref":Gs(e,u,"xlink:href",s,a,o);continue;case"contentEditable":Ys(e,u,"contenteditable",s,a,o);continue;case"spellCheck":Ys(e,u,"spellcheck",s,a,o);continue;case"draggable":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":Ys(e,u,u,s,a,o);continue;case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":Qs(e,u,u.toLowerCase(),s,a,o);continue;case"capture":case"download":e:{l=e;var c=i=u,d=o;if(a.delete(c),null===(l=l.getAttribute(c)))switch(typeof s){case"undefined":case"function":case"symbol":break e;default:if(!1===s)break e}else if(null!=s)switch(typeof s){case"function":case"symbol":break;case"boolean":if(!0===s&&""===l)break e;break;default:if(j(s,i),l===""+s)break e}Ns(i,l,s,d)}continue;case"cols":case"rows":case"size":case"span":e:{if(l=e,c=i=u,d=o,a.delete(c),null===(l=l.getAttribute(c)))switch(typeof s){case"undefined":case"function":case"symbol":case"boolean":break e;default:if(isNaN(s)||1>s)break e}else if(null!=s)switch(typeof s){case"function":case"symbol":case"boolean":break;default:if(!(isNaN(s)||1>s)&&(j(s,i),l===""+s))break e}Ns(i,l,s,d)}continue;case"rowSpan":Ks(e,u,"rowspan",s,a,o);continue;case"start":Ks(e,u,u,s,a,o);continue;case"xHeight":$s(e,u,"x-height",s,a,o);continue;case"xlinkActuate":$s(e,u,"xlink:actuate",s,a,o);continue;case"xlinkArcrole":$s(e,u,"xlink:arcrole",s,a,o);continue;case"xlinkRole":$s(e,u,"xlink:role",s,a,o);continue;case"xlinkShow":$s(e,u,"xlink:show",s,a,o);continue;case"xlinkTitle":$s(e,u,"xlink:title",s,a,o);continue;case"xlinkType":$s(e,u,"xlink:type",s,a,o);continue;case"xmlBase":$s(e,u,"xml:base",s,a,o);continue;case"xmlLang":$s(e,u,"xml:lang",s,a,o);continue;case"xmlSpace":$s(e,u,"xml:space",s,a,o);continue;case"inert":""!==s||Sv[u]||(Sv[u]=!0,console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",u)),Qs(e,u,u,s,a,o);continue;default:if(!(2<u.length)||"o"!==u[0]&&"O"!==u[0]||"n"!==u[1]&&"N"!==u[1]){l=Tt(u),i=!1,r.context===Uv&&"svg"!==t&&"math"!==t?a.delete(l.toLowerCase()):(c=u.toLowerCase(),null!==(c=zf.hasOwnProperty(c)&&zf[c]||null)&&c!==u&&(i=!0,a.delete(c)),a.delete(l));e:if(c=e,d=l,l=s,we(d))if(c.hasAttribute(d))c=c.getAttribute(d),j(l,d),l=c===""+l?l:c;else{switch(typeof l){case"function":case"symbol":break e;case"boolean":if("data-"!==(c=d.toLowerCase().slice(0,5))&&"aria-"!==c)break e}l=void 0===l?void 0:null}else l=void 0;i||Ns(u,l,s,o)}}return 0<a.size&&!0!==n.suppressHydrationWarning&&function(e,t,n){t.forEach((function(t){n[Bs(t)]="style"===t?Vs(e):e.getAttribute(t)}))}(e,a,o),0===Object.keys(o).length?null:o}function Js(e){return 9===e.nodeType?e:e.ownerDocument}function Zs(e){switch(e){case If:return Hv;case Df:return Wv;default:return Uv}}function eu(e,t){if(e===Uv)switch(t){case"svg":return Hv;case"math":return Wv;default:return Uv}return e===Hv&&"foreignObject"===t?Uv:e}function tu(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function nu(e){setTimeout((function(){throw e}))}function ru(e,t,n){switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&e.focus();break;case"img":n.src?e.src=n.src:n.srcSet&&(e.srcset=n.srcSet)}}function ou(e,t,n,r){!function(e,t,n,r){switch(Is(t,r),t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,i=null,l=null,s=null,u=null,c=null;for(p in n){var d=n[p];if(n.hasOwnProperty(p)&&null!=d)switch(p){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(p)||Us(e,t,p,null,r,d)}}for(var f in r){var p=r[f];if(d=n[f],r.hasOwnProperty(f)&&(null!=p||null!=d))switch(f){case"type":a=p;break;case"name":o=p;break;case"checked":u=p;break;case"defaultChecked":c=p;break;case"value":i=p;break;case"defaultValue":l=p;break;case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:p!==d&&Us(e,t,f,p,r,d)}}return t="checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value,r="checkbox"===r.type||"radio"===r.type?null!=r.checked:null!=r.value,t||!r||gv||(console.error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"),gv=!0),!t||r||mv||(console.error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"),mv=!0),void Ve(e,i,l,s,u,c,a,o);case"select":for(a in p=i=l=f=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":p=s;default:r.hasOwnProperty(a)||Us(e,t,a,null,r,s)}for(o in r)if(a=r[o],s=n[o],r.hasOwnProperty(o)&&(null!=a||null!=s))switch(o){case"value":f=a;break;case"defaultValue":l=a;break;case"multiple":i=a;default:a!==s&&Us(e,t,o,a,r,s)}return r=l,t=i,n=p,void(null!=f?Ke(e,!!t,f,!1):!!n!=!!t&&(null!=r?Ke(e,!!t,r,!0):Ke(e,!!t,t?[]:"",!1)));case"textarea":for(l in p=f=null,n)if(o=n[l],n.hasOwnProperty(l)&&null!=o&&!r.hasOwnProperty(l))switch(l){case"value":case"children":break;default:Us(e,t,l,null,r,o)}for(i in r)if(o=r[i],a=n[i],r.hasOwnProperty(i)&&(null!=o||null!=a))switch(i){case"value":f=o;break;case"defaultValue":p=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");break;default:o!==a&&Us(e,t,i,o,r,a)}return void Je(e,f,p);case"option":for(var h in n)f=n[h],n.hasOwnProperty(h)&&null!=f&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Us(e,t,h,null,r,f));for(s in r)f=r[s],p=n[s],!r.hasOwnProperty(s)||f===p||null==f&&null==p||("selected"===s?e.selected=f&&"function"!=typeof f&&"symbol"!=typeof f:Us(e,t,s,f,r,p));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var m in n)f=n[m],n.hasOwnProperty(m)&&null!=f&&!r.hasOwnProperty(m)&&Us(e,t,m,null,r,f);for(u in r)if(f=r[u],p=n[u],r.hasOwnProperty(u)&&f!==p&&(null!=f||null!=p))switch(u){case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:Us(e,t,u,f,r,p)}return;default:if(_t(t)){for(var g in n)f=n[g],n.hasOwnProperty(g)&&void 0!==f&&!r.hasOwnProperty(g)&&Hs(e,t,g,void 0,r,f);for(c in r)f=r[c],p=n[c],!r.hasOwnProperty(c)||f===p||void 0===f&&void 0===p||Hs(e,t,c,f,r,p);return}}for(var y in n)f=n[y],n.hasOwnProperty(y)&&null!=f&&!r.hasOwnProperty(y)&&Us(e,t,y,null,r,f);for(d in r)f=r[d],p=n[d],!r.hasOwnProperty(d)||f===p||null==f&&null==p||Us(e,t,d,f,r,p)}(e,t,n,r),e[Ad]=r}function au(e){wt(e,"")}function iu(e,t,n){e.nodeValue=n}function lu(e){return"head"===e}function su(e,t){e.removeChild(t)}function uu(e,t){(9===e.nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e).removeChild(t)}function cu(e,t){var n=t,r=0,o=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if((n=a.data)===Ov){if(0<r&&8>r){n=r;var i=e.ownerDocument;if(n&Iv&&Eu(i.documentElement),n&Nv&&Eu(i.body),n&zv)for(Eu(n=i.head),i=n.firstChild;i;){var l=i.nextSibling,s=i.nodeName;i[Wd]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===i.rel.toLowerCase()||n.removeChild(i),i=l}}if(0===o)return e.removeChild(a),void gc(t);o--}else n===Pv||n===Lv||n===Dv?o++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);gc(t)}function du(e){"function"==typeof(e=e.style).setProperty?e.setProperty("display","none","important"):e.display="none"}function fu(e){e.nodeValue=""}function pu(e,t){t=null!=(t=t[jv])&&t.hasOwnProperty("display")?t.display:null,e.style.display=null==t||"boolean"==typeof t?"":(""+t).trim()}function hu(e,t){e.nodeValue=t}function mu(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":mu(n),fe(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gu(e){return e.data===Dv||e.data===Lv&&e.ownerDocument.readyState===Mv}function yu(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if((t=e.data)===Pv||t===Dv||t===Lv||t===Av||t===Fv)break;if(t===Ov)return null}}return e}function bu(e){if(1===e.nodeType){for(var t=e.nodeName.toLowerCase(),n={},r=e.attributes,o=0;o<r.length;o++){var a=r[o];n[Bs(a.name)]="style"===a.name.toLowerCase()?Vs(e):a.value}return{type:t,props:n}}return 8===e.nodeType?{type:"Suspense",props:{}}:e.nodeValue}function vu(e,t,n){return null===n||!0!==n[Rv]?(e.nodeValue===t?e=null:(t=Fs(t),e=Fs(e.nodeValue)===t?null:e.nodeValue),e):null}function ku(e){e=e.nextSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Ov){if(0===t)return yu(e.nextSibling);t--}else n!==Pv&&n!==Dv&&n!==Lv||t++}e=e.nextSibling}return null}function wu(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Pv||n===Dv||n===Lv){if(0===t)return e;t--}else n===Ov&&t++}e=e.previousSibling}return null}function Su(e){gc(e)}function xu(e){gc(e)}function _u(e,t,n,r,o){switch(o&&vt(e,r.ancestorInfo),t=Js(n),e){case"html":if(!(e=t.documentElement))throw Error("React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.");return e;case"head":if(!(e=t.head))throw Error("React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page.");return e;case"body":if(!(e=t.body))throw Error("React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page.");return e;default:throw Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.")}}function Tu(e,t,n,r){if(!n[Fd]&&he(n)){var o=n.tagName.toLowerCase();console.error("You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",o,o,o)}switch(e){case"html":case"head":case"body":break;default:console.error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.")}for(o=n.attributes;o.length;)n.removeAttributeNode(o[0]);Ws(n,e,t),n[zd]=r,n[Ad]=t}function Eu(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);fe(e)}function Cu(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}function Ru(e,t,n){var r=gk;if(r&&"string"==typeof t&&t){var o=We(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),ak.has(o)||(ak.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(Ws(t=r.createElement("link"),"link",e),ye(t),r.head.appendChild(t)))}}function Pu(e,t,n,r){var o=(o=od.current)?Cu(o):null;if(!o)throw Error('"resourceRoot" was expected to exist. This is a bug in React.');switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(n=Lu(n.href),(r=(t=ge(o).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Lu(n.href);var a=ge(o).hoistableStyles,i=a.get(e);if(!i&&(o=o.ownerDocument||o,i={type:"stylesheet",instance:null,count:0,state:{loading:Zv,preload:null}},a.set(e,i),(a=o.querySelector(Du(e)))&&!a._p&&(i.instance=a,i.state.loading=ek|rk),!ok.has(e))){var l={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy};ok.set(e,l),a||function(e,t,n,r){e.querySelector('link[rel="preload"][as="style"]['+t+"]")?r.loading=ek:(t=e.createElement("link"),r.preload=t,t.addEventListener("load",(function(){return r.loading|=ek})),t.addEventListener("error",(function(){return r.loading|=tk})),Ws(t,"link",n),ye(t),e.head.appendChild(t))}(o,e,l,i.state)}if(t&&null===r)throw n="\n\n  - "+Ou(t)+"\n  + "+Ou(n),Error("Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key."+n);return i}if(t&&null!==r)throw n="\n\n  - "+Ou(t)+"\n  + "+Ou(n),Error("Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key."+n);return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(n=Nu(n),(r=(t=ge(o).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error('getResource encountered a type it did not expect: "'+e+'". this is a bug in React.')}}function Ou(e){var t=0,n="<link";return"string"==typeof e.rel?(t++,n+=' rel="'+e.rel+'"'):id.call(e,"rel")&&(t++,n+=' rel="'+(null===e.rel?"null":"invalid type "+typeof e.rel)+'"'),"string"==typeof e.href?(t++,n+=' href="'+e.href+'"'):id.call(e,"href")&&(t++,n+=' href="'+(null===e.href?"null":"invalid type "+typeof e.href)+'"'),"string"==typeof e.precedence?(t++,n+=' precedence="'+e.precedence+'"'):id.call(e,"precedence")&&(t++,n+=" precedence={"+(null===e.precedence?"null":"invalid type "+typeof e.precedence)+"}"),Object.getOwnPropertyNames(e).length>t&&(n+=" ..."),n+" />"}function Lu(e){return'href="'+We(e)+'"'}function Du(e){return'link[rel="stylesheet"]['+e+"]"}function Iu(e){return xc({},e,{"data-precedence":e.precedence,precedence:null})}function Nu(e){return'[src="'+We(e)+'"]'}function zu(e){return"script[async]"+e}function Au(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+We(n.href)+'"]');if(r)return t.instance=r,ye(r),r;var o=xc({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return ye(r=(e.ownerDocument||e).createElement("style")),Ws(r,"style",o),Fu(r,n.precedence,e),t.instance=r;case"stylesheet":o=Lu(n.href);var a=e.querySelector(Du(o));if(a)return t.state.loading|=rk,t.instance=a,ye(a),a;r=Iu(n),(o=ok.get(o))&&Mu(r,o),ye(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Ws(a,"link",r),t.state.loading|=rk,Fu(a,n.precedence,e),t.instance=a;case"script":return a=Nu(n.src),(o=e.querySelector(zu(a)))?(t.instance=o,ye(o),o):(r=n,(o=ok.get(a))&&ju(r=xc({},n),o),ye(o=(e=e.ownerDocument||e).createElement("script")),Ws(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error('acquireResource encountered a resource type it did not expect: "'+t.type+'". this is a bug in React.')}else"stylesheet"===t.type&&(t.state.loading&rk)===Zv&&(r=t.instance,t.state.loading|=rk,Fu(r,n.precedence,e));return t.instance}function Fu(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)a=l;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Mu(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function ju(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}function Uu(e,t,n){if(null===yk){var r=new Map,o=yk=new Map;o.set(n,r)}else(r=(o=yk).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var a=n[o];if(!(a[Wd]||a[zd]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&a.namespaceURI!==If){var i=a.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(a):r.set(i,[a])}}return r}function Hu(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Wu(e){return"stylesheet"!==e.type||(e.state.loading&nk)!==Zv}function Bu(){}function Vu(){if(this.count--,0===this.count)if(this.stylesheets)qu(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}function qu(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,kk=new Map,t.forEach($u,e),kk=null,Vu.call(e))}function $u(e,t){if(!(t.state.loading&rk)){var n=kk.get(e);if(n)var r=n.get(vk);else{n=new Map,kk.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var i=o[a];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(vk,r)}i=(o=t.instance).getAttribute("data-precedence"),(a=n.get(i)||r)===r&&n.set(vk,o),n.set(i,o),this.count++,r=Vu.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=rk}}function Qu(e,t,n,r,o,a,i,l){for(this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=Kv,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=re(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=re(0),this.hiddenUpdates=re(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map,this.passiveEffectDuration=this.effectDuration=-0,this.memoizedUpdaters=new Set,e=this.pendingUpdatersLaneMap=[],t=0;31>t;t++)e.push(new Set);this._debugRootType=n?"hydrateRoot()":"createRoot()"}function Yu(e,t,n,r,o,a,i,l,s,u,c,d){return e=new Qu(e,t,n,i,l,s,u,d),t=mh,!0===a&&(t|=yh|bh),_d&&(t|=gh),a=h(3,null,null,t),e.current=a,a.stateNode=e,or(t=rr()),e.pooledCache=t,or(t),a.memoizedState={element:r,isDehydrated:n,cache:t},_r(a),e}function Ku(e){return e?e=dh:dh}function Gu(e,t,n,r,o,a){if(wd&&"function"==typeof wd.onScheduleFiberRoot)try{wd.onScheduleFiberRoot(kd,r,n)}catch(e){xd||(xd=!0,console.error("React instrumentation encountered an error: %s",e))}null!==Sd&&"function"==typeof Sd.markRenderScheduled&&Sd.markRenderScheduled(t),o=Ku(o),null===r.context?r.context=o:r.pendingContext=o,nf&&null!==tf&&!Rk&&(Rk=!0,console.error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",E(tf)||"Unknown")),(r=Er(t)).payload={element:n},null!==(a=void 0===a?null:a)&&("function"!=typeof a&&console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.",a),r.callback=a),null!==(n=Cr(e,r,t))&&(xl(n,e,t),Rr(n,e,t))}function Xu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ju(e,t){Xu(e,t),(e=e.alternate)&&Xu(e,t)}function Zu(e){if(13===e.tag){var t=hn(e,67108864);null!==t&&xl(t,e,67108864),Ju(e,67108864)}}function ec(){return tf}function tc(){for(var e=new Map,t=1,n=0;31>n;n++){var r=G(t);e.set(t,r),t*=2}return e}function nc(e,t,n,r){var o=Gc.T;Gc.T=null;var a=Xc.p;try{Xc.p=Od,oc(e,t,n,r)}finally{Xc.p=a,Gc.T=o}}function rc(e,t,n,r){var o=Gc.T;Gc.T=null;var a=Xc.p;try{Xc.p=Ld,oc(e,t,n,r)}finally{Xc.p=a,Gc.T=o}}function oc(e,t,n,r){if(Ok){var o=ac(r);if(null===o)Rs(e,t,r,Lk,n),sc(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ik=uc(Ik,e,t,n,r,o),!0;case"dragenter":return Nk=uc(Nk,e,t,n,r,o),!0;case"mouseover":return zk=uc(zk,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Ak.set(a,uc(Ak.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Fk.set(a,uc(Fk.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(sc(e,r),4&t&&-1<jk.indexOf(e)){for(;null!==o;){var a=he(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var i=X(a.pendingLanes);if(0!==i){var l=a;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-Td(i);l.entanglements[1]|=s,i&=~s}cs(a),(Ky&(Uy|Hy))===jy&&(Eb=dd()+Cb,ds(0,!1))}}break;case 13:null!==(l=hn(a,2))&&xl(l,a,2),Rl(),Ju(a,2)}if(null===(a=ac(r))&&Rs(e,t,r,Lk,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Rs(e,t,r,null,n)}}function ac(e){return ic(e=Pt(e))}function ic(e){if(Lk=null,null!==(e=pe(e))){var t=v(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=k(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Lk=e,null}function lc(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return Od;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return Ld;case"message":switch(fd()){case pd:return Od;case hd:return Ld;case md:case gd:return Dd;case yd:return Id;default:return Dd}default:return Dd}}function sc(e,t){switch(e){case"focusin":case"focusout":Ik=null;break;case"dragenter":case"dragleave":Nk=null;break;case"mouseover":case"mouseout":zk=null;break;case"pointerover":case"pointerout":Ak.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Fk.delete(t.pointerId)}}function uc(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&(null!==(t=he(t))&&Zu(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function cc(e){var t=pe(e.target);if(null!==t){var n=v(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=k(n)))return e.blockedOn=t,void function(e,t){var n=Xc.p;try{return Xc.p=e,t()}finally{Xc.p=n}}(e.priority,(function(){if(13===n.tag){var e=wl(n);e=le(e);var t=hn(n,e);null!==t&&xl(t,n,e),Ju(n,e)}}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function dc(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=ac(e.nativeEvent);if(null!==n)return null!==(t=he(n))&&Zu(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n),o=r;null!==Qf&&console.error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."),Qf=o,n.target.dispatchEvent(r),null===Qf&&console.error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."),Qf=null,t.shift()}return!0}function fc(e,t,n){dc(e)&&n.delete(t)}function pc(){Dk=!1,null!==Ik&&dc(Ik)&&(Ik=null),null!==Nk&&dc(Nk)&&(Nk=null),null!==zk&&dc(zk)&&(zk=null),Ak.forEach(fc),Fk.forEach(fc)}function hc(e,t){e.blockedOn===t&&(e.blockedOn=null,Dk||(Dk=!0,kc.unstable_scheduleCallback(kc.unstable_NormalPriority,pc)))}function mc(e){Uk!==e&&(Uk=e,kc.unstable_scheduleCallback(kc.unstable_NormalPriority,(function(){Uk===e&&(Uk=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===ic(r||n))continue;break}var a=he(n);null!==a&&(e.splice(t,3),t-=3,n={pending:!0,data:o,method:n.method,action:r},Object.freeze(n),Jo(a,n,r,o))}})))}function gc(e){function t(t){return hc(t,e)}null!==Ik&&hc(Ik,e),null!==Nk&&hc(Nk,e),null!==zk&&hc(zk,e),Ak.forEach(t),Fk.forEach(t);for(var n=0;n<Mk.length;n++){var r=Mk[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<Mk.length&&null===(n=Mk[0]).blockedOn;)cc(n),null===n.blockedOn&&Mk.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],a=n[r+1],i=o[Ad]||null;if("function"==typeof a)i||mc(n);else if(i){var l=null;if(a&&a.hasAttribute("formAction")){if(o=a,i=a[Ad]||null)l=i.formAction;else if(null!==ic(o))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),mc(n)}}}function yc(e){this._internalRoot=e}function bc(e){this._internalRoot=e}function vc(e){e[Fd]&&(e._reactRootContainer?console.error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."):console.error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."))}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var kc=n("./node_modules/scheduler/index.js"),wc=n("./node_modules/react/index.js"),Sc=n("./node_modules/react-dom/index.js"),xc=Object.assign,_c=Symbol.for("react.element"),Tc=Symbol.for("react.transitional.element"),Ec=Symbol.for("react.portal"),Cc=Symbol.for("react.fragment"),Rc=Symbol.for("react.strict_mode"),Pc=Symbol.for("react.profiler"),Oc=Symbol.for("react.provider"),Lc=Symbol.for("react.consumer"),Dc=Symbol.for("react.context"),Ic=Symbol.for("react.forward_ref"),Nc=Symbol.for("react.suspense"),zc=Symbol.for("react.suspense_list"),Ac=Symbol.for("react.memo"),Fc=Symbol.for("react.lazy");Symbol.for("react.scope");var Mc=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var jc=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var Uc,Hc,Wc,Bc,Vc,qc,$c,Qc=Symbol.iterator,Yc=Symbol.for("react.client.reference"),Kc=Array.isArray,Gc=wc.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Xc=Sc.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Jc=Object.freeze({pending:!1,data:null,method:null,action:null}),Zc=[],ed=[],td=-1,nd=C(null),rd=C(null),od=C(null),ad=C(null),id=Object.prototype.hasOwnProperty,ld=kc.unstable_scheduleCallback,sd=kc.unstable_cancelCallback,ud=kc.unstable_shouldYield,cd=kc.unstable_requestPaint,dd=kc.unstable_now,fd=kc.unstable_getCurrentPriorityLevel,pd=kc.unstable_ImmediatePriority,hd=kc.unstable_UserBlockingPriority,md=kc.unstable_NormalPriority,gd=kc.unstable_LowPriority,yd=kc.unstable_IdlePriority,bd=kc.log,vd=kc.unstable_setDisableYieldValue,kd=null,wd=null,Sd=null,xd=!1,_d="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,Td=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(Ed(e)/Cd|0)|0},Ed=Math.log,Cd=Math.LN2,Rd=256,Pd=4194304,Od=2,Ld=8,Dd=32,Id=268435456,Nd=Math.random().toString(36).slice(2),zd="__reactFiber$"+Nd,Ad="__reactProps$"+Nd,Fd="__reactContainer$"+Nd,Md="__reactEvents$"+Nd,jd="__reactListeners$"+Nd,Ud="__reactHandles$"+Nd,Hd="__reactResources$"+Nd,Wd="__reactMarker$"+Nd,Bd=new Set,Vd={},qd={},$d={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},Qd=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Yd={},Kd={},Gd=0;Ee.__reactDisabledLog=!0;var Xd,Jd,Zd=!1,ef=new("function"==typeof WeakMap?WeakMap:Map),tf=null,nf=!1,rf=/[\n"\\]/g,of=!1,af=!1,lf=!1,sf=!1,uf=!1,cf=!1,df=["value","defaultValue"],ff=!1,pf=/["'&<>\n\t]|^\s|\s$/,hf="address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(" "),mf="applet caption html table td th marquee object template foreignObject desc title".split(" "),gf=mf.concat(["button"]),yf="dd dt li option optgroup p rp rt".split(" "),bf={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null,containerTagInScope:null,implicitRootScope:!1},vf={},kf={animation:"animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(" "),background:"backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(" "),backgroundPosition:["backgroundPositionX","backgroundPositionY"],border:"borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(" "),borderBlockEnd:["borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth"],borderBlockStart:["borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth"],borderBottom:["borderBottomColor","borderBottomStyle","borderBottomWidth"],borderColor:["borderBottomColor","borderLeftColor","borderRightColor","borderTopColor"],borderImage:["borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth"],borderInlineEnd:["borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth"],borderInlineStart:["borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth"],borderLeft:["borderLeftColor","borderLeftStyle","borderLeftWidth"],borderRadius:["borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius"],borderRight:["borderRightColor","borderRightStyle","borderRightWidth"],borderStyle:["borderBottomStyle","borderLeftStyle","borderRightStyle","borderTopStyle"],borderTop:["borderTopColor","borderTopStyle","borderTopWidth"],borderWidth:["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth"],columnRule:["columnRuleColor","columnRuleStyle","columnRuleWidth"],columns:["columnCount","columnWidth"],flex:["flexBasis","flexGrow","flexShrink"],flexFlow:["flexDirection","flexWrap"],font:"fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(" "),fontVariant:"fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(" "),gap:["columnGap","rowGap"],grid:"gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(" "),gridArea:["gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart"],gridColumn:["gridColumnEnd","gridColumnStart"],gridColumnGap:["columnGap"],gridGap:["columnGap","rowGap"],gridRow:["gridRowEnd","gridRowStart"],gridRowGap:["rowGap"],gridTemplate:["gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],listStyle:["listStyleImage","listStylePosition","listStyleType"],margin:["marginBottom","marginLeft","marginRight","marginTop"],marker:["markerEnd","markerMid","markerStart"],mask:"maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(" "),maskPosition:["maskPositionX","maskPositionY"],outline:["outlineColor","outlineStyle","outlineWidth"],overflow:["overflowX","overflowY"],padding:["paddingBottom","paddingLeft","paddingRight","paddingTop"],placeContent:["alignContent","justifyContent"],placeItems:["alignItems","justifyItems"],placeSelf:["alignSelf","justifySelf"],textDecoration:["textDecorationColor","textDecorationLine","textDecorationStyle"],textEmphasis:["textEmphasisColor","textEmphasisStyle"],transition:["transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction"],wordWrap:["overflowWrap"]},wf=/([A-Z])/g,Sf=/^ms-/,xf=/^(?:webkit|moz|o)[A-Z]/,_f=/^-ms-/,Tf=/-(.)/g,Ef=/;\s*$/,Cf={},Rf={},Pf=!1,Of=!1,Lf=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")),Df="http://www.w3.org/1998/Math/MathML",If="http://www.w3.org/2000/svg",Nf=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),zf={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",disablepictureinpicture:"disablePictureInPicture",disableremoteplayback:"disableRemotePlayback",download:"download",draggable:"draggable",enctype:"encType",enterkeyhint:"enterKeyHint",fetchpriority:"fetchPriority",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",imagesizes:"imageSizes",imagesrcset:"imageSrcSet",inert:"inert",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",popover:"popover",popovertarget:"popoverTarget",popovertargetaction:"popoverTargetAction",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",transformorigin:"transformOrigin","transform-origin":"transformOrigin",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},Af={"aria-current":0,"aria-description":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},Ff={},Mf=RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),jf=RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Uf=!1,Hf={},Wf=/^on./,Bf=/^on[^A-Z]/,Vf=RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),qf=RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),$f=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i,Qf=null,Yf=null,Kf=null,Gf=!1,Xf=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Jf=!1;if(Xf)try{var Zf={};Object.defineProperty(Zf,"passive",{get:function(){Jf=!0}}),window.addEventListener("test",Zf,Zf),window.removeEventListener("test",Zf,Zf)}catch(e){Jf=!1}var ep,tp,np,rp=null,op=null,ap=null,ip={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},lp=Ft(ip),sp=xc({},ip,{view:0,detail:0}),up=Ft(sp),cp=xc({},sp,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==np&&(np&&"mousemove"===e.type?(ep=e.screenX-np.screenX,tp=e.screenY-np.screenY):tp=ep=0,np=e),ep)},movementY:function(e){return"movementY"in e?e.movementY:tp}}),dp=Ft(cp),fp=Ft(xc({},cp,{dataTransfer:0})),pp=Ft(xc({},sp,{relatedTarget:0})),hp=Ft(xc({},ip,{animationName:0,elapsedTime:0,pseudoElement:0})),mp=Ft(xc({},ip,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),gp=Ft(xc({},ip,{data:0})),yp=gp,bp={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vp={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},wp=Ft(xc({},sp,{key:function(e){if(e.key){var t=bp[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Nt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?vp[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jt,charCode:function(e){return"keypress"===e.type?Nt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Nt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Sp=Ft(xc({},cp,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),xp=Ft(xc({},sp,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jt})),_p=Ft(xc({},ip,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tp=Ft(xc({},cp,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Ep=Ft(xc({},ip,{newState:0,oldState:0})),Cp=[9,13,27,32],Rp=229,Pp=Xf&&"CompositionEvent"in window,Op=null;Xf&&"documentMode"in document&&(Op=document.documentMode);var Lp=Xf&&"TextEvent"in window&&!Op,Dp=Xf&&(!Pp||Op&&8<Op&&11>=Op),Ip=32,Np=String.fromCharCode(Ip),zp=!1,Ap=!1,Fp={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},Mp=null,jp=null,Up=!1;Xf&&(Up=function(e){if(!Xf)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}("input")&&(!document.documentMode||9<document.documentMode));var Hp="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Wp=Xf&&"documentMode"in document&&11>=document.documentMode,Bp=null,Vp=null,qp=null,$p=!1,Qp={animationend:ln("Animation","AnimationEnd"),animationiteration:ln("Animation","AnimationIteration"),animationstart:ln("Animation","AnimationStart"),transitionrun:ln("Transition","TransitionRun"),transitionstart:ln("Transition","TransitionStart"),transitioncancel:ln("Transition","TransitionCancel"),transitionend:ln("Transition","TransitionEnd")},Yp={},Kp={};Xf&&(Kp=document.createElement("div").style,"AnimationEvent"in window||(delete Qp.animationend.animation,delete Qp.animationiteration.animation,delete Qp.animationstart.animation),"TransitionEvent"in window||delete Qp.transitionend.transition);var Gp=sn("animationend"),Xp=sn("animationiteration"),Jp=sn("animationstart"),Zp=sn("transitionrun"),eh=sn("transitionstart"),th=sn("transitioncancel"),nh=sn("transitionend"),rh=new Map,oh="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");oh.push("scrollEnd");var ah=new WeakMap,ih=1,lh=2,sh=[],uh=0,ch=0,dh={};Object.freeze(dh);var fh=null,ph=null,hh=0,mh=1,gh=2,yh=8,bh=16,vh=64,kh=!1;try{var wh=Object.preventExtensions({});new Map([[wh,null]]),new Set([wh])}catch(e){kh=!0}var Sh=[],xh=0,_h=null,Th=0,Eh=[],Ch=0,Rh=null,Ph=1,Oh="",Lh=null,Dh=null,Ih=!1,Nh=!1,zh=null,Ah=null,Fh=!1,Mh=Error("Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),jh=0;if("object"==typeof performance&&"function"==typeof performance.now)var Uh=performance,Hh=function(){return Uh.now()};else{var Wh=Date;Hh=function(){return Wh.now()}}var Bh=C(null),Vh=C(null),qh={},$h=null,Qh=null,Yh=!1,Kh="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Gh=kc.unstable_scheduleCallback,Xh=kc.unstable_NormalPriority,Jh={$$typeof:Dc,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0,_currentRenderer:null,_currentRenderer2:null},Zh=kc.unstable_now,em=-0,tm=-0,nm=-1.1,rm=-0,om=!1,am=!1,im=null,lm=0,sm=0,um=null,cm=Gc.S;Gc.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===im){var n=im=[];lm=0,sm=vs(),um={status:"pending",value:void 0,then:function(e){n.push(e)}}}lm++,t.then(mr,mr)}(0,t),null!==cm&&cm(e,t)};var dm=C(null),fm={recordUnsafeLifecycleWarnings:function(){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},pm=[],hm=[],mm=[],gm=[],ym=[],bm=[],vm=new Set;fm.recordUnsafeLifecycleWarnings=function(e,t){vm.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&pm.push(e),e.mode&yh&&"function"==typeof t.UNSAFE_componentWillMount&&hm.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&mm.push(e),e.mode&yh&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&gm.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&ym.push(e),e.mode&yh&&"function"==typeof t.UNSAFE_componentWillUpdate&&bm.push(e))},fm.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;0<pm.length&&(pm.forEach((function(t){e.add(E(t)||"Component"),vm.add(t.type)})),pm=[]);var t=new Set;0<hm.length&&(hm.forEach((function(e){t.add(E(e)||"Component"),vm.add(e.type)})),hm=[]);var n=new Set;0<mm.length&&(mm.forEach((function(e){n.add(E(e)||"Component"),vm.add(e.type)})),mm=[]);var r=new Set;0<gm.length&&(gm.forEach((function(e){r.add(E(e)||"Component"),vm.add(e.type)})),gm=[]);var o=new Set;0<ym.length&&(ym.forEach((function(e){o.add(E(e)||"Component"),vm.add(e.type)})),ym=[]);var a=new Set;if(0<bm.length&&(bm.forEach((function(e){a.add(E(e)||"Component"),vm.add(e.type)})),bm=[]),0<t.size){var i=p(t);console.error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",i)}0<r.size&&(i=p(r),console.error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",i)),0<a.size&&(i=p(a),console.error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",i)),0<e.size&&(i=p(e),console.warn("componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",i)),0<n.size&&(i=p(n),console.warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",i)),0<o.size&&(i=p(o),console.warn("componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",i))};var km=new Map,wm=new Set;fm.recordLegacyContextWarning=function(e,t){for(var n=null,r=e;null!==r;)r.mode&yh&&(n=r),r=r.return;null===n?console.error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."):!wm.has(e.type)&&(r=km.get(n),null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===r&&(r=[],km.set(n,r)),r.push(e))},fm.flushLegacyContextWarning=function(){km.forEach((function(e){if(0!==e.length){var t=e[0],n=new Set;e.forEach((function(e){n.add(E(e)||"Component"),wm.add(e.type)}));var r=p(n);ze(t,(function(){console.error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",r)}))}}))},fm.discardPendingWarnings=function(){pm=[],hm=[],mm=[],gm=[],ym=[],bm=[],km=new Map};var Sm,xm=Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."),_m=Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),Tm=Error("Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."),Em={then:function(){console.error('Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.')}},Cm=null,Rm=!1,Pm=0,Om=1,Lm=2,Dm=4,Im=8,Nm=0,zm=1,Am=2,Fm=3,Mm=!1,jm=!1,Um=null,Hm=!1,Wm=C(null),Bm=C(0),Vm=new Set,qm=new Set,$m=new Set,Qm=new Set,Ym=0,Km=null,Gm=null,Xm=null,Jm=!1,Zm=!1,eg=!1,tg=0,ng=0,rg=null,og=0,ag=25,ig=null,lg=null,sg=-1,ug=!1,cg={readContext:er,use:eo,useCallback:Wr,useContext:Wr,useEffect:Wr,useImperativeHandle:Wr,useLayoutEffect:Wr,useInsertionEffect:Wr,useMemo:Wr,useReducer:Wr,useRef:Wr,useState:Wr,useDebugValue:Wr,useDeferredValue:Wr,useTransition:Wr,useSyncExternalStore:Wr,useId:Wr,useHostTransitionStatus:Wr,useFormState:Wr,useActionState:Wr,useOptimistic:Wr,useMemoCache:Wr,useCacheRefresh:Wr},dg=null,fg=null,pg=null,hg=null,mg=null,gg=null,yg=null;dg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return ig="useCallback",Mr(),Ur(t),Wo(e,t)},useContext:function(e){return ig="useContext",Mr(),er(e)},useEffect:function(e,t){return ig="useEffect",Mr(),Ur(t),Fo(e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",Mr(),Ur(n),Uo(e,t,n)},useInsertionEffect:function(e,t){ig="useInsertionEffect",Mr(),Ur(t),zo(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",Mr(),Ur(t),Mo(e,t)},useMemo:function(e,t){ig="useMemo",Mr(),Ur(t);var n=Gc.H;Gc.H=mg;try{return Vo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",Mr();var r=Gc.H;Gc.H=mg;try{return ro(e,t,n)}finally{Gc.H=r}},useRef:function(e){return ig="useRef",Mr(),No(e)},useState:function(e){ig="useState",Mr();var t=Gc.H;Gc.H=mg;try{return go(e)}finally{Gc.H=t}},useDebugValue:function(){ig="useDebugValue",Mr()},useDeferredValue:function(e,t){return ig="useDeferredValue",Mr(),$o(e,t)},useTransition:function(){return ig="useTransition",Mr(),ta()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",Mr(),lo(e,t,n)},useId:function(){return ig="useId",Mr(),aa()},useFormState:function(e,t){return ig="useFormState",Mr(),Hr(),Ro(e,t)},useActionState:function(e,t){return ig="useActionState",Mr(),Ro(e,t)},useOptimistic:function(e){return ig="useOptimistic",Mr(),yo(e)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return ig="useCacheRefresh",Mr(),ia()}},fg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return ig="useCallback",jr(),Wo(e,t)},useContext:function(e){return ig="useContext",jr(),er(e)},useEffect:function(e,t){return ig="useEffect",jr(),Fo(e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",jr(),Uo(e,t,n)},useInsertionEffect:function(e,t){ig="useInsertionEffect",jr(),zo(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",jr(),Mo(e,t)},useMemo:function(e,t){ig="useMemo",jr();var n=Gc.H;Gc.H=mg;try{return Vo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",jr();var r=Gc.H;Gc.H=mg;try{return ro(e,t,n)}finally{Gc.H=r}},useRef:function(e){return ig="useRef",jr(),No(e)},useState:function(e){ig="useState",jr();var t=Gc.H;Gc.H=mg;try{return go(e)}finally{Gc.H=t}},useDebugValue:function(){ig="useDebugValue",jr()},useDeferredValue:function(e,t){return ig="useDeferredValue",jr(),$o(e,t)},useTransition:function(){return ig="useTransition",jr(),ta()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",jr(),lo(e,t,n)},useId:function(){return ig="useId",jr(),aa()},useActionState:function(e,t){return ig="useActionState",jr(),Ro(e,t)},useFormState:function(e,t){return ig="useFormState",jr(),Hr(),Ro(e,t)},useOptimistic:function(e){return ig="useOptimistic",jr(),yo(e)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return ig="useCacheRefresh",jr(),ia()}},pg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return ig="useCallback",jr(),Bo(e,t)},useContext:function(e){return ig="useContext",jr(),er(e)},useEffect:function(e,t){ig="useEffect",jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return ig="useInsertionEffect",jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){ig="useMemo",jr();var n=Gc.H;Gc.H=gg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",jr();var r=Gc.H;Gc.H=gg;try{return oo(e)}finally{Gc.H=r}},useRef:function(){return ig="useRef",jr(),Jr().memoizedState},useState:function(){ig="useState",jr();var e=Gc.H;Gc.H=gg;try{return oo(no)}finally{Gc.H=e}},useDebugValue:function(){ig="useDebugValue",jr()},useDeferredValue:function(e,t){return ig="useDeferredValue",jr(),Qo(e,t)},useTransition:function(){return ig="useTransition",jr(),na()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",jr(),so(e,t,n)},useId:function(){return ig="useId",jr(),Jr().memoizedState},useFormState:function(e){return ig="useFormState",jr(),Hr(),Po(e)},useActionState:function(e){return ig="useActionState",jr(),Po(e)},useOptimistic:function(e,t){return ig="useOptimistic",jr(),bo(e,t)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return ig="useCacheRefresh",jr(),Jr().memoizedState}},hg={readContext:function(e){return er(e)},use:eo,useCallback:function(e,t){return ig="useCallback",jr(),Bo(e,t)},useContext:function(e){return ig="useContext",jr(),er(e)},useEffect:function(e,t){ig="useEffect",jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return ig="useInsertionEffect",jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){ig="useMemo",jr();var n=Gc.H;Gc.H=yg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",jr();var r=Gc.H;Gc.H=yg;try{return io(e)}finally{Gc.H=r}},useRef:function(){return ig="useRef",jr(),Jr().memoizedState},useState:function(){ig="useState",jr();var e=Gc.H;Gc.H=yg;try{return io(no)}finally{Gc.H=e}},useDebugValue:function(){ig="useDebugValue",jr()},useDeferredValue:function(e,t){return ig="useDeferredValue",jr(),Yo(e,t)},useTransition:function(){return ig="useTransition",jr(),ra()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",jr(),so(e,t,n)},useId:function(){return ig="useId",jr(),Jr().memoizedState},useFormState:function(e){return ig="useFormState",jr(),Hr(),Do(e)},useActionState:function(e){return ig="useActionState",jr(),Do(e)},useOptimistic:function(e,t){return ig="useOptimistic",jr(),ko(e,t)},useHostTransitionStatus:oa,useMemoCache:to,useCacheRefresh:function(){return ig="useCacheRefresh",jr(),Jr().memoizedState}},mg={readContext:function(e){return d(),er(e)},use:function(e){return c(),eo(e)},useCallback:function(e,t){return ig="useCallback",c(),Mr(),Wo(e,t)},useContext:function(e){return ig="useContext",c(),Mr(),er(e)},useEffect:function(e,t){return ig="useEffect",c(),Mr(),Fo(e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",c(),Mr(),Uo(e,t,n)},useInsertionEffect:function(e,t){ig="useInsertionEffect",c(),Mr(),zo(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",c(),Mr(),Mo(e,t)},useMemo:function(e,t){ig="useMemo",c(),Mr();var n=Gc.H;Gc.H=mg;try{return Vo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",c(),Mr();var r=Gc.H;Gc.H=mg;try{return ro(e,t,n)}finally{Gc.H=r}},useRef:function(e){return ig="useRef",c(),Mr(),No(e)},useState:function(e){ig="useState",c(),Mr();var t=Gc.H;Gc.H=mg;try{return go(e)}finally{Gc.H=t}},useDebugValue:function(){ig="useDebugValue",c(),Mr()},useDeferredValue:function(e,t){return ig="useDeferredValue",c(),Mr(),$o(e,t)},useTransition:function(){return ig="useTransition",c(),Mr(),ta()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",c(),Mr(),lo(e,t,n)},useId:function(){return ig="useId",c(),Mr(),aa()},useFormState:function(e,t){return ig="useFormState",c(),Mr(),Ro(e,t)},useActionState:function(e,t){return ig="useActionState",c(),Mr(),Ro(e,t)},useOptimistic:function(e){return ig="useOptimistic",c(),Mr(),yo(e)},useMemoCache:function(e){return c(),to(e)},useHostTransitionStatus:oa,useCacheRefresh:function(){return ig="useCacheRefresh",Mr(),ia()}},gg={readContext:function(e){return d(),er(e)},use:function(e){return c(),eo(e)},useCallback:function(e,t){return ig="useCallback",c(),jr(),Bo(e,t)},useContext:function(e){return ig="useContext",c(),jr(),er(e)},useEffect:function(e,t){ig="useEffect",c(),jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",c(),jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return ig="useInsertionEffect",c(),jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",c(),jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){ig="useMemo",c(),jr();var n=Gc.H;Gc.H=gg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",c(),jr();var r=Gc.H;Gc.H=gg;try{return oo(e)}finally{Gc.H=r}},useRef:function(){return ig="useRef",c(),jr(),Jr().memoizedState},useState:function(){ig="useState",c(),jr();var e=Gc.H;Gc.H=gg;try{return oo(no)}finally{Gc.H=e}},useDebugValue:function(){ig="useDebugValue",c(),jr()},useDeferredValue:function(e,t){return ig="useDeferredValue",c(),jr(),Qo(e,t)},useTransition:function(){return ig="useTransition",c(),jr(),na()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",c(),jr(),so(e,t,n)},useId:function(){return ig="useId",c(),jr(),Jr().memoizedState},useFormState:function(e){return ig="useFormState",c(),jr(),Po(e)},useActionState:function(e){return ig="useActionState",c(),jr(),Po(e)},useOptimistic:function(e,t){return ig="useOptimistic",c(),jr(),bo(e,t)},useMemoCache:function(e){return c(),to(e)},useHostTransitionStatus:oa,useCacheRefresh:function(){return ig="useCacheRefresh",jr(),Jr().memoizedState}},yg={readContext:function(e){return d(),er(e)},use:function(e){return c(),eo(e)},useCallback:function(e,t){return ig="useCallback",c(),jr(),Bo(e,t)},useContext:function(e){return ig="useContext",c(),jr(),er(e)},useEffect:function(e,t){ig="useEffect",c(),jr(),Ao(2048,Im,e,t)},useImperativeHandle:function(e,t,n){return ig="useImperativeHandle",c(),jr(),Ho(e,t,n)},useInsertionEffect:function(e,t){return ig="useInsertionEffect",c(),jr(),Ao(4,Lm,e,t)},useLayoutEffect:function(e,t){return ig="useLayoutEffect",c(),jr(),Ao(4,Dm,e,t)},useMemo:function(e,t){ig="useMemo",c(),jr();var n=Gc.H;Gc.H=gg;try{return qo(e,t)}finally{Gc.H=n}},useReducer:function(e,t,n){ig="useReducer",c(),jr();var r=Gc.H;Gc.H=gg;try{return io(e)}finally{Gc.H=r}},useRef:function(){return ig="useRef",c(),jr(),Jr().memoizedState},useState:function(){ig="useState",c(),jr();var e=Gc.H;Gc.H=gg;try{return io(no)}finally{Gc.H=e}},useDebugValue:function(){ig="useDebugValue",c(),jr()},useDeferredValue:function(e,t){return ig="useDeferredValue",c(),jr(),Yo(e,t)},useTransition:function(){return ig="useTransition",c(),jr(),ra()},useSyncExternalStore:function(e,t,n){return ig="useSyncExternalStore",c(),jr(),so(e,t,n)},useId:function(){return ig="useId",c(),jr(),Jr().memoizedState},useFormState:function(e){return ig="useFormState",c(),jr(),Do(e)},useActionState:function(e){return ig="useActionState",c(),jr(),Do(e)},useOptimistic:function(e,t){return ig="useOptimistic",c(),jr(),ko(e,t)},useMemoCache:function(e){return c(),to(e)},useHostTransitionStatus:oa,useCacheRefresh:function(){return ig="useCacheRefresh",jr(),Jr().memoizedState}};var bg,vg={"react-stack-bottom-frame":function(e,t,n){var r=nf;nf=!0;try{return e(t,n)}finally{nf=r}}},kg=vg["react-stack-bottom-frame"].bind(vg),wg={"react-stack-bottom-frame":function(e){var t=nf;nf=!0;try{return e.render()}finally{nf=t}}},Sg=wg["react-stack-bottom-frame"].bind(wg),xg={"react-stack-bottom-frame":function(e,t){try{t.componentDidMount()}catch(t){Zl(e,e.return,t)}}},_g=xg["react-stack-bottom-frame"].bind(xg),Tg={"react-stack-bottom-frame":function(e,t,n,r,o){try{t.componentDidUpdate(n,r,o)}catch(t){Zl(e,e.return,t)}}},Eg=Tg["react-stack-bottom-frame"].bind(Tg),Cg={"react-stack-bottom-frame":function(e,t){var n=t.stack;e.componentDidCatch(t.value,{componentStack:null!==n?n:""})}},Rg=Cg["react-stack-bottom-frame"].bind(Cg),Pg={"react-stack-bottom-frame":function(e,t,n){try{n.componentWillUnmount()}catch(n){Zl(e,t,n)}}},Og=Pg["react-stack-bottom-frame"].bind(Pg),Lg={"react-stack-bottom-frame":function(e){null!=e.resourceKind&&console.error("Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",e.resourceKind);var t=e.create;return e=e.inst,t=t(),e.destroy=t}},Dg=Lg["react-stack-bottom-frame"].bind(Lg),Ig={"react-stack-bottom-frame":function(e,t,n){try{n()}catch(n){Zl(e,t,n)}}},Ng=Ig["react-stack-bottom-frame"].bind(Ig),zg={"react-stack-bottom-frame":function(e){return(0,e._init)(e._payload)}},Ag=zg["react-stack-bottom-frame"].bind(zg),Fg=null,Mg=0,jg=null,Ug=bg=!1,Hg={},Wg={},Bg={};u=function(e,t,n){if(null!==n&&"object"==typeof n&&n._store&&(!n._store.validated&&null==n.key||2===n._store.validated)){if("object"!=typeof n._store)throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");n._store.validated=1;var r=E(e),o=r||"null";if(!Hg[o]){Hg[o]=!0,n=n._owner,e=e._debugOwner;var a="";e&&"number"==typeof e.tag&&(o=E(e))&&(a="\n\nCheck the render method of `"+o+"`."),a||r&&(a="\n\nCheck the top-level render call using <"+r+">.");var i="";null!=n&&e!==n&&(r=null,"number"==typeof n.tag?r=E(n):"string"==typeof n.name&&(r=n.name),r&&(i=" It was passed a child from "+r+".")),ze(t,(function(){console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',a,i)}))}}};var Vg=Sa(!0),qg=Sa(!1),$g=C(null),Qg=null,Yg=1,Kg=2,Gg=C(0),Xg={},Jg=new Set,Zg=new Set,ey=new Set,ty=new Set,ny=new Set,ry=new Set,oy=new Set,ay=new Set,iy=new Set,ly=new Set;Object.freeze(Xg);var sy={enqueueSetState:function(e,t,n){var r=wl(e=e._reactInternals),o=Er(r);o.payload=t,null!=n&&(Ra(n),o.callback=n),null!==(t=Cr(e,o,r))&&(xl(t,e,r),Rr(t,e,r)),K(e,r)},enqueueReplaceState:function(e,t,n){var r=wl(e=e._reactInternals),o=Er(r);o.tag=zm,o.payload=t,null!=n&&(Ra(n),o.callback=n),null!==(t=Cr(e,o,r))&&(xl(t,e,r),Rr(t,e,r)),K(e,r)},enqueueForceUpdate:function(e,t){var n=wl(e=e._reactInternals),r=Er(n);r.tag=Am,null!=t&&(Ra(t),r.callback=t),null!==(t=Cr(e,r,n))&&(xl(t,e,n),Rr(t,e,n)),null!==Sd&&"function"==typeof Sd.markForceUpdateScheduled&&Sd.markForceUpdateScheduled(e,n)}},uy="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)},cy=null,dy=null,fy=Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."),py=!1,hy={},my={},gy={},yy={},by=!1,vy={},ky={},wy={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null},Sy=!1,xy=null;xy=new Set;var _y=!1,Ty=!1,Ey=!1,Cy="function"==typeof WeakSet?WeakSet:Set,Ry=null,Py=null,Oy=null,Ly=null,Dy=!1,Iy=null,Ny=8192,zy={getCacheForType:function(e){var t=er(Jh),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n},getOwner:function(){return tf}};if("function"==typeof Symbol&&Symbol.for){var Ay=Symbol.for;Ay("selector.component"),Ay("selector.has_pseudo_class"),Ay("selector.role"),Ay("selector.test_id"),Ay("selector.text")}var Fy=[],My="function"==typeof WeakMap?WeakMap:Map,jy=0,Uy=2,Hy=4,Wy=0,By=1,Vy=2,qy=3,$y=4,Qy=6,Yy=5,Ky=jy,Gy=null,Xy=null,Jy=0,Zy=0,eb=1,tb=2,nb=3,rb=4,ob=5,ab=6,ib=7,lb=8,sb=9,ub=Zy,cb=null,db=!1,fb=!1,pb=!1,hb=0,mb=Wy,gb=0,yb=0,bb=0,vb=0,kb=0,wb=null,Sb=null,xb=!1,_b=0,Tb=300,Eb=1/0,Cb=500,Rb=null,Pb=null,Ob=0,Lb=1,Db=2,Ib=0,Nb=1,zb=2,Ab=3,Fb=4,Mb=5,jb=0,Ub=null,Hb=null,Wb=0,Bb=0,Vb=null,qb=null,$b=50,Qb=0,Yb=null,Kb=!1,Gb=!1,Xb=50,Jb=0,Zb=null,ev=!1,tv=null,nv=!1,rv=new Set,ov=null,av=null,iv=!1,lv=!1,sv=!1,uv=!1,cv=0,dv={};!function(){for(var e=0;e<oh.length;e++){var t=oh[e];un(t.toLowerCase(),"on"+(t=t[0].toUpperCase()+t.slice(1)))}un(Gp,"onAnimationEnd"),un(Xp,"onAnimationIteration"),un(Jp,"onAnimationStart"),un("dblclick","onDoubleClick"),un("focusin","onFocus"),un("focusout","onBlur"),un(Zp,"onTransitionRun"),un(eh,"onTransitionStart"),un(th,"onTransitionCancel"),un(nh,"onTransitionEnd")}(),ve("onMouseEnter",["mouseout","mouseover"]),ve("onMouseLeave",["mouseout","mouseover"]),ve("onPointerEnter",["pointerout","pointerover"]),ve("onPointerLeave",["pointerout","pointerover"]),be("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),be("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),be("onBeforeInput",["compositionend","keypress","textInput","paste"]),be("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),be("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),be("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var fv="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),pv=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(fv)),hv="_reactListening"+Math.random().toString(36).slice(2),mv=!1,gv=!1,yv=!1,bv=!1,vv=!1,kv=!1,wv=!1,Sv={},xv=/\r\n?/g,_v=/\u0000|\uFFFD/g,Tv="http://www.w3.org/1999/xlink",Ev="http://www.w3.org/XML/1998/namespace",Cv="javascript:throw new Error('React form unexpectedly submitted.')",Rv="suppressHydrationWarning",Pv="$",Ov="/$",Lv="$?",Dv="$!",Iv=1,Nv=2,zv=4,Av="F!",Fv="F",Mv="complete",jv="style",Uv=0,Hv=1,Wv=2,Bv=null,Vv=null,qv={dialog:!0,webview:!0},$v=null,Qv="function"==typeof setTimeout?setTimeout:void 0,Yv="function"==typeof clearTimeout?clearTimeout:void 0,Kv=-1,Gv="function"==typeof Promise?Promise:void 0,Xv="function"==typeof queueMicrotask?queueMicrotask:void 0!==Gv?function(e){return Gv.resolve(null).then(e).catch(nu)}:Qv,Jv=null,Zv=0,ek=1,tk=2,nk=3,rk=4,ok=new Map,ak=new Set,ik=Xc.d;Xc.d={f:function(){var e=ik.f(),t=Rl();return e||t},r:function(e){var t=he(e);null!==t&&5===t.tag&&"form"===t.type?ea(t):ik.r(e)},D:function(e){ik.D(e),Ru("dns-prefetch",e,null)},C:function(e,t){ik.C(e,t),Ru("preconnect",e,t)},L:function(e,t,n){ik.L(e,t,n);var r=gk;if(r&&e&&t){var o='link[rel="preload"][as="'+We(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+We(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+We(n.imageSizes)+'"]')):o+='[href="'+We(e)+'"]';var a=o;switch(t){case"style":a=Lu(e);break;case"script":a=Nu(e)}ok.has(a)||(e=xc({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),ok.set(a,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(Du(a))||"script"===t&&r.querySelector(zu(a))||(Ws(t=r.createElement("link"),"link",e),ye(t),r.head.appendChild(t)))}},m:function(e,t){ik.m(e,t);var n=gk;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+We(r)+'"][href="'+We(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Nu(e)}if(!ok.has(a)&&(e=xc({rel:"modulepreload",href:e},t),ok.set(a,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(zu(a)))return}Ws(r=n.createElement("link"),"link",e),ye(r),n.head.appendChild(r)}}},X:function(e,t){ik.X(e,t);var n=gk;if(n&&e){var r=ge(n).hoistableScripts,o=Nu(e),a=r.get(o);a||((a=n.querySelector(zu(o)))||(e=xc({src:e,async:!0},t),(t=ok.get(o))&&ju(e,t),ye(a=n.createElement("script")),Ws(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,t,n){ik.S(e,t,n);var r=gk;if(r&&e){var o=ge(r).hoistableStyles,a=Lu(e);t=t||"default";var i=o.get(a);if(!i){var l={loading:Zv,preload:null};if(i=r.querySelector(Du(a)))l.loading=ek|rk;else{e=xc({rel:"stylesheet",href:e,"data-precedence":t},n),(n=ok.get(a))&&Mu(e,n);var s=i=r.createElement("link");ye(s),Ws(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=ek})),s.addEventListener("error",(function(){l.loading|=tk})),l.loading|=rk,Fu(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},o.set(a,i)}}},M:function(e,t){ik.M(e,t);var n=gk;if(n&&e){var r=ge(n).hoistableScripts,o=Nu(e),a=r.get(o);a||((a=n.querySelector(zu(o)))||(e=xc({src:e,async:!0,type:"module"},t),(t=ok.get(o))&&ju(e,t),ye(a=n.createElement("script")),Ws(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var lk,sk,uk,ck,dk,fk,pk,hk,mk,gk="undefined"==typeof document?null:document,yk=null,bk=null,vk=null,kk=null,wk=Jc,Sk={$$typeof:Dc,Provider:null,Consumer:null,_currentValue:wk,_currentValue2:wk,_threadCount:0},xk="%c%s%c ",_k="background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px",Tk="",Ek=" ",Ck=Function.prototype.bind,Rk=!1;lk=function(t,n,o,a){null!==(n=e(t,n))&&(o=r(n.memoizedState,o,0,a),n.memoizedState=o,n.baseState=o,t.memoizedProps=xc({},t.memoizedProps),null!==(o=hn(t,2))&&xl(o,t,2))},sk=function(t,n,r){null!==(n=e(t,n))&&(r=i(n.memoizedState,r,0),n.memoizedState=r,n.baseState=r,t.memoizedProps=xc({},t.memoizedProps),null!==(r=hn(t,2))&&xl(r,t,2))},uk=function(t,n,r,a){null!==(n=e(t,n))&&(r=o(n.memoizedState,r,a),n.memoizedState=r,n.baseState=r,t.memoizedProps=xc({},t.memoizedProps),null!==(r=hn(t,2))&&xl(r,t,2))},ck=function(e,t,n){e.pendingProps=r(e.memoizedProps,t,0,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=hn(e,2))&&xl(t,e,2)},dk=function(e,t){e.pendingProps=i(e.memoizedProps,t,0),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=hn(e,2))&&xl(t,e,2)},fk=function(e,t,n){e.pendingProps=o(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=hn(e,2))&&xl(t,e,2)},pk=function(e){var t=hn(e,2);null!==t&&xl(t,e,2)},hk=function(e){s=e},mk=function(e){l=e};var Pk,Ok=!0,Lk=null,Dk=!1,Ik=null,Nk=null,zk=null,Ak=new Map,Fk=new Map,Mk=[],jk="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" "),Uk=null;if(bc.prototype.render=yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error("Cannot update an unmounted root.");var n=arguments;"function"==typeof n[1]?console.error("does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."):b(n[1])?console.error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."):void 0!==n[1]&&console.error("You passed a second argument to root.render(...) but it only accepts one argument."),n=e;var r=t.current;Gu(r,wl(r),n,t,null,null)},bc.prototype.unmount=yc.prototype.unmount=function(){var e=arguments;if("function"==typeof e[0]&&console.error("does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."),null!==(e=this._internalRoot)){this._internalRoot=null;var t=e.containerInfo;(Ky&(Uy|Hy))!==jy&&console.error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."),Gu(e.current,2,null,e,null,null),Rl(),t[Fd]=null}},bc.prototype.unstable_scheduleHydration=function(e){if(e){var t=de();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Mk.length&&0!==t&&t<Mk[n].priority;n++);Mk.splice(n,0,e),0===n&&cc(e)}},function(){var e=wc.version;if("19.1.0"!==e)throw Error('Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      '+e+"\n  - react-dom:  19.1.0\nLearn more: https://react.dev/warnings/version-mismatch")}(),"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"),Xc.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error("Unable to find node on an unmounted component.");throw e=Object.keys(e).join(","),Error("Argument appears to not be a ReactComponent. Keys: "+e)}return e=function(e){var t=e.alternate;if(!t){if(null===(t=v(e)))throw Error("Unable to find node on an unmounted component.");return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return w(o),e;if(a===r)return w(o),t;a=a.sibling}throw Error("Unable to find node on an unmounted component.")}if(n.return!==r.return)n=o,r=a;else{for(var i=!1,l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}if(!i)throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(n.alternate!==r)throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(3!==n.tag)throw Error("Unable to find node on an unmounted component.");return n.stateNode.current===n?e:t}(t),e=null===(e=null!==e?S(e):null)?null:e.stateNode},(Pk={bundleType:1,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:Gc,reconcilerVersion:"19.1.0"}).overrideHookState=lk,Pk.overrideHookStateDeletePath=sk,Pk.overrideHookStateRenamePath=uk,Pk.overrideProps=ck,Pk.overridePropsDeletePath=dk,Pk.overridePropsRenamePath=fk,Pk.scheduleUpdate=pk,Pk.setErrorHandler=hk,Pk.setSuspenseHandler=mk,Pk.scheduleRefresh=g,Pk.scheduleRoot=m,Pk.setRefreshHandler=y,Pk.getCurrentFiber=ec,Pk.getLaneLabelMap=tc,Pk.injectProfilingHooks=B,!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return console.error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"),!0;try{kd=t.inject(e),wd=t}catch(e){console.error("React instrumentation encountered an error: %s.",e)}return!!t.checkDCE}(Pk)&&Xf&&window.top===window.self&&(-1<navigator.userAgent.indexOf("Chrome")&&-1===navigator.userAgent.indexOf("Edge")||-1<navigator.userAgent.indexOf("Firefox"))){var Hk=window.location.protocol;/^(https?|file):$/.test(Hk)&&console.info("%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools"+("file:"===Hk?"\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq":""),"font-weight:bold")}t.createRoot=function(e,t){if(!b(e))throw Error("Target container is not a DOM element.");vc(e);var n=!1,r="",o=Ia,a=Na,i=za;return null!=t&&(t.hydrate?console.warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."):"object"==typeof t&&null!==t&&t.$$typeof===Tc&&console.error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"),!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(i=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Yu(e,1,!1,null,0,n,r,o,a,i,0,null),e[Fd]=t.current,Es(e),new yc(t)},t.hydrateRoot=function(e,t,n){if(!b(e))throw Error("Target container is not a DOM element.");vc(e),void 0===t&&console.error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");var r=!1,o="",a=Ia,i=Na,l=za,s=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(i=n.onCaughtError),void 0!==n.onRecoverableError&&(l=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(s=n.formState)),(t=Yu(e,1,!0,t,0,r,o,a,i,l,0,s)).context=Ku(null),(o=Er(r=le(r=wl(n=t.current)))).callback=null,Cr(n,o,r),n=r,t.current.lanes=n,oe(t,n),cs(t),e[Fd]=t.current,Es(e),new bc(t)},t.version="19.1.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react-dom/cjs/react-dom.development.js":(e,t,n)=>{!function(){function e(){}function r(e){return""+e}function o(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}function a(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":'something with type "'+typeof e+'"'}function i(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":"string"==typeof e?JSON.stringify(e):"number"==typeof e?"`"+e+"`":'something with type "'+typeof e+'"'}function l(){var e=d.H;return null===e&&console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."),e}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var s=n("./node_modules/react/index.js"),u={d:{f:e,r:function(){throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.")},D:e,C:e,L:e,m:e,X:e,S:e,M:e},p:0,findDOMNode:null},c=Symbol.for("react.portal"),d=s.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=u,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error("Target container is not a DOM element.");return function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;try{r(o);var a=!1}catch(e){a=!0}return a&&(console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.","function"==typeof Symbol&&Symbol.toStringTag&&o[Symbol.toStringTag]||o.constructor.name||"Object"),r(o)),{$$typeof:c,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=d.T,n=u.p;try{if(d.T=null,u.p=2,e)return e()}finally{d.T=t,u.p=n,u.d.f()&&console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.")}},t.preconnect=function(e,t){"string"==typeof e&&e?null!=t&&"object"!=typeof t?console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",i(t)):null!=t&&"string"!=typeof t.crossOrigin&&console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",a(t.crossOrigin)):console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&(t?t="string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:t=null,u.d.C(e,t))},t.prefetchDNS=function(e){if("string"==typeof e&&e){if(1<arguments.length){var t=arguments[1];"object"==typeof t&&t.hasOwnProperty("crossOrigin")?console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",i(t)):console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",i(t))}}else console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e));"string"==typeof e&&u.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&e?null==t||"object"!=typeof t?console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",i(t)):"style"!==t.as&&"script"!==t.as&&console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',i(t.as)):console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=o(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,s="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?u.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:s}):"script"===n&&u.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:s,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){var n="";if("string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"script"!==t.as&&(n+=" The `as` option encountered was "+i(t.as)+"."),n)console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",n);else if("script"===(n=t&&"string"==typeof t.as?t.as:"script"));else n=i(n),console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',n,e);"string"==typeof e&&("object"==typeof t&&null!==t?null!=t.as&&"script"!==t.as||(n=o(t.as,t.crossOrigin),u.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})):null==t&&u.d.M(e))},t.preload=function(e,t){var n="";if("string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),null==t||"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":"string"==typeof t.as&&t.as||(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',n),"string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var r=o(n=t.as,t.crossOrigin);u.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){var n="";"string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"string"!=typeof t.as&&(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',n),"string"==typeof e&&(t?(n=o(t.as,t.crossOrigin),u.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})):u.d.m(e))},t.requestFormReset=function(e){u.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return l().useFormState(e,t,n)},t.useFormStatus=function(){return l().useHostTransitionStatus()},t.version="19.1.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react-dom/client.js":(e,t,n)=>{e.exports=n("./node_modules/react-dom/cjs/react-dom-client.development.js")},"./node_modules/react-dom/index.js":(e,t,n)=>{e.exports=n("./node_modules/react-dom/cjs/react-dom.development.js")},"./node_modules/react/cjs/react-jsx-runtime.development.js":(e,t,n)=>{!function(){function e(t){if(null==t)return null;if("function"==typeof t)return t.$$typeof===T?null:t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case p:return"Fragment";case m:return"Profiler";case h:return"StrictMode";case k:return"Suspense";case w:return"SuspenseList";case _:return"Activity"}if("object"==typeof t)switch("number"==typeof t.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),t.$$typeof){case f:return"Portal";case b:return(t.displayName||"Context")+".Provider";case y:return(t._context.displayName||"Context")+".Consumer";case v:var n=t.render;return(t=t.displayName)||(t=""!==(t=n.displayName||n.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case S:return null!==(n=t.displayName||null)?n:e(t.type)||"Memo";case x:n=t._payload,t=t._init;try{return e(t(n))}catch(e){}}return null}function r(e){return""+e}function o(e){try{r(e);var t=!1}catch(e){t=!0}if(t){var n=(t=console).error,o="function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n.call(t,"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",o),r(e)}}function a(t){if(t===p)return"<>";if("object"==typeof t&&null!==t&&t.$$typeof===x)return"<...>";try{var n=e(t);return n?"<"+n+">":"<...>"}catch(e){return"<...>"}}function i(){return Error("react-stack-top-frame")}function l(){var t=e(this.type);return O[t]||(O[t]=!0,console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.")),void 0!==(t=this.props.ref)?t:null}function s(t,n,r,a,i,s,c,f){var p,h=n.children;if(void 0!==h)if(a)if(R(h)){for(a=0;a<h.length;a++)u(h[a]);Object.freeze&&Object.freeze(h)}else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else u(h);if(C.call(n,"key")){h=e(t);var m=Object.keys(n).filter((function(e){return"key"!==e}));a=0<m.length?"{key: someKey, "+m.join(": ..., ")+": ...}":"{key: someKey}",I[h+a]||(m=0<m.length?"{"+m.join(": ..., ")+": ...}":"{}",console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',a,h,m,h),I[h+a]=!0)}if(h=null,void 0!==r&&(o(r),h=""+r),function(e){if(C.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}(n)&&(o(n.key),h=""+n.key),"key"in n)for(var y in r={},n)"key"!==y&&(r[y]=n[y]);else r=n;return h&&function(e,t){function n(){g||(g=!0,console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",t))}n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(r,"function"==typeof t?t.displayName||t.name||"Unknown":t),function(e,t,n,r,o,a,i,s){return n=a.ref,e={$$typeof:d,type:e,key:t,props:a,_owner:o},null!==(void 0!==n?n:null)?Object.defineProperty(e,"ref",{enumerable:!1,get:l}):Object.defineProperty(e,"ref",{enumerable:!1,value:null}),e._store={},Object.defineProperty(e._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:0}),Object.defineProperty(e,"_debugInfo",{configurable:!1,enumerable:!1,writable:!0,value:null}),Object.defineProperty(e,"_debugStack",{configurable:!1,enumerable:!1,writable:!0,value:i}),Object.defineProperty(e,"_debugTask",{configurable:!1,enumerable:!1,writable:!0,value:s}),Object.freeze&&(Object.freeze(e.props),Object.freeze(e)),e}(t,h,s,0,null===(p=E.A)?null:p.getOwner(),r,c,f)}function u(e){"object"==typeof e&&null!==e&&e.$$typeof===d&&e._store&&(e._store.validated=1)}var c=n("./node_modules/react/index.js"),d=Symbol.for("react.transitional.element"),f=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),h=Symbol.for("react.strict_mode"),m=Symbol.for("react.profiler");Symbol.for("react.provider");var g,y=Symbol.for("react.consumer"),b=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),w=Symbol.for("react.suspense_list"),S=Symbol.for("react.memo"),x=Symbol.for("react.lazy"),_=Symbol.for("react.activity"),T=Symbol.for("react.client.reference"),E=c.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,C=Object.prototype.hasOwnProperty,R=Array.isArray,P=console.createTask?console.createTask:function(){return null},O={},L=(c={"react-stack-bottom-frame":function(e){return e()}})["react-stack-bottom-frame"].bind(c,i)(),D=P(a(i)),I={};t.Fragment=p,t.jsx=function(e,t,n,r,o){var i=1e4>E.recentlyCreatedOwnerStacks++;return s(e,t,n,!1,0,o,i?Error("react-stack-top-frame"):L,i?P(a(e)):D)},t.jsxs=function(e,t,n,r,o){var i=1e4>E.recentlyCreatedOwnerStacks++;return s(e,t,n,!0,0,o,i?Error("react-stack-top-frame"):L,i?P(a(e)):D)}}()},"./node_modules/react/cjs/react.development.js":(e,t,n)=>{e=n.nmd(e),function(){function n(e,t){Object.defineProperty(o.prototype,e,{get:function(){console.warn("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})}function r(e,t){var n=(e=(e=e.constructor)&&(e.displayName||e.name)||"ReactClass")+"."+t;B[n]||(console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,e),B[n]=!0)}function o(e,t,n){this.props=e,this.context=t,this.refs=$,this.updater=n||V}function a(){}function i(e,t,n){this.props=e,this.context=t,this.refs=$,this.updater=n||V}function l(e){return""+e}function s(e){try{l(e);var t=!1}catch(e){t=!0}if(t){var n=(t=console).error,r="function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n.call(t,"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",r),l(e)}}function u(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===J?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case L:return"Fragment";case I:return"Profiler";case D:return"StrictMode";case F:return"Suspense";case M:return"SuspenseList";case H:return"Activity"}if("object"==typeof e)switch("number"==typeof e.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),e.$$typeof){case O:return"Portal";case z:return(e.displayName||"Context")+".Provider";case N:return(e._context.displayName||"Context")+".Consumer";case A:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case j:return null!==(t=e.displayName||null)?t:u(e.type)||"Memo";case U:t=e._payload,e=e._init;try{return u(e(t))}catch(e){}}return null}function c(e){if(e===L)return"<>";if("object"==typeof e&&null!==e&&e.$$typeof===U)return"<...>";try{var t=u(e);return t?"<"+t+">":"<...>"}catch(e){return"<...>"}}function d(){var e=Z.A;return null===e?null:e.getOwner()}function f(){return Error("react-stack-top-frame")}function p(e){if(ee.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function h(){var e=u(this.type);return ne[e]||(ne[e]=!0,console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.")),void 0!==(e=this.props.ref)?e:null}function m(e,t,n,r,o,a,i,l){return n=a.ref,e={$$typeof:P,type:e,key:t,props:a,_owner:o},null!==(void 0!==n?n:null)?Object.defineProperty(e,"ref",{enumerable:!1,get:h}):Object.defineProperty(e,"ref",{enumerable:!1,value:null}),e._store={},Object.defineProperty(e._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:0}),Object.defineProperty(e,"_debugInfo",{configurable:!1,enumerable:!1,writable:!0,value:null}),Object.defineProperty(e,"_debugStack",{configurable:!1,enumerable:!1,writable:!0,value:i}),Object.defineProperty(e,"_debugTask",{configurable:!1,enumerable:!1,writable:!0,value:l}),Object.freeze&&(Object.freeze(e.props),Object.freeze(e)),e}function g(e){return"object"==typeof e&&null!==e&&e.$$typeof===P}function y(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(s(e.key),n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function b(){}function v(e,t,n,r,o){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var i,l,u,c=!1;if(null===e)c=!0;else switch(a){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case P:case O:c=!0;break;case U:return v((c=e._init)(e._payload),t,n,r,o)}}if(c){o=o(c=e);var d=""===r?"."+y(c,0):r;return X(o)?(n="",null!=d&&(n=d.replace(ie,"$&/")+"/"),v(o,t,n,"",(function(e){return e}))):null!=o&&(g(o)&&(null!=o.key&&(c&&c.key===o.key||s(o.key)),i=o,l=n+(null==o.key||c&&c.key===o.key?"":(""+o.key).replace(ie,"$&/")+"/")+d,l=m(i.type,l,void 0,0,i._owner,i.props,i._debugStack,i._debugTask),i._store&&(l._store.validated=i._store.validated),n=l,""!==r&&null!=c&&g(c)&&null==c.key&&c._store&&!c._store.validated&&(n._store.validated=2),o=n),t.push(o)),1}if(c=0,d=""===r?".":r+":",X(e))for(var f=0;f<e.length;f++)c+=v(r=e[f],t,n,a=d+y(r,f),o);else if("function"==typeof(f=null===(u=e)||"object"!=typeof u?null:"function"==typeof(u=W&&u[W]||u["@@iterator"])?u:null))for(f===e.entries&&(ae||console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),ae=!0),e=f.call(e),f=0;!(r=e.next()).done;)c+=v(r=r.value,t,n,a=d+y(r,f++),o);else if("object"===a){if("function"==typeof e.then)return v(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(b,b):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,n,r,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function k(e,t,n){if(null==e)return e;var r=[],o=0;return v(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function w(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return void 0===(t=e._result)&&console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",t),"default"in t||console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",t),t.default;throw e._result}function S(){var e=Z.H;return null===e&&console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."),e}function x(){}function _(t){if(null===ue)try{var n=("require"+Math.random()).slice(0,7);ue=(e&&e[n]).call(e,"timers").setImmediate}catch(e){ue=function(e){!1===se&&(se=!0,"undefined"==typeof MessageChannel&&console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}return ue(t)}function T(e){return 1<e.length&&"function"==typeof AggregateError?new AggregateError(e):e[0]}function E(e,t){t!==ce-1&&console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),ce=t}function C(e,t,n){var r=Z.actQueue;if(null!==r)if(0!==r.length)try{return R(r),void _((function(){return C(e,t,n)}))}catch(e){Z.thrownErrors.push(e)}else Z.actQueue=null;0<Z.thrownErrors.length?(r=T(Z.thrownErrors),Z.thrownErrors.length=0,n(r)):t(e)}function R(e){if(!fe){fe=!0;var t=0;try{for(;t<e.length;t++)for(var n=e[t];;){Z.didUsePromise=!1;var r=n(!1);if(null===r)break;if(Z.didUsePromise)return e[t]=n,void e.splice(0,t);n=r}e.length=0}catch(n){e.splice(0,t+1),Z.thrownErrors.push(n)}finally{fe=!1}}}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var P=Symbol.for("react.transitional.element"),O=Symbol.for("react.portal"),L=Symbol.for("react.fragment"),D=Symbol.for("react.strict_mode"),I=Symbol.for("react.profiler");Symbol.for("react.provider");var N=Symbol.for("react.consumer"),z=Symbol.for("react.context"),A=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),M=Symbol.for("react.suspense_list"),j=Symbol.for("react.memo"),U=Symbol.for("react.lazy"),H=Symbol.for("react.activity"),W=Symbol.iterator,B={},V={isMounted:function(){return!1},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e){r(e,"replaceState")},enqueueSetState:function(e){r(e,"setState")}},q=Object.assign,$={};Object.freeze($),o.prototype.isReactComponent={},o.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},o.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var Q,Y={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]};for(Q in Y)Y.hasOwnProperty(Q)&&n(Q,Y[Q]);a.prototype=o.prototype,(Y=i.prototype=new a).constructor=i,q(Y,o.prototype),Y.isPureReactComponent=!0;var K,G,X=Array.isArray,J=Symbol.for("react.client.reference"),Z={H:null,A:null,T:null,S:null,V:null,actQueue:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1,didUsePromise:!1,thrownErrors:[],getCurrentStack:null,recentlyCreatedOwnerStacks:0},ee=Object.prototype.hasOwnProperty,te=console.createTask?console.createTask:function(){return null},ne={},re=(Y={"react-stack-bottom-frame":function(e){return e()}})["react-stack-bottom-frame"].bind(Y,f)(),oe=te(c(f)),ae=!1,ie=/\/+/g,le="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)},se=!1,ue=null,ce=0,de=!1,fe=!1,pe="function"==typeof queueMicrotask?function(e){queueMicrotask((function(){return queueMicrotask(e)}))}:_;Y=Object.freeze({__proto__:null,c:function(e){return S().useMemoCache(e)}}),t.Children={map:k,forEach:function(e,t,n){k(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return k(e,(function(){t++})),t},toArray:function(e){return k(e,(function(e){return e}))||[]},only:function(e){if(!g(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=o,t.Fragment=L,t.Profiler=I,t.PureComponent=i,t.StrictMode=D,t.Suspense=F,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=Z,t.__COMPILER_RUNTIME=Y,t.act=function(e){var t=Z.actQueue,n=ce;ce++;var r=Z.actQueue=null!==t?t:[],o=!1;try{var a=e()}catch(e){Z.thrownErrors.push(e)}if(0<Z.thrownErrors.length)throw E(0,n),e=T(Z.thrownErrors),Z.thrownErrors.length=0,e;if(null!==a&&"object"==typeof a&&"function"==typeof a.then){var i=a;return pe((function(){o||de||(de=!0,console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))})),{then:function(e,t){o=!0,i.then((function(o){if(E(0,n),0===n){try{R(r),_((function(){return C(o,e,t)}))}catch(e){Z.thrownErrors.push(e)}if(0<Z.thrownErrors.length){var a=T(Z.thrownErrors);Z.thrownErrors.length=0,t(a)}}else e(o)}),(function(e){E(0,n),0<Z.thrownErrors.length?(e=T(Z.thrownErrors),Z.thrownErrors.length=0,t(e)):t(e)}))}}}var l=a;if(E(0,n),0===n&&(R(r),0!==r.length&&pe((function(){o||de||(de=!0,console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"))})),Z.actQueue=null),0<Z.thrownErrors.length)throw e=T(Z.thrownErrors),Z.thrownErrors.length=0,e;return{then:function(e,t){o=!0,0===n?(Z.actQueue=r,_((function(){return C(l,e,t)}))):e(l)}}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.captureOwnerStack=function(){var e=Z.getCurrentStack;return null===e?null:e()},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r,o=q({},e.props),a=e.key,i=e._owner;if(null!=t)for(l in(r=!(ee.call(t,"ref")&&(r=Object.getOwnPropertyDescriptor(t,"ref").get)&&r.isReactWarning)&&void 0!==t.ref)&&(i=d()),p(t)&&(s(t.key),a=""+t.key),t)!ee.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(o[l]=t[l]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){r=Array(l);for(var u=0;u<l;u++)r[u]=arguments[u+2];o.children=r}for(o=m(e.type,a,void 0,0,i,o,e._debugStack,e._debugTask),a=2;a<arguments.length;a++)g(i=arguments[a])&&i._store&&(i._store.validated=1);return o},t.createContext=function(e){return(e={$$typeof:z,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:N,_context:e},e._currentRenderer=null,e._currentRenderer2=null,e},t.createElement=function(e,t,n){for(var r=2;r<arguments.length;r++){var o=arguments[r];g(o)&&o._store&&(o._store.validated=1)}if(r={},o=null,null!=t)for(u in G||!("__self"in t)||"key"in t||(G=!0,console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")),p(t)&&(s(t.key),o=""+t.key),t)ee.call(t,u)&&"key"!==u&&"__self"!==u&&"__source"!==u&&(r[u]=t[u]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var i=Array(a),l=0;l<a;l++)i[l]=arguments[l+2];Object.freeze&&Object.freeze(i),r.children=i}if(e&&e.defaultProps)for(u in a=e.defaultProps)void 0===r[u]&&(r[u]=a[u]);o&&function(e,t){function n(){K||(K=!0,console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",t))}n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(r,"function"==typeof e?e.displayName||e.name||"Unknown":e);var u=1e4>Z.recentlyCreatedOwnerStacks++;return m(e,o,void 0,0,d(),r,u?Error("react-stack-top-frame"):re,u?te(c(e)):oe)},t.createRef=function(){var e={current:null};return Object.seal(e),e},t.forwardRef=function(e){null!=e&&e.$$typeof===j?console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?console.error("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&console.error("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&null!=e.defaultProps&&console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");var t,n={$$typeof:A,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(n){t=n,e.name||e.displayName||(Object.defineProperty(e,"name",{value:n}),e.displayName=n)}}),n},t.isValidElement=g,t.lazy=function(e){return{$$typeof:U,_payload:{_status:-1,_result:e},_init:w}},t.memo=function(e,t){var n;return null==e&&console.error("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e),t={$$typeof:j,type:e,compare:void 0===t?null:t},Object.defineProperty(t,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,e.name||e.displayName||(Object.defineProperty(e,"name",{value:t}),e.displayName=t)}}),t},t.startTransition=function(e){var t=Z.T,n={};Z.T=n,n._updatedFibers=new Set;try{var r=e(),o=Z.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(x,le)}catch(e){le(e)}finally{null===t&&n._updatedFibers&&(e=n._updatedFibers.size,n._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")),Z.T=t}},t.unstable_useCacheRefresh=function(){return S().useCacheRefresh()},t.use=function(e){return S().use(e)},t.useActionState=function(e,t,n){return S().useActionState(e,t,n)},t.useCallback=function(e,t){return S().useCallback(e,t)},t.useContext=function(e){var t=S();return e.$$typeof===N&&console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"),t.useContext(e)},t.useDebugValue=function(e,t){return S().useDebugValue(e,t)},t.useDeferredValue=function(e,t){return S().useDeferredValue(e,t)},t.useEffect=function(e,t,n){null==e&&console.warn("React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?");var r=S();if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S().useId()},t.useImperativeHandle=function(e,t,n){return S().useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return null==e&&console.warn("React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"),S().useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return null==e&&console.warn("React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"),S().useLayoutEffect(e,t)},t.useMemo=function(e,t){return S().useMemo(e,t)},t.useOptimistic=function(e,t){return S().useOptimistic(e,t)},t.useReducer=function(e,t,n){return S().useReducer(e,t,n)},t.useRef=function(e){return S().useRef(e)},t.useState=function(e){return S().useState(e)},t.useSyncExternalStore=function(e,t,n){return S().useSyncExternalStore(e,t,n)},t.useTransition=function(){return S().useTransition()},t.version="19.1.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react/index.js":(e,t,n)=>{e.exports=n("./node_modules/react/cjs/react.development.js")},"./node_modules/react/jsx-runtime.js":(e,t,n)=>{e.exports=n("./node_modules/react/cjs/react-jsx-runtime.development.js")},"./node_modules/scheduler/cjs/scheduler.development.js":(e,t)=>{!function(){function e(){if(w=!1,T){var e=t.unstable_now();R=e;var n=!0;try{e:{v=!1,k&&(k=!1,x(E),E=-1),b=!0;var a=y;try{t:{for(i(e),g=r(p);null!==g&&!(g.expirationTime>e&&s());){var c=g.callback;if("function"==typeof c){g.callback=null,y=g.priorityLevel;var d=c(g.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof d){g.callback=d,i(e),n=!0;break t}g===r(p)&&o(p),i(e)}else o(p);g=r(p)}if(null!==g)n=!0;else{var f=r(h);null!==f&&u(l,f.startTime-e),n=!1}}break e}finally{g=null,y=a,b=!1}n=void 0}}finally{n?P():T=!1}}}function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}function i(e){for(var t=r(h);null!==t;){if(null===t.callback)o(h);else{if(!(t.startTime<=e))break;o(h),t.sortIndex=t.expirationTime,n(p,t)}t=r(h)}}function l(e){if(k=!1,i(e),!v)if(null!==r(p))v=!0,T||(T=!0,P());else{var t=r(h);null!==t&&u(l,t.startTime-e)}}function s(){return!!w||!(t.unstable_now()-R<C)}function u(e,n){E=S((function(){e(t.unstable_now())}),n)}if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error()),t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var c=performance;t.unstable_now=function(){return c.now()}}else{var d=Date,f=d.now();t.unstable_now=function(){return d.now()-f}}var p=[],h=[],m=1,g=null,y=3,b=!1,v=!1,k=!1,w=!1,S="function"==typeof setTimeout?setTimeout:null,x="function"==typeof clearTimeout?clearTimeout:null,_="undefined"!=typeof setImmediate?setImmediate:null,T=!1,E=-1,C=5,R=-1;if("function"==typeof _)var P=function(){_(e)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,L=O.port2;O.port1.onmessage=e,P=function(){L.postMessage(null)}}else P=function(){S(e,0)};t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return y},t.unstable_next=function(e){switch(y){case 1:case 2:case 3:var t=3;break;default:t=y}var n=y;y=t;try{return e()}finally{y=n}},t.unstable_requestPaint=function(){w=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=y;y=e;try{return t()}finally{y=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?i+a:i:a=i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:m++,callback:o,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>i?(e.sortIndex=a,n(h,e),null===r(p)&&e===r(h)&&(k?(x(E),E=-1):k=!0,u(l,a-i))):(e.sortIndex=s,n(p,e),v||b||(v=!0,T||(T=!0,P()))),e},t.unstable_shouldYield=s,t.unstable_wrapCallback=function(e){var t=y;return function(){var n=y;y=t;try{return e.apply(this,arguments)}finally{y=n}}},"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/scheduler/index.js":(e,t,n)=>{e.exports=n("./node_modules/scheduler/cjs/scheduler.development.js")}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r](a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var r={};(()=>{n.r(r);var e=n("./node_modules/react/jsx-runtime.js"),t=(n("./dev/src/_header.scss"),n("./dev/src/components/App.tsx"));(0,n("./node_modules/react-dom/client.js").createRoot)(document).render((0,e.jsx)(t.default,{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,